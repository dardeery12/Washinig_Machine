
washing_machine2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000040be  00004152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008000c6  008000c6  000041b8  2**0
                  ALLOC
  3 .stab         000069cc  00000000  00000000  000041b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005c60  00000000  00000000  0000ab84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000107e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00010924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00010a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000126dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000135c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00014378  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000144d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00014765  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00014f33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 18 0a 	jmp	0x1430	; 0x1430 <__vector_1>
       8:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <__vector_2>
       c:	0c 94 7c 0a 	jmp	0x14f8	; 0x14f8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3c       	cpi	r26, 0xC6	; 198
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ec       	ldi	r26, 0xC6	; 198
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3d       	cpi	r26, 0xD5	; 213
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <main>
      8a:	0c 94 5d 20 	jmp	0x40ba	; 0x40ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 91 1d 	jmp	0x3b22	; 0x3b22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ad 1d 	jmp	0x3b5a	; 0x3b5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b1 1d 	jmp	0x3b62	; 0x3b62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_Init>:

/*****************  GLOBAL FUNCTIONS   *************************/
Gpio_pin_config_t led2 ={PORTA, GPIO_PIN3, GPIO_PIN_OUTPOT};

Std_ReturnType Timer1_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Ret = E_NOK;
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	89 83       	std	Y+1, r24	; 0x01

	  SREG_reg->I = 1;
     b54:	ef e5       	ldi	r30, 0x5F	; 95
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	80 83       	st	Z, r24
	  TCCR1A_reg = 0x80;
     b5e:	ef e4       	ldi	r30, 0x4F	; 79
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 e8       	ldi	r24, 0x80	; 128
     b64:	80 83       	st	Z, r24
	  TCCR1B_reg = 0x08;
     b66:	ee e4       	ldi	r30, 0x4E	; 78
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	80 83       	st	Z, r24
	  OCR1AH_reg = 0xF4;
     b6e:	ed e4       	ldi	r30, 0x4D	; 77
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	84 ef       	ldi	r24, 0xF4	; 244
     b74:	80 83       	st	Z, r24
	  OCR1AL_reg = 0x23;
     b76:	ea e4       	ldi	r30, 0x4A	; 74
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	83 e2       	ldi	r24, 0x23	; 35
     b7c:	80 83       	st	Z, r24
	  TIMSK_reg->OCIE1A = 1;
     b7e:	e9 e5       	ldi	r30, 0x59	; 89
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	80 61       	ori	r24, 0x10	; 16
     b86:	80 83       	st	Z, r24
	return Ret;
     b88:	89 81       	ldd	r24, Y+1	; 0x01
}
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <Timer1_Start>:
Std_ReturnType Timer1_Start()
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	0f 92       	push	r0
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Ret = E_NOK;
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	89 83       	std	Y+1, r24	; 0x01

	return Ret;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
}
     ba2:	0f 90       	pop	r0
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <Timer1_Stop>:
Std_ReturnType Timer1_Stop()
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	0f 92       	push	r0
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Ret = E_NOK;
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	89 83       	std	Y+1, r24	; 0x01

	return Ret;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bba:	0f 90       	pop	r0
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <__vector_9>:

void __vector_9 (void) __attribute__ ((signal)) ;
void __vector_9 (void)
{
     bc2:	1f 92       	push	r1
     bc4:	0f 92       	push	r0
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	0f 92       	push	r0
     bca:	11 24       	eor	r1, r1
     bcc:	2f 93       	push	r18
     bce:	3f 93       	push	r19
     bd0:	4f 93       	push	r20
     bd2:	5f 93       	push	r21
     bd4:	6f 93       	push	r22
     bd6:	7f 93       	push	r23
     bd8:	8f 93       	push	r24
     bda:	9f 93       	push	r25
     bdc:	af 93       	push	r26
     bde:	bf 93       	push	r27
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
	gpio_pin_toggle(&led2);
     bec:	85 ea       	ldi	r24, 0xA5	; 165
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 04 0c 	call	0x1808	; 0x1808 <gpio_pin_toggle>
	Timer1_Ovf_Counter++;
     bf4:	80 91 c8 00 	lds	r24, 0x00C8
     bf8:	8f 5f       	subi	r24, 0xFF	; 255
     bfa:	80 93 c8 00 	sts	0x00C8, r24
	Second_Counter++;
     bfe:	80 91 c6 00 	lds	r24, 0x00C6
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	80 93 c6 00 	sts	0x00C6, r24
	//TIFR_reg->TOV1 = 1;
	if(60 == Timer1_Ovf_Counter)
     c08:	80 91 c8 00 	lds	r24, 0x00C8
     c0c:	8c 33       	cpi	r24, 0x3C	; 60
     c0e:	39 f4       	brne	.+14     	; 0xc1e <__vector_9+0x5c>
	{
		Timer1_Ovf_Counter = 0;
     c10:	10 92 c8 00 	sts	0x00C8, r1
		Minute_Counter++;
     c14:	80 91 c7 00 	lds	r24, 0x00C7
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 c7 00 	sts	0x00C7, r24
	}

}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	ff 91       	pop	r31
     c24:	ef 91       	pop	r30
     c26:	bf 91       	pop	r27
     c28:	af 91       	pop	r26
     c2a:	9f 91       	pop	r25
     c2c:	8f 91       	pop	r24
     c2e:	7f 91       	pop	r23
     c30:	6f 91       	pop	r22
     c32:	5f 91       	pop	r21
     c34:	4f 91       	pop	r20
     c36:	3f 91       	pop	r19
     c38:	2f 91       	pop	r18
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <Timer0_Init>:
volatile uint8 Min_Counter =0 ;
/*****************  GLOBAL VARIABLES   ***********************/

/*****************  GLOBAL FUNCTIONS   ***********************/
void Timer0_Init(void)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupt  */
	SREG_reg->I =1;
     c4c:	ef e5       	ldi	r30, 0x5F	; 95
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	80 68       	ori	r24, 0x80	; 128
     c54:	80 83       	st	Z, r24
	/* set mode */

	/*set prescaller*/
	PRESCALLER_1024();
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	81 60       	ori	r24, 0x01	; 1
     c5e:	80 83       	st	Z, r24
     c60:	e3 e5       	ldi	r30, 0x53	; 83
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	8d 7f       	andi	r24, 0xFD	; 253
     c68:	80 83       	st	Z, r24
     c6a:	e3 e5       	ldi	r30, 0x53	; 83
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	84 60       	ori	r24, 0x04	; 4
     c72:	80 83       	st	Z, r24

	/*  */
	TIMER0_OFV_INTERRUPT_ENABLE();
     c74:	e9 e5       	ldi	r30, 0x59	; 89
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	81 60       	ori	r24, 0x01	; 1
     c7c:	80 83       	st	Z, r24

	Timer0_Stop();
     c7e:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <Timer0_Stop>
}
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <Timer0_Start>:
void Timer0_Start(void)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
	PRESCALLER_1024();
     c90:	e3 e5       	ldi	r30, 0x53	; 83
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	81 60       	ori	r24, 0x01	; 1
     c98:	80 83       	st	Z, r24
     c9a:	e3 e5       	ldi	r30, 0x53	; 83
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	8d 7f       	andi	r24, 0xFD	; 253
     ca2:	80 83       	st	Z, r24
     ca4:	e3 e5       	ldi	r30, 0x53	; 83
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	84 60       	ori	r24, 0x04	; 4
     cac:	80 83       	st	Z, r24
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <Timer0_Stop>:
void Timer0_Stop(void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	TIMERO_NO_CLCK();
     cbc:	e3 e5       	ldi	r30, 0x53	; 83
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	8e 7f       	andi	r24, 0xFE	; 254
     cc4:	80 83       	st	Z, r24
     cc6:	e3 e5       	ldi	r30, 0x53	; 83
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8d 7f       	andi	r24, 0xFD	; 253
     cce:	80 83       	st	Z, r24
     cd0:	e3 e5       	ldi	r30, 0x53	; 83
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8b 7f       	andi	r24, 0xFB	; 251
     cd8:	80 83       	st	Z, r24
}
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <Timer0_Calculate_Sec>:

Std_ReturnType Timer0_Calculate_Sec(uint8 * Second)
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <Timer0_Calculate_Sec+0x6>
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
	if(31 == Ovf_Counter)
     cf0:	80 91 c9 00 	lds	r24, 0x00C9
     cf4:	8f 31       	cpi	r24, 0x1F	; 31
     cf6:	91 f4       	brne	.+36     	; 0xd1c <Timer0_Calculate_Sec+0x3c>
	{
		Sec_Counter++;
     cf8:	80 91 ca 00 	lds	r24, 0x00CA
     cfc:	8f 5f       	subi	r24, 0xFF	; 255
     cfe:	80 93 ca 00 	sts	0x00CA, r24
		(*Second) = Sec_Counter;
     d02:	80 91 ca 00 	lds	r24, 0x00CA
     d06:	e9 81       	ldd	r30, Y+1	; 0x01
     d08:	fa 81       	ldd	r31, Y+2	; 0x02
     d0a:	80 83       	st	Z, r24
		Ovf_Counter = 0;
     d0c:	10 92 c9 00 	sts	0x00C9, r1

		if(Sec_Counter == 60)
     d10:	80 91 ca 00 	lds	r24, 0x00CA
     d14:	8c 33       	cpi	r24, 0x3C	; 60
     d16:	11 f4       	brne	.+4      	; 0xd1c <Timer0_Calculate_Sec+0x3c>
		{
			Sec_Counter = 0;
     d18:	10 92 ca 00 	sts	0x00CA, r1
		}

	}

}
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <Timer0_Calculate_Min_And_Sec>:
Std_ReturnType Timer0_Calculate_Min_And_Sec(uint8 * Sec, uint8 * Minuts)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	00 d0       	rcall	.+0      	; 0xd2e <Timer0_Calculate_Min_And_Sec+0x6>
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <Timer0_Calculate_Min_And_Sec+0x8>
     d30:	0f 92       	push	r0
     d32:	cd b7       	in	r28, 0x3d	; 61
     d34:	de b7       	in	r29, 0x3e	; 62
     d36:	9b 83       	std	Y+3, r25	; 0x03
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	7d 83       	std	Y+5, r23	; 0x05
     d3c:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType Ret = E_NOK;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	89 83       	std	Y+1, r24	; 0x01
	static uint8 Loc_sec =0;
	Timer0_Calculate_Sec(&Loc_sec);
     d42:	8c ec       	ldi	r24, 0xCC	; 204
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	0e 94 70 06 	call	0xce0	; 0xce0 <Timer0_Calculate_Sec>
	*Sec = Loc_sec;
     d4a:	80 91 cc 00 	lds	r24, 0x00CC
     d4e:	ea 81       	ldd	r30, Y+2	; 0x02
     d50:	fb 81       	ldd	r31, Y+3	; 0x03
     d52:	80 83       	st	Z, r24
	if(Loc_sec == 60)
     d54:	80 91 cc 00 	lds	r24, 0x00CC
     d58:	8c 33       	cpi	r24, 0x3C	; 60
     d5a:	61 f4       	brne	.+24     	; 0xd74 <Timer0_Calculate_Min_And_Sec+0x4c>
	{
		Loc_sec = 0;
     d5c:	10 92 cc 00 	sts	0x00CC, r1
		Min_Counter++;
     d60:	80 91 cb 00 	lds	r24, 0x00CB
     d64:	8f 5f       	subi	r24, 0xFF	; 255
     d66:	80 93 cb 00 	sts	0x00CB, r24
		*Minuts = Min_Counter;
     d6a:	80 91 cb 00 	lds	r24, 0x00CB
     d6e:	ec 81       	ldd	r30, Y+4	; 0x04
     d70:	fd 81       	ldd	r31, Y+5	; 0x05
     d72:	80 83       	st	Z, r24
	}

return Ret;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
}
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	08 95       	ret

00000d86 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	8f 93       	push	r24
     d92:	ef 93       	push	r30
     d94:	ff 93       	push	r31
     d96:	df 93       	push	r29
     d98:	cf 93       	push	r28
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
	Ovf_Counter++;
     d9e:	80 91 c9 00 	lds	r24, 0x00C9
     da2:	8f 5f       	subi	r24, 0xFF	; 255
     da4:	80 93 c9 00 	sts	0x00C9, r24
	TIMER0_CLEAR_FLAG();
     da8:	e8 e5       	ldi	r30, 0x58	; 88
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	80 83       	st	Z, r24
}
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	ff 91       	pop	r31
     db8:	ef 91       	pop	r30
     dba:	8f 91       	pop	r24
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	0f 90       	pop	r0
     dc2:	1f 90       	pop	r1
     dc4:	18 95       	reti

00000dc6 <Interrupt_External_Init>:
static void (*Ext_Interrupt2_Handler)(void);


/*****************  GLOBAL FUNCTIONS   *************************/
Std_ReturnType Interrupt_External_Init(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	2a 97       	sbiw	r28, 0x0a	; 10
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	98 87       	std	Y+8, r25	; 0x08
     ddc:	8f 83       	std	Y+7, r24	; 0x07
	Std_ReturnType ret = E_NOK, ret1 = E_NOK, ret2 = E_NOK, ret3 = E_NOK, ret4 = E_NOK, ret5 = E_NOK ;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	8e 83       	std	Y+6, r24	; 0x06
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	8c 83       	std	Y+4, r24	; 0x04
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	8b 83       	std	Y+3, r24	; 0x03
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
     df6:	8f 81       	ldd	r24, Y+7	; 0x07
     df8:	98 85       	ldd	r25, Y+8	; 0x08
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	19 f4       	brne	.+6      	; 0xe04 <Interrupt_External_Init+0x3e>
	{
		ret = E_NOK;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	8e 83       	std	Y+6, r24	; 0x06
     e02:	2f c0       	rjmp	.+94     	; 0xe62 <Interrupt_External_Init+0x9c>
	}
	else
	{

		/* Set INT1 and INT0 bits in the General Interrupt Control Register (GICR) */
		ret1 = Ext_Interrupt_Select_INTx(Interrupt_Cnfg_obj);
     e04:	8f 81       	ldd	r24, Y+7	; 0x07
     e06:	98 85       	ldd	r25, Y+8	; 0x08
     e08:	0e 94 ba 07 	call	0xf74	; 0xf74 <Ext_Interrupt_Select_INTx>
     e0c:	8d 83       	std	Y+5, r24	; 0x05

		/* Configure MCU Control Register (MCUCR) to select interrupt sense.*/
		ret2 = Ext_Interrupt_INTx_Set_Sence(Interrupt_Cnfg_obj);
     e0e:	8f 81       	ldd	r24, Y+7	; 0x07
     e10:	98 85       	ldd	r25, Y+8	; 0x08
     e12:	0e 94 78 07 	call	0xef0	; 0xef0 <Ext_Interrupt_INTx_Set_Sence>
     e16:	8c 83       	std	Y+4, r24	; 0x04

		/* Set Global Interrupt(I-bit) Enable bit in the AVR Status Register(SREG)*/
		ret3 = Interrupt_Global_Enable();
     e18:	0e 94 54 07 	call	0xea8	; 0xea8 <Interrupt_Global_Enable>
     e1c:	8b 83       	std	Y+3, r24	; 0x03

		/*set interrupt pin as input */
		ret4 = Ext_Interrupt_Set_Pin(Interrupt_Cnfg_obj);
     e1e:	8f 81       	ldd	r24, Y+7	; 0x07
     e20:	98 85       	ldd	r25, Y+8	; 0x08
     e22:	0e 94 0d 09 	call	0x121a	; 0x121a <Ext_Interrupt_Set_Pin>
     e26:	8a 83       	std	Y+2, r24	; 0x02

		/* Handle the interrupt in the Interrupt Service Routine code*/
		ret5 = Ext_Interrupt_Tx_Set_Handler(Interrupt_Cnfg_obj);
     e28:	8f 81       	ldd	r24, Y+7	; 0x07
     e2a:	98 85       	ldd	r25, Y+8	; 0x08
     e2c:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <Ext_Interrupt_Tx_Set_Handler>
     e30:	89 83       	std	Y+1, r24	; 0x01

		ret = (ret1 && ret2 && ret3 && ret4 && ret5 );
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	88 23       	and	r24, r24
     e36:	89 f0       	breq	.+34     	; 0xe5a <Interrupt_External_Init+0x94>
     e38:	8c 81       	ldd	r24, Y+4	; 0x04
     e3a:	88 23       	and	r24, r24
     e3c:	71 f0       	breq	.+28     	; 0xe5a <Interrupt_External_Init+0x94>
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	88 23       	and	r24, r24
     e42:	59 f0       	breq	.+22     	; 0xe5a <Interrupt_External_Init+0x94>
     e44:	8a 81       	ldd	r24, Y+2	; 0x02
     e46:	88 23       	and	r24, r24
     e48:	41 f0       	breq	.+16     	; 0xe5a <Interrupt_External_Init+0x94>
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	88 23       	and	r24, r24
     e4e:	29 f0       	breq	.+10     	; 0xe5a <Interrupt_External_Init+0x94>
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	9a 87       	std	Y+10, r25	; 0x0a
     e56:	89 87       	std	Y+9, r24	; 0x09
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <Interrupt_External_Init+0x98>
     e5a:	1a 86       	std	Y+10, r1	; 0x0a
     e5c:	19 86       	std	Y+9, r1	; 0x09
     e5e:	99 85       	ldd	r25, Y+9	; 0x09
     e60:	9e 83       	std	Y+6, r25	; 0x06
	}
	return ret;
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e64:	2a 96       	adiw	r28, 0x0a	; 10
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	de bf       	out	0x3e, r29	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	cd bf       	out	0x3d, r28	; 61
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <Interrupt_External_Dinit>:
Std_ReturnType Interrupt_External_Dinit(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <Interrupt_External_Dinit+0x6>
     e7c:	0f 92       	push	r0
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62
     e82:	9b 83       	std	Y+3, r25	; 0x03
     e84:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	9b 81       	ldd	r25, Y+3	; 0x03
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	19 f4       	brne	.+6      	; 0xe98 <Interrupt_External_Dinit+0x22>
	{
		ret = E_NOK;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <Interrupt_External_Dinit+0x24>
	}
	else
	{
		ret = E_OK;
     e98:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <Interrupt_Global_Enable>:

Std_ReturnType Interrupt_Global_Enable(void)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	0f 92       	push	r0
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01
	//SREG  |=(1<<7);
	INTERRUPT_GLOBAL_ENABLE();
     eb6:	ef e5       	ldi	r30, 0x5F	; 95
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 68       	ori	r24, 0x80	; 128
     ebe:	80 83       	st	Z, r24
	ret = E_OK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
	return ret;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	0f 90       	pop	r0
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	08 95       	ret

00000ecc <Interrupt_Global_Disable>:

Std_ReturnType Interrupt_Global_Disable(void)
{
     ecc:	df 93       	push	r29
     ece:	cf 93       	push	r28
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType ret = E_NOK;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	89 83       	std	Y+1, r24	; 0x01

	INTERRUPT_GLOBAL_ENABLE();
     eda:	ef e5       	ldi	r30, 0x5F	; 95
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	80 68       	ori	r24, 0x80	; 128
     ee2:	80 83       	st	Z, r24
	ret = E_OK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	return ret;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <Ext_Interrupt_INTx_Set_Sence>:

/*****************  STATIC FUNCTIONS   *************************/
static Std_ReturnType Ext_Interrupt_INTx_Set_Sence(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	00 d0       	rcall	.+0      	; 0xef6 <Ext_Interrupt_INTx_Set_Sence+0x6>
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <Ext_Interrupt_INTx_Set_Sence+0x8>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	19 f4       	brne	.+6      	; 0xf14 <Ext_Interrupt_INTx_Set_Sence+0x24>
	{
		ret = E_NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	27 c0       	rjmp	.+78     	; 0xf62 <Ext_Interrupt_INTx_Set_Sence+0x72>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Num)
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	82 81       	ldd	r24, Z+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	3d 83       	std	Y+5, r19	; 0x05
     f20:	2c 83       	std	Y+4, r18	; 0x04
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	71 f0       	breq	.+28     	; 0xf48 <Ext_Interrupt_INTx_Set_Sence+0x58>
     f2c:	2c 81       	ldd	r18, Y+4	; 0x04
     f2e:	3d 81       	ldd	r19, Y+5	; 0x05
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	71 f0       	breq	.+28     	; 0xf52 <Ext_Interrupt_INTx_Set_Sence+0x62>
     f36:	8c 81       	ldd	r24, Y+4	; 0x04
     f38:	9d 81       	ldd	r25, Y+5	; 0x05
     f3a:	00 97       	sbiw	r24, 0x00	; 0
     f3c:	79 f4       	brne	.+30     	; 0xf5c <Ext_Interrupt_INTx_Set_Sence+0x6c>
		{
		case INTERRUPT_EXTERNAL_INT0:
			Ext_Interrupt0_Set_Sence(Interrupt_Cnfg_obj);
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	9b 81       	ldd	r25, Y+3	; 0x03
     f42:	0e 94 ff 07 	call	0xffe	; 0xffe <Ext_Interrupt0_Set_Sence>
     f46:	0c c0       	rjmp	.+24     	; 0xf60 <Ext_Interrupt_INTx_Set_Sence+0x70>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			Ext_Interrupt1_Set_Sence(Interrupt_Cnfg_obj);
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <Ext_Interrupt1_Set_Sence>
     f50:	07 c0       	rjmp	.+14     	; 0xf60 <Ext_Interrupt_INTx_Set_Sence+0x70>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			Ext_Interrupt2_Set_Sence(Interrupt_Cnfg_obj);
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	9b 81       	ldd	r25, Y+3	; 0x03
     f56:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <Ext_Interrupt2_Set_Sence>
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <Ext_Interrupt_INTx_Set_Sence+0x70>
			break;
		default :
			ret = E_NOK;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		ret = E_OK;
     f60:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
     f62:	89 81       	ldd	r24, Y+1	; 0x01
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <Ext_Interrupt_Select_INTx>:

static Std_ReturnType Ext_Interrupt_Select_INTx(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <Ext_Interrupt_Select_INTx+0x6>
     f7a:	00 d0       	rcall	.+0      	; 0xf7c <Ext_Interrupt_Select_INTx+0x8>
     f7c:	0f 92       	push	r0
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	9b 83       	std	Y+3, r25	; 0x03
     f84:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	9b 81       	ldd	r25, Y+3	; 0x03
     f8e:	00 97       	sbiw	r24, 0x00	; 0
     f90:	19 f4       	brne	.+6      	; 0xf98 <Ext_Interrupt_Select_INTx+0x24>
	{
		ret = E_NOK;
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	89 83       	std	Y+1, r24	; 0x01
     f96:	2a c0       	rjmp	.+84     	; 0xfec <Ext_Interrupt_Select_INTx+0x78>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Num)
     f98:	ea 81       	ldd	r30, Y+2	; 0x02
     f9a:	fb 81       	ldd	r31, Y+3	; 0x03
     f9c:	82 81       	ldd	r24, Z+2	; 0x02
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 83       	std	Y+5, r19	; 0x05
     fa4:	2c 83       	std	Y+4, r18	; 0x04
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	91 05       	cpc	r25, r1
     fae:	79 f0       	breq	.+30     	; 0xfce <Ext_Interrupt_Select_INTx+0x5a>
     fb0:	2c 81       	ldd	r18, Y+4	; 0x04
     fb2:	3d 81       	ldd	r19, Y+5	; 0x05
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	31 05       	cpc	r19, r1
     fb8:	81 f0       	breq	.+32     	; 0xfda <Ext_Interrupt_Select_INTx+0x66>
     fba:	8c 81       	ldd	r24, Y+4	; 0x04
     fbc:	9d 81       	ldd	r25, Y+5	; 0x05
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	91 f4       	brne	.+36     	; 0xfe6 <Ext_Interrupt_Select_INTx+0x72>
		{
		case INTERRUPT_EXTERNAL_INT0:
			INTERRUPT_EXT_INT0_ENABLE();
     fc2:	eb e5       	ldi	r30, 0x5B	; 91
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 64       	ori	r24, 0x40	; 64
     fca:	80 83       	st	Z, r24
     fcc:	0e c0       	rjmp	.+28     	; 0xfea <Ext_Interrupt_Select_INTx+0x76>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			INTERRUPT_EXTERNAL_INT1_ENABLE();
     fce:	eb e5       	ldi	r30, 0x5B	; 91
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	80 68       	ori	r24, 0x80	; 128
     fd6:	80 83       	st	Z, r24
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <Ext_Interrupt_Select_INTx+0x76>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			INTERRUPT_EXTERNAL_INT2_ENABLE();
     fda:	eb e5       	ldi	r30, 0x5B	; 91
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	80 83       	st	Z, r24
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <Ext_Interrupt_Select_INTx+0x76>
			break;
		default :
			ret = E_NOK;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		ret = E_OK;
     fea:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
}
     fee:	0f 90       	pop	r0
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	cf 91       	pop	r28
     ffa:	df 91       	pop	r29
     ffc:	08 95       	ret

00000ffe <Ext_Interrupt0_Set_Sence>:

static Std_ReturnType Ext_Interrupt0_Set_Sence(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
     ffe:	df 93       	push	r29
    1000:	cf 93       	push	r28
    1002:	00 d0       	rcall	.+0      	; 0x1004 <Ext_Interrupt0_Set_Sence+0x6>
    1004:	00 d0       	rcall	.+0      	; 0x1006 <Ext_Interrupt0_Set_Sence+0x8>
    1006:	0f 92       	push	r0
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	9b 83       	std	Y+3, r25	; 0x03
    100e:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
    1014:	8a 81       	ldd	r24, Y+2	; 0x02
    1016:	9b 81       	ldd	r25, Y+3	; 0x03
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	19 f4       	brne	.+6      	; 0x1022 <Ext_Interrupt0_Set_Sence+0x24>
	{
		ret = E_NOK;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	4f c0       	rjmp	.+158    	; 0x10c0 <Ext_Interrupt0_Set_Sence+0xc2>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Sense)
    1022:	ea 81       	ldd	r30, Y+2	; 0x02
    1024:	fb 81       	ldd	r31, Y+3	; 0x03
    1026:	83 81       	ldd	r24, Z+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3d 83       	std	Y+5, r19	; 0x05
    102e:	2c 83       	std	Y+4, r18	; 0x04
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	81 30       	cpi	r24, 0x01	; 1
    1036:	91 05       	cpc	r25, r1
    1038:	01 f1       	breq	.+64     	; 0x107a <Ext_Interrupt0_Set_Sence+0x7c>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	2c f4       	brge	.+10     	; 0x104e <Ext_Interrupt0_Set_Sence+0x50>
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	9d 81       	ldd	r25, Y+5	; 0x05
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	61 f0       	breq	.+24     	; 0x1064 <Ext_Interrupt0_Set_Sence+0x66>
    104c:	37 c0       	rjmp	.+110    	; 0x10bc <Ext_Interrupt0_Set_Sence+0xbe>
    104e:	2c 81       	ldd	r18, Y+4	; 0x04
    1050:	3d 81       	ldd	r19, Y+5	; 0x05
    1052:	22 30       	cpi	r18, 0x02	; 2
    1054:	31 05       	cpc	r19, r1
    1056:	e1 f0       	breq	.+56     	; 0x1090 <Ext_Interrupt0_Set_Sence+0x92>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	83 30       	cpi	r24, 0x03	; 3
    105e:	91 05       	cpc	r25, r1
    1060:	11 f1       	breq	.+68     	; 0x10a6 <Ext_Interrupt0_Set_Sence+0xa8>
    1062:	2c c0       	rjmp	.+88     	; 0x10bc <Ext_Interrupt0_Set_Sence+0xbe>
		{
		case INTERRUPT_FALLING_EDGE:
			INTERRUPT0_FALLING_EDGE_ENABLE();
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8e 7f       	andi	r24, 0xFE	; 254
    106c:	80 83       	st	Z, r24
    106e:	e5 e5       	ldi	r30, 0x55	; 85
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	82 60       	ori	r24, 0x02	; 2
    1076:	80 83       	st	Z, r24
    1078:	23 c0       	rjmp	.+70     	; 0x10c0 <Ext_Interrupt0_Set_Sence+0xc2>
			break;
		case INTERRUPT_RISING_EDGE:
			INTERRUPT0_RISING_EDGE_ENABLE();
    107a:	e5 e5       	ldi	r30, 0x55	; 85
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	81 60       	ori	r24, 0x01	; 1
    1082:	80 83       	st	Z, r24
    1084:	e5 e5       	ldi	r30, 0x55	; 85
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	82 60       	ori	r24, 0x02	; 2
    108c:	80 83       	st	Z, r24
    108e:	18 c0       	rjmp	.+48     	; 0x10c0 <Ext_Interrupt0_Set_Sence+0xc2>
			break;
		case INTERRUPT_LOGICAL_CHANGE:
			INTERRUPT0_LOGICAL_CHANGE_ENABLE();
    1090:	e5 e5       	ldi	r30, 0x55	; 85
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	81 60       	ori	r24, 0x01	; 1
    1098:	80 83       	st	Z, r24
    109a:	e5 e5       	ldi	r30, 0x55	; 85
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	8d 7f       	andi	r24, 0xFD	; 253
    10a2:	80 83       	st	Z, r24
    10a4:	0d c0       	rjmp	.+26     	; 0x10c0 <Ext_Interrupt0_Set_Sence+0xc2>
			break;
		case INTERRUPT_LOW_LEVEL:
			INTERRUPT0_LOW_LEVEL_ENABLE() ;
    10a6:	e5 e5       	ldi	r30, 0x55	; 85
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	8e 7f       	andi	r24, 0xFE	; 254
    10ae:	80 83       	st	Z, r24
    10b0:	e5 e5       	ldi	r30, 0x55	; 85
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8d 7f       	andi	r24, 0xFD	; 253
    10b8:	80 83       	st	Z, r24
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <Ext_Interrupt0_Set_Sence+0xc2>
			break;
		default :
			ret = E_NOK;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return ret;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	cf 91       	pop	r28
    10ce:	df 91       	pop	r29
    10d0:	08 95       	ret

000010d2 <Ext_Interrupt1_Set_Sence>:
static Std_ReturnType Ext_Interrupt1_Set_Sence(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
    10d2:	df 93       	push	r29
    10d4:	cf 93       	push	r28
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <Ext_Interrupt1_Set_Sence+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <Ext_Interrupt1_Set_Sence+0x8>
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	9b 83       	std	Y+3, r25	; 0x03
    10e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	9b 81       	ldd	r25, Y+3	; 0x03
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	19 f4       	brne	.+6      	; 0x10f6 <Ext_Interrupt1_Set_Sence+0x24>
	{
		ret = E_NOK;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	89 83       	std	Y+1, r24	; 0x01
    10f4:	4f c0       	rjmp	.+158    	; 0x1194 <Ext_Interrupt1_Set_Sence+0xc2>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Sense)
    10f6:	ea 81       	ldd	r30, Y+2	; 0x02
    10f8:	fb 81       	ldd	r31, Y+3	; 0x03
    10fa:	83 81       	ldd	r24, Z+3	; 0x03
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	3d 83       	std	Y+5, r19	; 0x05
    1102:	2c 83       	std	Y+4, r18	; 0x04
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	91 05       	cpc	r25, r1
    110c:	01 f1       	breq	.+64     	; 0x114e <Ext_Interrupt1_Set_Sence+0x7c>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <Ext_Interrupt1_Set_Sence+0x50>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	61 f0       	breq	.+24     	; 0x1138 <Ext_Interrupt1_Set_Sence+0x66>
    1120:	37 c0       	rjmp	.+110    	; 0x1190 <Ext_Interrupt1_Set_Sence+0xbe>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	e1 f0       	breq	.+56     	; 0x1164 <Ext_Interrupt1_Set_Sence+0x92>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	83 30       	cpi	r24, 0x03	; 3
    1132:	91 05       	cpc	r25, r1
    1134:	11 f1       	breq	.+68     	; 0x117a <Ext_Interrupt1_Set_Sence+0xa8>
    1136:	2c c0       	rjmp	.+88     	; 0x1190 <Ext_Interrupt1_Set_Sence+0xbe>
		{
		case INTERRUPT_FALLING_EDGE:
			INTERRUPT1_FALLING_EDGE_ENABLE();
    1138:	e5 e5       	ldi	r30, 0x55	; 85
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	8b 7f       	andi	r24, 0xFB	; 251
    1140:	80 83       	st	Z, r24
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 60       	ori	r24, 0x08	; 8
    114a:	80 83       	st	Z, r24
    114c:	23 c0       	rjmp	.+70     	; 0x1194 <Ext_Interrupt1_Set_Sence+0xc2>
			break;
		case INTERRUPT_RISING_EDGE:
			INTERRUPT1_RISING_EDGE_ENABLE();
    114e:	e5 e5       	ldi	r30, 0x55	; 85
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	84 60       	ori	r24, 0x04	; 4
    1156:	80 83       	st	Z, r24
    1158:	e5 e5       	ldi	r30, 0x55	; 85
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	88 60       	ori	r24, 0x08	; 8
    1160:	80 83       	st	Z, r24
    1162:	18 c0       	rjmp	.+48     	; 0x1194 <Ext_Interrupt1_Set_Sence+0xc2>
			break;
		case INTERRUPT_LOGICAL_CHANGE:
			INTERRUPT1_LOGICAL_CHANGE_ENABLE();
    1164:	e5 e5       	ldi	r30, 0x55	; 85
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	84 60       	ori	r24, 0x04	; 4
    116c:	80 83       	st	Z, r24
    116e:	e5 e5       	ldi	r30, 0x55	; 85
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	87 7f       	andi	r24, 0xF7	; 247
    1176:	80 83       	st	Z, r24
    1178:	0d c0       	rjmp	.+26     	; 0x1194 <Ext_Interrupt1_Set_Sence+0xc2>
			break;
		case INTERRUPT_LOW_LEVEL:
			INTERRUPT1_LOW_LEVEL_ENABLE();
    117a:	e5 e5       	ldi	r30, 0x55	; 85
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8b 7f       	andi	r24, 0xFB	; 251
    1182:	80 83       	st	Z, r24
    1184:	e5 e5       	ldi	r30, 0x55	; 85
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	87 7f       	andi	r24, 0xF7	; 247
    118c:	80 83       	st	Z, r24
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <Ext_Interrupt1_Set_Sence+0xc2>
			break;
		default :
			ret = E_NOK;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return ret;
    1194:	89 81       	ldd	r24, Y+1	; 0x01
}
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <Ext_Interrupt2_Set_Sence>:
static Std_ReturnType Ext_Interrupt2_Set_Sence(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <Ext_Interrupt2_Set_Sence+0x6>
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <Ext_Interrupt2_Set_Sence+0x8>
    11ae:	0f 92       	push	r0
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	19 f4       	brne	.+6      	; 0x11ca <Ext_Interrupt2_Set_Sence+0x24>
	{
		ret = E_NOK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	1f c0       	rjmp	.+62     	; 0x1208 <Ext_Interrupt2_Set_Sence+0x62>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Sense)
    11ca:	ea 81       	ldd	r30, Y+2	; 0x02
    11cc:	fb 81       	ldd	r31, Y+3	; 0x03
    11ce:	83 81       	ldd	r24, Z+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	3d 83       	std	Y+5, r19	; 0x05
    11d6:	2c 83       	std	Y+4, r18	; 0x04
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
    11da:	9d 81       	ldd	r25, Y+5	; 0x05
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	31 f0       	breq	.+12     	; 0x11ec <Ext_Interrupt2_Set_Sence+0x46>
    11e0:	2c 81       	ldd	r18, Y+4	; 0x04
    11e2:	3d 81       	ldd	r19, Y+5	; 0x05
    11e4:	21 30       	cpi	r18, 0x01	; 1
    11e6:	31 05       	cpc	r19, r1
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <Ext_Interrupt2_Set_Sence+0x52>
    11ea:	0c c0       	rjmp	.+24     	; 0x1204 <Ext_Interrupt2_Set_Sence+0x5e>
		{
		case INTERRUPT_FALLING_EDGE:
			INTERRUPT2_FALLING_EDGE_ENABLE();
    11ec:	e4 e5       	ldi	r30, 0x54	; 84
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	8f 7b       	andi	r24, 0xBF	; 191
    11f4:	80 83       	st	Z, r24
    11f6:	08 c0       	rjmp	.+16     	; 0x1208 <Ext_Interrupt2_Set_Sence+0x62>
			break;
		case INTERRUPT_RISING_EDGE:
			INTERRUPT2_RISING_EDGE_ENABLE();
    11f8:	e4 e5       	ldi	r30, 0x54	; 84
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	80 64       	ori	r24, 0x40	; 64
    1200:	80 83       	st	Z, r24
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <Ext_Interrupt2_Set_Sence+0x62>
			break;

		default :
			ret = E_NOK;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return ret;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <Ext_Interrupt_Set_Pin>:

static Std_ReturnType Ext_Interrupt_Set_Pin(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	2b 97       	sbiw	r28, 0x0b	; 11
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	99 87       	std	Y+9, r25	; 0x09
    1230:	88 87       	std	Y+8, r24	; 0x08
	Gpio_pin_config_t INT0_PIN = {.port = PORTD, .pin = GPIO_PIN2, .direction = GPIO_PIN_INPOT};
    1232:	1b 82       	std	Y+3, r1	; 0x03
    1234:	1a 82       	std	Y+2, r1	; 0x02
    1236:	80 e3       	ldi	r24, 0x30	; 48
    1238:	8a 83       	std	Y+2, r24	; 0x02
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 7f       	andi	r24, 0xF8	; 248
    123e:	82 60       	ori	r24, 0x02	; 2
    1240:	8b 83       	std	Y+3, r24	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	88 60       	ori	r24, 0x08	; 8
    1246:	8b 83       	std	Y+3, r24	; 0x03
	Gpio_pin_config_t INT1_PIN = {.port = PORTD, .pin = GPIO_PIN3, .direction = GPIO_PIN_INPOT};
    1248:	1d 82       	std	Y+5, r1	; 0x05
    124a:	1c 82       	std	Y+4, r1	; 0x04
    124c:	80 e3       	ldi	r24, 0x30	; 48
    124e:	8c 83       	std	Y+4, r24	; 0x04
    1250:	8d 81       	ldd	r24, Y+5	; 0x05
    1252:	88 7f       	andi	r24, 0xF8	; 248
    1254:	83 60       	ori	r24, 0x03	; 3
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	88 60       	ori	r24, 0x08	; 8
    125c:	8d 83       	std	Y+5, r24	; 0x05
	Gpio_pin_config_t INT2_PIN = {.port = PORTB, .pin = GPIO_PIN3, .direction = GPIO_PIN_INPOT};
    125e:	1f 82       	std	Y+7, r1	; 0x07
    1260:	1e 82       	std	Y+6, r1	; 0x06
    1262:	86 e3       	ldi	r24, 0x36	; 54
    1264:	8e 83       	std	Y+6, r24	; 0x06
    1266:	8f 81       	ldd	r24, Y+7	; 0x07
    1268:	88 7f       	andi	r24, 0xF8	; 248
    126a:	83 60       	ori	r24, 0x03	; 3
    126c:	8f 83       	std	Y+7, r24	; 0x07
    126e:	8f 81       	ldd	r24, Y+7	; 0x07
    1270:	88 60       	ori	r24, 0x08	; 8
    1272:	8f 83       	std	Y+7, r24	; 0x07

	Std_ReturnType ret = E_NOK;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
    1278:	88 85       	ldd	r24, Y+8	; 0x08
    127a:	99 85       	ldd	r25, Y+9	; 0x09
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	19 f4       	brne	.+6      	; 0x1286 <Ext_Interrupt_Set_Pin+0x6c>
	{
		ret = E_NOK;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	26 c0       	rjmp	.+76     	; 0x12d2 <Ext_Interrupt_Set_Pin+0xb8>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Num)
    1286:	e8 85       	ldd	r30, Y+8	; 0x08
    1288:	f9 85       	ldd	r31, Y+9	; 0x09
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	3b 87       	std	Y+11, r19	; 0x0b
    1292:	2a 87       	std	Y+10, r18	; 0x0a
    1294:	8a 85       	ldd	r24, Y+10	; 0x0a
    1296:	9b 85       	ldd	r25, Y+11	; 0x0b
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	91 05       	cpc	r25, r1
    129c:	71 f0       	breq	.+28     	; 0x12ba <Ext_Interrupt_Set_Pin+0xa0>
    129e:	2a 85       	ldd	r18, Y+10	; 0x0a
    12a0:	3b 85       	ldd	r19, Y+11	; 0x0b
    12a2:	22 30       	cpi	r18, 0x02	; 2
    12a4:	31 05       	cpc	r19, r1
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <Ext_Interrupt_Set_Pin+0xaa>
    12a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    12aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	79 f4       	brne	.+30     	; 0x12ce <Ext_Interrupt_Set_Pin+0xb4>
		{
		case INTERRUPT_EXTERNAL_INT0:
			gpio_pin_initialize(&INT0_PIN);
    12b0:	ce 01       	movw	r24, r28
    12b2:	02 96       	adiw	r24, 0x02	; 2
    12b4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    12b8:	0c c0       	rjmp	.+24     	; 0x12d2 <Ext_Interrupt_Set_Pin+0xb8>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			gpio_pin_initialize(&INT1_PIN);
    12ba:	ce 01       	movw	r24, r28
    12bc:	04 96       	adiw	r24, 0x04	; 4
    12be:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    12c2:	07 c0       	rjmp	.+14     	; 0x12d2 <Ext_Interrupt_Set_Pin+0xb8>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			gpio_pin_initialize(&INT2_PIN);
    12c4:	ce 01       	movw	r24, r28
    12c6:	06 96       	adiw	r24, 0x06	; 6
    12c8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Ext_Interrupt_Set_Pin+0xb8>
			break;
		default :
			ret = E_NOK;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return ret;
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d4:	2b 96       	adiw	r28, 0x0b	; 11
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	f8 94       	cli
    12da:	de bf       	out	0x3e, r29	; 62
    12dc:	0f be       	out	0x3f, r0	; 63
    12de:	cd bf       	out	0x3d, r28	; 61
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <Ext_Interrupt0_Set_Handler>:

Std_ReturnType Ext_Interrupt0_Set_Handler(void (*interrupt_handle)(void))
{
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <Ext_Interrupt0_Set_Handler+0x6>
    12ec:	0f 92       	push	r0
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == interrupt_handle)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	9b 81       	ldd	r25, Y+3	; 0x03
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	19 f4       	brne	.+6      	; 0x1308 <Ext_Interrupt0_Set_Handler+0x22>
	{
		ret = E_NOK;
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <Ext_Interrupt0_Set_Handler+0x30>
	}
	else
	{
		Ext_Interrupt0_Handler = interrupt_handle;
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	90 93 ce 00 	sts	0x00CE, r25
    1310:	80 93 cd 00 	sts	0x00CD, r24
		ret = E_OK;
    1314:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <Ext_Interrupt1_Set_Handler>:
Std_ReturnType Ext_Interrupt1_Set_Handler(void (*interrupt_handle)(void))
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <Ext_Interrupt1_Set_Handler+0x6>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	9b 83       	std	Y+3, r25	; 0x03
    1332:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == interrupt_handle)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	9b 81       	ldd	r25, Y+3	; 0x03
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	19 f4       	brne	.+6      	; 0x1346 <Ext_Interrupt1_Set_Handler+0x22>
	{
		ret = E_NOK;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	07 c0       	rjmp	.+14     	; 0x1354 <Ext_Interrupt1_Set_Handler+0x30>
	}
	else
	{
		Ext_Interrupt1_Handler = interrupt_handle;
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	90 93 d0 00 	sts	0x00D0, r25
    134e:	80 93 cf 00 	sts	0x00CF, r24
		ret = E_OK;
    1352:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1354:	89 81       	ldd	r24, Y+1	; 0x01
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	cf 91       	pop	r28
    135e:	df 91       	pop	r29
    1360:	08 95       	ret

00001362 <Ext_Interrupt2_Set_Handler>:
Std_ReturnType Ext_Interrupt2_Set_Handler(void (*interrupt_handle)(void))
{
    1362:	df 93       	push	r29
    1364:	cf 93       	push	r28
    1366:	00 d0       	rcall	.+0      	; 0x1368 <Ext_Interrupt2_Set_Handler+0x6>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	9b 83       	std	Y+3, r25	; 0x03
    1370:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == interrupt_handle)
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	00 97       	sbiw	r24, 0x00	; 0
    137c:	19 f4       	brne	.+6      	; 0x1384 <Ext_Interrupt2_Set_Handler+0x22>
	{
		ret = E_NOK;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	07 c0       	rjmp	.+14     	; 0x1392 <Ext_Interrupt2_Set_Handler+0x30>
	}
	else
	{
		Ext_Interrupt2_Handler = interrupt_handle;
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	90 93 d2 00 	sts	0x00D2, r25
    138c:	80 93 d1 00 	sts	0x00D1, r24
		ret = E_OK;
    1390:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    1392:	89 81       	ldd	r24, Y+1	; 0x01
}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	08 95       	ret

000013a0 <Ext_Interrupt_Tx_Set_Handler>:

Std_ReturnType Ext_Interrupt_Tx_Set_Handler(Interrupt_Cnfg_t * Interrupt_Cnfg_obj)
{
    13a0:	df 93       	push	r29
    13a2:	cf 93       	push	r28
    13a4:	00 d0       	rcall	.+0      	; 0x13a6 <Ext_Interrupt_Tx_Set_Handler+0x6>
    13a6:	00 d0       	rcall	.+0      	; 0x13a8 <Ext_Interrupt_Tx_Set_Handler+0x8>
    13a8:	0f 92       	push	r0
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	9b 83       	std	Y+3, r25	; 0x03
    13b0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == Interrupt_Cnfg_obj)
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	19 f4       	brne	.+6      	; 0x13c4 <Ext_Interrupt_Tx_Set_Handler+0x24>
	{
		ret = E_NOK;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	2d c0       	rjmp	.+90     	; 0x141e <Ext_Interrupt_Tx_Set_Handler+0x7e>
	}
	else
	{
		switch(Interrupt_Cnfg_obj->Interrupt_Num)
    13c4:	ea 81       	ldd	r30, Y+2	; 0x02
    13c6:	fb 81       	ldd	r31, Y+3	; 0x03
    13c8:	82 81       	ldd	r24, Z+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	3d 83       	std	Y+5, r19	; 0x05
    13d0:	2c 83       	std	Y+4, r18	; 0x04
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	81 30       	cpi	r24, 0x01	; 1
    13d8:	91 05       	cpc	r25, r1
    13da:	81 f0       	breq	.+32     	; 0x13fc <Ext_Interrupt_Tx_Set_Handler+0x5c>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	91 f0       	breq	.+36     	; 0x140a <Ext_Interrupt_Tx_Set_Handler+0x6a>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	a9 f4       	brne	.+42     	; 0x1418 <Ext_Interrupt_Tx_Set_Handler+0x78>
		{
		case INTERRUPT_EXTERNAL_INT0:
			Ext_Interrupt0_Set_Handler(Interrupt_Cnfg_obj->INTERRUPT_HANDLER);
    13ee:	ea 81       	ldd	r30, Y+2	; 0x02
    13f0:	fb 81       	ldd	r31, Y+3	; 0x03
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <Ext_Interrupt0_Set_Handler>
    13fa:	10 c0       	rjmp	.+32     	; 0x141c <Ext_Interrupt_Tx_Set_Handler+0x7c>
			break;
		case INTERRUPT_EXTERNAL_INT1:
			Ext_Interrupt1_Set_Handler(Interrupt_Cnfg_obj->INTERRUPT_HANDLER);
    13fc:	ea 81       	ldd	r30, Y+2	; 0x02
    13fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1400:	80 81       	ld	r24, Z
    1402:	91 81       	ldd	r25, Z+1	; 0x01
    1404:	0e 94 92 09 	call	0x1324	; 0x1324 <Ext_Interrupt1_Set_Handler>
    1408:	09 c0       	rjmp	.+18     	; 0x141c <Ext_Interrupt_Tx_Set_Handler+0x7c>
			break;
		case INTERRUPT_EXTERNAL_INT2:
			Ext_Interrupt2_Set_Handler(Interrupt_Cnfg_obj->INTERRUPT_HANDLER);
    140a:	ea 81       	ldd	r30, Y+2	; 0x02
    140c:	fb 81       	ldd	r31, Y+3	; 0x03
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	0e 94 b1 09 	call	0x1362	; 0x1362 <Ext_Interrupt2_Set_Handler>
    1416:	02 c0       	rjmp	.+4      	; 0x141c <Ext_Interrupt_Tx_Set_Handler+0x7c>
			break;
		default :
			ret = E_NOK;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		ret = E_OK;
    141c:	19 82       	std	Y+1, r1	; 0x01
	}
	return ret;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <__vector_1>:

void __vector_1 (void) __attribute__ ((signal)) ;
void __vector_1 (void)
{
    1430:	1f 92       	push	r1
    1432:	0f 92       	push	r0
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	0f 92       	push	r0
    1438:	11 24       	eor	r1, r1
    143a:	2f 93       	push	r18
    143c:	3f 93       	push	r19
    143e:	4f 93       	push	r20
    1440:	5f 93       	push	r21
    1442:	6f 93       	push	r22
    1444:	7f 93       	push	r23
    1446:	8f 93       	push	r24
    1448:	9f 93       	push	r25
    144a:	af 93       	push	r26
    144c:	bf 93       	push	r27
    144e:	ef 93       	push	r30
    1450:	ff 93       	push	r31
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	Ext_Interrupt0_Handler();
    145a:	e0 91 cd 00 	lds	r30, 0x00CD
    145e:	f0 91 ce 00 	lds	r31, 0x00CE
    1462:	09 95       	icall
	INTERRUPT0_CLEAR_FLAGE();
    1464:	ea e5       	ldi	r30, 0x5A	; 90
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 64       	ori	r24, 0x40	; 64
    146c:	80 83       	st	Z, r24
}
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	ff 91       	pop	r31
    1474:	ef 91       	pop	r30
    1476:	bf 91       	pop	r27
    1478:	af 91       	pop	r26
    147a:	9f 91       	pop	r25
    147c:	8f 91       	pop	r24
    147e:	7f 91       	pop	r23
    1480:	6f 91       	pop	r22
    1482:	5f 91       	pop	r21
    1484:	4f 91       	pop	r20
    1486:	3f 91       	pop	r19
    1488:	2f 91       	pop	r18
    148a:	0f 90       	pop	r0
    148c:	0f be       	out	0x3f, r0	; 63
    148e:	0f 90       	pop	r0
    1490:	1f 90       	pop	r1
    1492:	18 95       	reti

00001494 <__vector_2>:

void __vector_2 (void) __attribute__ ((signal)) ;
void __vector_2 (void)
{
    1494:	1f 92       	push	r1
    1496:	0f 92       	push	r0
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	0f 92       	push	r0
    149c:	11 24       	eor	r1, r1
    149e:	2f 93       	push	r18
    14a0:	3f 93       	push	r19
    14a2:	4f 93       	push	r20
    14a4:	5f 93       	push	r21
    14a6:	6f 93       	push	r22
    14a8:	7f 93       	push	r23
    14aa:	8f 93       	push	r24
    14ac:	9f 93       	push	r25
    14ae:	af 93       	push	r26
    14b0:	bf 93       	push	r27
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
	Ext_Interrupt1_Handler();
    14be:	e0 91 cf 00 	lds	r30, 0x00CF
    14c2:	f0 91 d0 00 	lds	r31, 0x00D0
    14c6:	09 95       	icall
	INTERRUPT1_CLEAR_FLAGE();
    14c8:	ea e5       	ldi	r30, 0x5A	; 90
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	80 68       	ori	r24, 0x80	; 128
    14d0:	80 83       	st	Z, r24

}
    14d2:	cf 91       	pop	r28
    14d4:	df 91       	pop	r29
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	bf 91       	pop	r27
    14dc:	af 91       	pop	r26
    14de:	9f 91       	pop	r25
    14e0:	8f 91       	pop	r24
    14e2:	7f 91       	pop	r23
    14e4:	6f 91       	pop	r22
    14e6:	5f 91       	pop	r21
    14e8:	4f 91       	pop	r20
    14ea:	3f 91       	pop	r19
    14ec:	2f 91       	pop	r18
    14ee:	0f 90       	pop	r0
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	0f 90       	pop	r0
    14f4:	1f 90       	pop	r1
    14f6:	18 95       	reti

000014f8 <__vector_3>:
void __vector_3 (void) __attribute__ ((signal)) ;
void __vector_3 (void)
{
    14f8:	1f 92       	push	r1
    14fa:	0f 92       	push	r0
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	0f 92       	push	r0
    1500:	11 24       	eor	r1, r1
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	ef 93       	push	r30
    1518:	ff 93       	push	r31
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
	Ext_Interrupt2_Handler();
    1522:	e0 91 d1 00 	lds	r30, 0x00D1
    1526:	f0 91 d2 00 	lds	r31, 0x00D2
    152a:	09 95       	icall
	INTERRUPT2_CLEAR_FLAGE();
    152c:	ea e5       	ldi	r30, 0x5A	; 90
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	80 83       	st	Z, r24
}
    1536:	cf 91       	pop	r28
    1538:	df 91       	pop	r29
    153a:	ff 91       	pop	r31
    153c:	ef 91       	pop	r30
    153e:	bf 91       	pop	r27
    1540:	af 91       	pop	r26
    1542:	9f 91       	pop	r25
    1544:	8f 91       	pop	r24
    1546:	7f 91       	pop	r23
    1548:	6f 91       	pop	r22
    154a:	5f 91       	pop	r21
    154c:	4f 91       	pop	r20
    154e:	3f 91       	pop	r19
    1550:	2f 91       	pop	r18
    1552:	0f 90       	pop	r0
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <gpio_pin_direction_initialize>:

/*****************  INCLUDES   *******************************/
#include "../Mcal_Maneger/Mcal_Maneger.h"
#if   GPIO_MODULE_ACTIVE == ENABLE
#include"Mcal_Gpio_Interface.h"
Std_ReturnType gpio_pin_direction_initialize(const Gpio_pin_config_t * pin_cnfg, direction_t dir) {
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <gpio_pin_direction_initialize+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <gpio_pin_direction_initialize+0x8>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <gpio_pin_direction_initialize+0xa>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9b 83       	std	Y+3, r25	; 0x03
    156c:	8a 83       	std	Y+2, r24	; 0x02
    156e:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_NOK;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	89 83       	std	Y+1, r24	; 0x01
	if (NULL == pin_cnfg) {
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	19 f4       	brne	.+6      	; 0x1582 <gpio_pin_direction_initialize+0x26>
		ret = E_NOK;
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	89 83       	std	Y+1, r24	; 0x01
    1580:	54 c0       	rjmp	.+168    	; 0x162a <gpio_pin_direction_initialize+0xce>
	} else {
		switch (dir) {
    1582:	8c 81       	ldd	r24, Y+4	; 0x04
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	3e 83       	std	Y+6, r19	; 0x06
    158a:	2d 83       	std	Y+5, r18	; 0x05
    158c:	8d 81       	ldd	r24, Y+5	; 0x05
    158e:	9e 81       	ldd	r25, Y+6	; 0x06
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	31 f0       	breq	.+12     	; 0x15a0 <gpio_pin_direction_initialize+0x44>
    1594:	2d 81       	ldd	r18, Y+5	; 0x05
    1596:	3e 81       	ldd	r19, Y+6	; 0x06
    1598:	21 30       	cpi	r18, 0x01	; 1
    159a:	31 05       	cpc	r19, r1
    159c:	11 f1       	breq	.+68     	; 0x15e2 <gpio_pin_direction_initialize+0x86>
    159e:	43 c0       	rjmp	.+134    	; 0x1626 <gpio_pin_direction_initialize+0xca>
		case GPIO_PIN_OUTPOT:
			SET_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
    15a0:	ea 81       	ldd	r30, Y+2	; 0x02
    15a2:	fb 81       	ldd	r31, Y+3	; 0x03
    15a4:	80 81       	ld	r24, Z
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	dc 01       	movw	r26, r24
    15ae:	ea 81       	ldd	r30, Y+2	; 0x02
    15b0:	fb 81       	ldd	r31, Y+3	; 0x03
    15b2:	80 81       	ld	r24, Z
    15b4:	88 2f       	mov	r24, r24
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	fc 01       	movw	r30, r24
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	ea 81       	ldd	r30, Y+2	; 0x02
    15c2:	fb 81       	ldd	r31, Y+3	; 0x03
    15c4:	81 81       	ldd	r24, Z+1	; 0x01
    15c6:	87 70       	andi	r24, 0x07	; 7
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 2e       	mov	r0, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <gpio_pin_direction_initialize+0x7c>
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	0a 94       	dec	r0
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <gpio_pin_direction_initialize+0x78>
    15dc:	84 2b       	or	r24, r20
    15de:	8c 93       	st	X, r24
    15e0:	24 c0       	rjmp	.+72     	; 0x162a <gpio_pin_direction_initialize+0xce>
			break;
		case GPIO_PIN_INPOT:
			CLEAR_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
    15e2:	ea 81       	ldd	r30, Y+2	; 0x02
    15e4:	fb 81       	ldd	r31, Y+3	; 0x03
    15e6:	80 81       	ld	r24, Z
    15e8:	88 2f       	mov	r24, r24
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	dc 01       	movw	r26, r24
    15f0:	ea 81       	ldd	r30, Y+2	; 0x02
    15f2:	fb 81       	ldd	r31, Y+3	; 0x03
    15f4:	80 81       	ld	r24, Z
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	ea 81       	ldd	r30, Y+2	; 0x02
    1604:	fb 81       	ldd	r31, Y+3	; 0x03
    1606:	81 81       	ldd	r24, Z+1	; 0x01
    1608:	87 70       	andi	r24, 0x07	; 7
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <gpio_pin_direction_initialize+0xbe>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <gpio_pin_direction_initialize+0xba>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	02 c0       	rjmp	.+4      	; 0x162a <gpio_pin_direction_initialize+0xce>
			break;

		default:
			ret = E_NOK;
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	89 83       	std	Y+1, r24	; 0x01
		}

	}
	return ret;
    162a:	89 81       	ldd	r24, Y+1	; 0x01
}
    162c:	26 96       	adiw	r28, 0x06	; 6
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <gpio_pin_get_direction_status>:
 *
 * @param pin_cnfg
 * @param logic
 * @return
 */
Std_ReturnType gpio_pin_get_direction_status(const Gpio_pin_config_t * pin_cnfg, logic_t * logic) {
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <gpio_pin_get_direction_status+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <gpio_pin_get_direction_status+0x8>
    1646:	0f 92       	push	r0
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	9b 83       	std	Y+3, r25	; 0x03
    164e:	8a 83       	std	Y+2, r24	; 0x02
    1650:	7d 83       	std	Y+5, r23	; 0x05
    1652:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    1654:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == pin_cnfg) || (NULL == logic)) {
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	21 f0       	breq	.+8      	; 0x1666 <gpio_pin_get_direction_status+0x28>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	19 f4       	brne	.+6      	; 0x166c <gpio_pin_get_direction_status+0x2e>
		ret = E_NOK;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	89 83       	std	Y+1, r24	; 0x01
    166a:	1b c0       	rjmp	.+54     	; 0x16a2 <gpio_pin_get_direction_status+0x64>
	} else {
		*logic = READ_BIT(ACCESS_REG((pin_cnfg->port) + 1), pin_cnfg->pin);
    166c:	ea 81       	ldd	r30, Y+2	; 0x02
    166e:	fb 81       	ldd	r31, Y+3	; 0x03
    1670:	80 81       	ld	r24, Z
    1672:	88 2f       	mov	r24, r24
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	01 96       	adiw	r24, 0x01	; 1
    1678:	fc 01       	movw	r30, r24
    167a:	80 81       	ld	r24, Z
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	ea 81       	ldd	r30, Y+2	; 0x02
    1682:	fb 81       	ldd	r31, Y+3	; 0x03
    1684:	81 81       	ldd	r24, Z+1	; 0x01
    1686:	87 70       	andi	r24, 0x07	; 7
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a9 01       	movw	r20, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <gpio_pin_get_direction_status+0x56>
    1690:	55 95       	asr	r21
    1692:	47 95       	ror	r20
    1694:	8a 95       	dec	r24
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <gpio_pin_get_direction_status+0x52>
    1698:	ca 01       	movw	r24, r20
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	ec 81       	ldd	r30, Y+4	; 0x04
    169e:	fd 81       	ldd	r31, Y+5	; 0x05
    16a0:	80 83       	st	Z, r24

	}
	return ret;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <gpio_pin_write_logic>:
 *
 * @param pin_cnfg
 * @param logic
 * @return
 */
Std_ReturnType gpio_pin_write_logic(const Gpio_pin_config_t * pin_cnfg, logic_t logic) {
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	00 d0       	rcall	.+0      	; 0x16ba <gpio_pin_write_logic+0x6>
    16ba:	00 d0       	rcall	.+0      	; 0x16bc <gpio_pin_write_logic+0x8>
    16bc:	00 d0       	rcall	.+0      	; 0x16be <gpio_pin_write_logic+0xa>
    16be:	cd b7       	in	r28, 0x3d	; 61
    16c0:	de b7       	in	r29, 0x3e	; 62
    16c2:	9b 83       	std	Y+3, r25	; 0x03
    16c4:	8a 83       	std	Y+2, r24	; 0x02
    16c6:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    16c8:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	19 f4       	brne	.+6      	; 0x16d8 <gpio_pin_write_logic+0x24>
		ret = E_NOK;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	54 c0       	rjmp	.+168    	; 0x1780 <gpio_pin_write_logic+0xcc>
	} else {
		switch (logic) {
    16d8:	8c 81       	ldd	r24, Y+4	; 0x04
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3e 83       	std	Y+6, r19	; 0x06
    16e0:	2d 83       	std	Y+5, r18	; 0x05
    16e2:	8d 81       	ldd	r24, Y+5	; 0x05
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	00 97       	sbiw	r24, 0x00	; 0
    16e8:	39 f1       	breq	.+78     	; 0x1738 <gpio_pin_write_logic+0x84>
    16ea:	2d 81       	ldd	r18, Y+5	; 0x05
    16ec:	3e 81       	ldd	r19, Y+6	; 0x06
    16ee:	21 30       	cpi	r18, 0x01	; 1
    16f0:	31 05       	cpc	r19, r1
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <gpio_pin_write_logic+0x42>
    16f4:	43 c0       	rjmp	.+134    	; 0x177c <gpio_pin_write_logic+0xc8>
		case HIGH:
			SET_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
    16f6:	ea 81       	ldd	r30, Y+2	; 0x02
    16f8:	fb 81       	ldd	r31, Y+3	; 0x03
    16fa:	80 81       	ld	r24, Z
    16fc:	88 2f       	mov	r24, r24
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 96       	adiw	r24, 0x02	; 2
    1702:	dc 01       	movw	r26, r24
    1704:	ea 81       	ldd	r30, Y+2	; 0x02
    1706:	fb 81       	ldd	r31, Y+3	; 0x03
    1708:	80 81       	ld	r24, Z
    170a:	88 2f       	mov	r24, r24
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 96       	adiw	r24, 0x02	; 2
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	ea 81       	ldd	r30, Y+2	; 0x02
    1718:	fb 81       	ldd	r31, Y+3	; 0x03
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	87 70       	andi	r24, 0x07	; 7
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	02 2e       	mov	r0, r18
    1728:	02 c0       	rjmp	.+4      	; 0x172e <gpio_pin_write_logic+0x7a>
    172a:	88 0f       	add	r24, r24
    172c:	99 1f       	adc	r25, r25
    172e:	0a 94       	dec	r0
    1730:	e2 f7       	brpl	.-8      	; 0x172a <gpio_pin_write_logic+0x76>
    1732:	84 2b       	or	r24, r20
    1734:	8c 93       	st	X, r24
    1736:	24 c0       	rjmp	.+72     	; 0x1780 <gpio_pin_write_logic+0xcc>
			break;
		case LOW:
			CLEAR_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
    1738:	ea 81       	ldd	r30, Y+2	; 0x02
    173a:	fb 81       	ldd	r31, Y+3	; 0x03
    173c:	80 81       	ld	r24, Z
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 96       	adiw	r24, 0x02	; 2
    1744:	dc 01       	movw	r26, r24
    1746:	ea 81       	ldd	r30, Y+2	; 0x02
    1748:	fb 81       	ldd	r31, Y+3	; 0x03
    174a:	80 81       	ld	r24, Z
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 96       	adiw	r24, 0x02	; 2
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	ea 81       	ldd	r30, Y+2	; 0x02
    175a:	fb 81       	ldd	r31, Y+3	; 0x03
    175c:	81 81       	ldd	r24, Z+1	; 0x01
    175e:	87 70       	andi	r24, 0x07	; 7
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <gpio_pin_write_logic+0xbc>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <gpio_pin_write_logic+0xb8>
    1774:	80 95       	com	r24
    1776:	84 23       	and	r24, r20
    1778:	8c 93       	st	X, r24
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <gpio_pin_write_logic+0xcc>
			break;

		default:
			ret = E_NOK;
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return ret;
    1780:	89 81       	ldd	r24, Y+1	; 0x01
}
    1782:	26 96       	adiw	r28, 0x06	; 6
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	de bf       	out	0x3e, r29	; 62
    178a:	0f be       	out	0x3f, r0	; 63
    178c:	cd bf       	out	0x3d, r28	; 61
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <gpio_pin_read>:
 *
 * @param pin_cnfg
 * @param logic
 * @return
 */
Std_ReturnType gpio_pin_read(const Gpio_pin_config_t * pin_cnfg, logic_t * logic) {
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	00 d0       	rcall	.+0      	; 0x179a <gpio_pin_read+0x6>
    179a:	00 d0       	rcall	.+0      	; 0x179c <gpio_pin_read+0x8>
    179c:	0f 92       	push	r0
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	9b 83       	std	Y+3, r25	; 0x03
    17a4:	8a 83       	std	Y+2, r24	; 0x02
    17a6:	7d 83       	std	Y+5, r23	; 0x05
    17a8:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    17aa:	19 82       	std	Y+1, r1	; 0x01
	if ((NULL == pin_cnfg) || (NULL == logic)) {
    17ac:	8a 81       	ldd	r24, Y+2	; 0x02
    17ae:	9b 81       	ldd	r25, Y+3	; 0x03
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	21 f0       	breq	.+8      	; 0x17bc <gpio_pin_read+0x28>
    17b4:	8c 81       	ldd	r24, Y+4	; 0x04
    17b6:	9d 81       	ldd	r25, Y+5	; 0x05
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	19 f4       	brne	.+6      	; 0x17c2 <gpio_pin_read+0x2e>
		ret = E_NOK;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	89 83       	std	Y+1, r24	; 0x01
    17c0:	1a c0       	rjmp	.+52     	; 0x17f6 <gpio_pin_read+0x62>
	} else {
		*logic = READ_BIT(ACCESS_REG(pin_cnfg->port), pin_cnfg->pin);
    17c2:	ea 81       	ldd	r30, Y+2	; 0x02
    17c4:	fb 81       	ldd	r31, Y+3	; 0x03
    17c6:	80 81       	ld	r24, Z
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	fc 01       	movw	r30, r24
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	ea 81       	ldd	r30, Y+2	; 0x02
    17d6:	fb 81       	ldd	r31, Y+3	; 0x03
    17d8:	81 81       	ldd	r24, Z+1	; 0x01
    17da:	87 70       	andi	r24, 0x07	; 7
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <gpio_pin_read+0x54>
    17e4:	55 95       	asr	r21
    17e6:	47 95       	ror	r20
    17e8:	8a 95       	dec	r24
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <gpio_pin_read+0x50>
    17ec:	ca 01       	movw	r24, r20
    17ee:	81 70       	andi	r24, 0x01	; 1
    17f0:	ec 81       	ldd	r30, Y+4	; 0x04
    17f2:	fd 81       	ldd	r31, Y+5	; 0x05
    17f4:	80 83       	st	Z, r24

	}
	return ret;
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	cf 91       	pop	r28
    1804:	df 91       	pop	r29
    1806:	08 95       	ret

00001808 <gpio_pin_toggle>:
/**
 *
 * @param pin_cnfg
 * @return
 */
Std_ReturnType gpio_pin_toggle(const Gpio_pin_config_t * pin_cnfg) {
    1808:	df 93       	push	r29
    180a:	cf 93       	push	r28
    180c:	00 d0       	rcall	.+0      	; 0x180e <gpio_pin_toggle+0x6>
    180e:	0f 92       	push	r0
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	9b 83       	std	Y+3, r25	; 0x03
    1816:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1818:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	9b 81       	ldd	r25, Y+3	; 0x03
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	19 f4       	brne	.+6      	; 0x1828 <gpio_pin_toggle+0x20>
		ret = E_NOK;
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	89 83       	std	Y+1, r24	; 0x01
    1826:	20 c0       	rjmp	.+64     	; 0x1868 <gpio_pin_toggle+0x60>
	} else {
		TOGGLE_BIT(ACCESS_REG((pin_cnfg->port) + 2), pin_cnfg->pin);
    1828:	ea 81       	ldd	r30, Y+2	; 0x02
    182a:	fb 81       	ldd	r31, Y+3	; 0x03
    182c:	80 81       	ld	r24, Z
    182e:	88 2f       	mov	r24, r24
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	dc 01       	movw	r26, r24
    1836:	ea 81       	ldd	r30, Y+2	; 0x02
    1838:	fb 81       	ldd	r31, Y+3	; 0x03
    183a:	80 81       	ld	r24, Z
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 96       	adiw	r24, 0x02	; 2
    1842:	fc 01       	movw	r30, r24
    1844:	80 81       	ld	r24, Z
    1846:	48 2f       	mov	r20, r24
    1848:	ea 81       	ldd	r30, Y+2	; 0x02
    184a:	fb 81       	ldd	r31, Y+3	; 0x03
    184c:	81 81       	ldd	r24, Z+1	; 0x01
    184e:	87 70       	andi	r24, 0x07	; 7
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 2e       	mov	r0, r18
    185a:	02 c0       	rjmp	.+4      	; 0x1860 <gpio_pin_toggle+0x58>
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	0a 94       	dec	r0
    1862:	e2 f7       	brpl	.-8      	; 0x185c <gpio_pin_toggle+0x54>
    1864:	84 27       	eor	r24, r20
    1866:	8c 93       	st	X, r24
	}
	return ret;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
}
    186a:	0f 90       	pop	r0
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <gpio_pin_initialize>:
/**
 *
 * @param pin_cnfg
 * @return
 */
Std_ReturnType gpio_pin_initialize(const Gpio_pin_config_t * pin_cnfg) {
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <gpio_pin_initialize+0x6>
    187c:	0f 92       	push	r0
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	9b 83       	std	Y+3, r25	; 0x03
    1884:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    1886:	19 82       	std	Y+1, r1	; 0x01
	if (NULL == pin_cnfg) {
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	00 97       	sbiw	r24, 0x00	; 0
    188e:	19 f4       	brne	.+6      	; 0x1896 <gpio_pin_initialize+0x20>
		ret = E_NOK;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	89 83       	std	Y+1, r24	; 0x01
    1894:	1b c0       	rjmp	.+54     	; 0x18cc <gpio_pin_initialize+0x56>
	} else {
		ret = gpio_pin_direction_initialize(pin_cnfg, pin_cnfg->direction);
    1896:	ea 81       	ldd	r30, Y+2	; 0x02
    1898:	fb 81       	ldd	r31, Y+3	; 0x03
    189a:	81 81       	ldd	r24, Z+1	; 0x01
    189c:	86 95       	lsr	r24
    189e:	86 95       	lsr	r24
    18a0:	86 95       	lsr	r24
    18a2:	81 70       	andi	r24, 0x01	; 1
    18a4:	28 2f       	mov	r18, r24
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	9b 81       	ldd	r25, Y+3	; 0x03
    18aa:	62 2f       	mov	r22, r18
    18ac:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    18b0:	89 83       	std	Y+1, r24	; 0x01
		ret = gpio_pin_write_logic(pin_cnfg, pin_cnfg->logic);
    18b2:	ea 81       	ldd	r30, Y+2	; 0x02
    18b4:	fb 81       	ldd	r31, Y+3	; 0x03
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	82 95       	swap	r24
    18ba:	8f 70       	andi	r24, 0x0F	; 15
    18bc:	81 70       	andi	r24, 0x01	; 1
    18be:	28 2f       	mov	r18, r24
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	9b 81       	ldd	r25, Y+3	; 0x03
    18c4:	62 2f       	mov	r22, r18
    18c6:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    18ca:	89 83       	std	Y+1, r24	; 0x01

	}
	return ret;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <gpio_port_direction_initialize>:
 *
 * @param port
 * @param direction
 * @return
 */
Std_ReturnType gpio_port_direction_initialize(port_index_t port, direction_t direction) {
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <gpio_port_direction_initialize+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <gpio_port_direction_initialize+0x8>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	8a 83       	std	Y+2, r24	; 0x02
    18ea:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    18ec:	19 82       	std	Y+1, r1	; 0x01
	switch (direction) {
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	3d 83       	std	Y+5, r19	; 0x05
    18f6:	2c 83       	std	Y+4, r18	; 0x04
    18f8:	8c 81       	ldd	r24, Y+4	; 0x04
    18fa:	9d 81       	ldd	r25, Y+5	; 0x05
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	31 f0       	breq	.+12     	; 0x190c <gpio_port_direction_initialize+0x32>
    1900:	2c 81       	ldd	r18, Y+4	; 0x04
    1902:	3d 81       	ldd	r19, Y+5	; 0x05
    1904:	21 30       	cpi	r18, 0x01	; 1
    1906:	31 05       	cpc	r19, r1
    1908:	49 f0       	breq	.+18     	; 0x191c <gpio_port_direction_initialize+0x42>
    190a:	0f c0       	rjmp	.+30     	; 0x192a <gpio_port_direction_initialize+0x50>
	case GPIO_PIN_OUTPOT:
		SET_REG(port+1);
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	fc 01       	movw	r30, r24
    1916:	8f ef       	ldi	r24, 0xFF	; 255
    1918:	80 83       	st	Z, r24
    191a:	09 c0       	rjmp	.+18     	; 0x192e <gpio_port_direction_initialize+0x54>
		break;
	case GPIO_PIN_INPOT:
		CLEAR_REG(port+1);
    191c:	8a 81       	ldd	r24, Y+2	; 0x02
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	fc 01       	movw	r30, r24
    1926:	10 82       	st	Z, r1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <gpio_port_direction_initialize+0x54>
		break;
	default:
		ret = E_NOK;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01

	}
	return ret;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <gpio_port_get_direction_status>:
 * @param port
 * @param direction_status
 * @return
 */
Std_ReturnType gpio_port_get_direction_status(port_index_t port, uint8 *direction_status)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <gpio_port_get_direction_status+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <gpio_port_get_direction_status+0x8>
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	8a 83       	std	Y+2, r24	; 0x02
    194e:	7c 83       	std	Y+4, r23	; 0x04
    1950:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    1952:	19 82       	std	Y+1, r1	; 0x01

	return ret;
    1954:	89 81       	ldd	r24, Y+1	; 0x01
}
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	cf 91       	pop	r28
    1960:	df 91       	pop	r29
    1962:	08 95       	ret

00001964 <gpio_port_write_logic>:
 * @param port
 * @param logic
 * @return
 */
Std_ReturnType gpio_port_write_logic(port_index_t port, logic_t logic)
		{
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	00 d0       	rcall	.+0      	; 0x196a <gpio_port_write_logic+0x6>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	8a 83       	std	Y+2, r24	; 0x02
    1972:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_NOK;
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	89 83       	std	Y+1, r24	; 0x01
	if((port == PORTA) ||(port == PORTB) ||(port == PORTC) ||(port == PORTD)  )
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	89 33       	cpi	r24, 0x39	; 57
    197c:	49 f0       	breq	.+18     	; 0x1990 <gpio_port_write_logic+0x2c>
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	86 33       	cpi	r24, 0x36	; 54
    1982:	31 f0       	breq	.+12     	; 0x1990 <gpio_port_write_logic+0x2c>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	83 33       	cpi	r24, 0x33	; 51
    1988:	19 f0       	breq	.+6      	; 0x1990 <gpio_port_write_logic+0x2c>
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 33       	cpi	r24, 0x30	; 48
    198e:	49 f4       	brne	.+18     	; 0x19a2 <gpio_port_write_logic+0x3e>
		{
			ret = E_NOK;
		}
		else
		{
			ACCESS_REG(port +2) = logic;
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	88 2f       	mov	r24, r24
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 96       	adiw	r24, 0x02	; 2
    1998:	fc 01       	movw	r30, r24
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	80 83       	st	Z, r24

			ret = E_OK;
    199e:	19 82       	std	Y+1, r1	; 0x01
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <gpio_port_write_logic+0x42>
		}

	}
	else
	{
		ret = E_NOK;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	89 83       	std	Y+1, r24	; 0x01
	}

	return ret;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
		}
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <gpio_port_read_logic>:
 * @param port
 * @param logic
 * @return
 */
Std_ReturnType gpio_port_read_logic(port_index_t port, uint8 *logic)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	00 d0       	rcall	.+0      	; 0x19ba <gpio_port_read_logic+0x6>
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <gpio_port_read_logic+0x8>
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	8a 83       	std	Y+2, r24	; 0x02
    19c2:	7c 83       	std	Y+4, r23	; 0x04
    19c4:	6b 83       	std	Y+3, r22	; 0x03
	Std_ReturnType ret = E_OK;
    19c6:	19 82       	std	Y+1, r1	; 0x01

	return ret;
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	0f 90       	pop	r0
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <gpio_port_toggle_logic>:
 *
 * @param port
 * @return
 */
Std_ReturnType gpio_port_toggle_logic(port_index_t port)
{
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <gpio_port_toggle_logic+0x6>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_OK;
    19e4:	19 82       	std	Y+1, r1	; 0x01

	return ret;
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <led_inialize>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_inialize(led_t * led)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <led_inialize+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <led_inialize+0x8>
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	9d 83       	std	Y+5, r25	; 0x05
    1a02:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	19 f4       	brne	.+6      	; 0x1a16 <led_inialize+0x24>
	{
		ret = E_NOK;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	28 c0       	rjmp	.+80     	; 0x1a66 <led_inialize+0x74>
	}
	else
	{
		Gpio_pin_config_t  led_pin ={.port = led->port, .pin = led->pin,
				.direction = GPIO_PIN_OUTPOT, .logic = led->status};
    1a16:	ec 81       	ldd	r30, Y+4	; 0x04
    1a18:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1a:	20 81       	ld	r18, Z
    1a1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a20:	81 81       	ldd	r24, Z+1	; 0x01
    1a22:	38 2f       	mov	r19, r24
    1a24:	37 70       	andi	r19, 0x07	; 7
    1a26:	ec 81       	ldd	r30, Y+4	; 0x04
    1a28:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2a:	81 81       	ldd	r24, Z+1	; 0x01
    1a2c:	98 2f       	mov	r25, r24
    1a2e:	96 95       	lsr	r25
    1a30:	96 95       	lsr	r25
    1a32:	96 95       	lsr	r25
    1a34:	91 70       	andi	r25, 0x01	; 1
    1a36:	2a 83       	std	Y+2, r18	; 0x02
    1a38:	23 2f       	mov	r18, r19
    1a3a:	27 70       	andi	r18, 0x07	; 7
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	88 7f       	andi	r24, 0xF8	; 248
    1a40:	82 2b       	or	r24, r18
    1a42:	8b 83       	std	Y+3, r24	; 0x03
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	87 7f       	andi	r24, 0xF7	; 247
    1a48:	8b 83       	std	Y+3, r24	; 0x03
    1a4a:	89 2f       	mov	r24, r25
    1a4c:	81 70       	andi	r24, 0x01	; 1
    1a4e:	98 2f       	mov	r25, r24
    1a50:	92 95       	swap	r25
    1a52:	90 7f       	andi	r25, 0xF0	; 240
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	8f 7e       	andi	r24, 0xEF	; 239
    1a58:	89 2b       	or	r24, r25
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
		gpio_pin_initialize(&led_pin);
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	02 96       	adiw	r24, 0x02	; 2
    1a60:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
		ret = E_OK;
    1a64:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a68:	0f 90       	pop	r0
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <led_turn_on>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_turn_on(led_t * led)
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <led_turn_on+0x6>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <led_turn_on+0x8>
    1a80:	0f 92       	push	r0
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	9d 83       	std	Y+5, r25	; 0x05
    1a88:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01

	Gpio_pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = HIGH};
    1a8e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a90:	fd 81       	ldd	r31, Y+5	; 0x05
    1a92:	90 81       	ld	r25, Z
    1a94:	ec 81       	ldd	r30, Y+4	; 0x04
    1a96:	fd 81       	ldd	r31, Y+5	; 0x05
    1a98:	81 81       	ldd	r24, Z+1	; 0x01
    1a9a:	87 70       	andi	r24, 0x07	; 7
    1a9c:	1b 82       	std	Y+3, r1	; 0x03
    1a9e:	1a 82       	std	Y+2, r1	; 0x02
    1aa0:	9a 83       	std	Y+2, r25	; 0x02
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	97 70       	andi	r25, 0x07	; 7
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	88 7f       	andi	r24, 0xF8	; 248
    1aaa:	89 2b       	or	r24, r25
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	80 61       	ori	r24, 0x10	; 16
    1ab2:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    1ab4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	19 f4       	brne	.+6      	; 0x1ac2 <led_turn_on+0x4a>
	{
		ret = E_NOK;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	06 c0       	rjmp	.+12     	; 0x1ace <led_turn_on+0x56>
	}
	else
	{
		gpio_pin_write_logic(&loc_pin, HIGH);
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	02 96       	adiw	r24, 0x02	; 2
    1ac6:	61 e0       	ldi	r22, 0x01	; 1
    1ac8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>

		ret = E_OK;
    1acc:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	0f 90       	pop	r0
    1ada:	cf 91       	pop	r28
    1adc:	df 91       	pop	r29
    1ade:	08 95       	ret

00001ae0 <led_turn_off>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_turn_off(led_t * led)
{
    1ae0:	df 93       	push	r29
    1ae2:	cf 93       	push	r28
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <led_turn_off+0x6>
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <led_turn_off+0x8>
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	9d 83       	std	Y+5, r25	; 0x05
    1af0:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	89 83       	std	Y+1, r24	; 0x01

	Gpio_pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = LOW};
    1af6:	ec 81       	ldd	r30, Y+4	; 0x04
    1af8:	fd 81       	ldd	r31, Y+5	; 0x05
    1afa:	90 81       	ld	r25, Z
    1afc:	ec 81       	ldd	r30, Y+4	; 0x04
    1afe:	fd 81       	ldd	r31, Y+5	; 0x05
    1b00:	81 81       	ldd	r24, Z+1	; 0x01
    1b02:	87 70       	andi	r24, 0x07	; 7
    1b04:	1b 82       	std	Y+3, r1	; 0x03
    1b06:	1a 82       	std	Y+2, r1	; 0x02
    1b08:	9a 83       	std	Y+2, r25	; 0x02
    1b0a:	98 2f       	mov	r25, r24
    1b0c:	97 70       	andi	r25, 0x07	; 7
    1b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b10:	88 7f       	andi	r24, 0xF8	; 248
    1b12:	89 2b       	or	r24, r25
    1b14:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    1b16:	8c 81       	ldd	r24, Y+4	; 0x04
    1b18:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	19 f4       	brne	.+6      	; 0x1b24 <led_turn_off+0x44>
	{
		ret = E_NOK;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	06 c0       	rjmp	.+12     	; 0x1b30 <led_turn_off+0x50>
	}
	else
	{
		gpio_pin_write_logic(&loc_pin, LOW);
    1b24:	ce 01       	movw	r24, r28
    1b26:	02 96       	adiw	r24, 0x02	; 2
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>

		ret = E_OK;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <led_toggle>:
 *
 * @param led
 * @return
 */
Std_ReturnType led_toggle(led_t * led)
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	00 d0       	rcall	.+0      	; 0x1b48 <led_toggle+0x6>
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <led_toggle+0x8>
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	9d 83       	std	Y+5, r25	; 0x05
    1b52:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	89 83       	std	Y+1, r24	; 0x01

	Gpio_pin_config_t  loc_pin = {.port = led->port,
			.pin = led->pin, .logic = LOW};
    1b58:	ec 81       	ldd	r30, Y+4	; 0x04
    1b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1b5c:	90 81       	ld	r25, Z
    1b5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1b60:	fd 81       	ldd	r31, Y+5	; 0x05
    1b62:	81 81       	ldd	r24, Z+1	; 0x01
    1b64:	87 70       	andi	r24, 0x07	; 7
    1b66:	1b 82       	std	Y+3, r1	; 0x03
    1b68:	1a 82       	std	Y+2, r1	; 0x02
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	98 2f       	mov	r25, r24
    1b6e:	97 70       	andi	r25, 0x07	; 7
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	88 7f       	andi	r24, 0xF8	; 248
    1b74:	89 2b       	or	r24, r25
    1b76:	8b 83       	std	Y+3, r24	; 0x03
	if(NULL == led)
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	00 97       	sbiw	r24, 0x00	; 0
    1b7e:	19 f4       	brne	.+6      	; 0x1b86 <led_toggle+0x44>
	{
		ret = E_NOK;
    1b80:	81 e0       	ldi	r24, 0x01	; 1
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	05 c0       	rjmp	.+10     	; 0x1b90 <led_toggle+0x4e>
	}
	else
	{
		gpio_pin_toggle(&loc_pin);
    1b86:	ce 01       	movw	r24, r28
    1b88:	02 96       	adiw	r24, 0x02	; 2
    1b8a:	0e 94 04 0c 	call	0x1808	; 0x1808 <gpio_pin_toggle>

		ret = E_OK;
    1b8e:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1b90:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <led_blinking>:

Std_ReturnType led_blinking(led_t * led)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	62 97       	sbiw	r28, 0x12	; 18
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	f8 94       	cli
    1bb0:	de bf       	out	0x3e, r29	; 62
    1bb2:	0f be       	out	0x3f, r0	; 63
    1bb4:	cd bf       	out	0x3d, r28	; 61
    1bb6:	9a 8b       	std	Y+18, r25	; 0x12
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
	Std_ReturnType ret = E_NOK;
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	88 8b       	std	Y+16, r24	; 0x10
	uint8 Loc_Counter = ZERO_INIT;
    1bbe:	1f 86       	std	Y+15, r1	; 0x0f
	if(NULL == led)
    1bc0:	89 89       	ldd	r24, Y+17	; 0x11
    1bc2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	19 f4       	brne	.+6      	; 0x1bce <led_blinking+0x2c>
	{
		ret = E_NOK;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	88 8b       	std	Y+16, r24	; 0x10
    1bcc:	80 c0       	rjmp	.+256    	; 0x1cce <led_blinking+0x12c>
	}
	else
	{
		for(Loc_Counter = 0; Loc_Counter < 20; ++Loc_Counter)
    1bce:	1f 86       	std	Y+15, r1	; 0x0f
    1bd0:	79 c0       	rjmp	.+242    	; 0x1cc4 <led_blinking+0x122>
		{
			gpio_pin_toggle(led);
    1bd2:	89 89       	ldd	r24, Y+17	; 0x11
    1bd4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bd6:	0e 94 04 0c 	call	0x1808	; 0x1808 <gpio_pin_toggle>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a8 e4       	ldi	r26, 0x48	; 72
    1be0:	b2 e4       	ldi	r27, 0x42	; 66
    1be2:	8b 87       	std	Y+11, r24	; 0x0b
    1be4:	9c 87       	std	Y+12, r25	; 0x0c
    1be6:	ad 87       	std	Y+13, r26	; 0x0d
    1be8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	4a e7       	ldi	r20, 0x7A	; 122
    1bf8:	53 e4       	ldi	r21, 0x43	; 67
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8f 83       	std	Y+7, r24	; 0x07
    1c04:	98 87       	std	Y+8, r25	; 0x08
    1c06:	a9 87       	std	Y+9, r26	; 0x09
    1c08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <led_blinking+0x8a>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9e 83       	std	Y+6, r25	; 0x06
    1c28:	8d 83       	std	Y+5, r24	; 0x05
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <led_blinking+0x108>
	else if (__tmp > 65535)
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <led_blinking+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <led_blinking+0xea>
    1c6e:	89 e1       	ldi	r24, 0x19	; 25
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9c 83       	std	Y+4, r25	; 0x04
    1c74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <led_blinking+0xd8>
    1c7e:	9c 83       	std	Y+4, r25	; 0x04
    1c80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <led_blinking+0xcc>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <led_blinking+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6f 81       	ldd	r22, Y+7	; 0x07
    1c98:	78 85       	ldd	r23, Y+8	; 0x08
    1c9a:	89 85       	ldd	r24, Y+9	; 0x09
    1c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9e 83       	std	Y+6, r25	; 0x06
    1ca8:	8d 83       	std	Y+5, r24	; 0x05
    1caa:	8d 81       	ldd	r24, Y+5	; 0x05
    1cac:	9e 81       	ldd	r25, Y+6	; 0x06
    1cae:	9a 83       	std	Y+2, r25	; 0x02
    1cb0:	89 83       	std	Y+1, r24	; 0x01
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <led_blinking+0x114>
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	{
		ret = E_NOK;
	}
	else
	{
		for(Loc_Counter = 0; Loc_Counter < 20; ++Loc_Counter)
    1cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc0:	8f 5f       	subi	r24, 0xFF	; 255
    1cc2:	8f 87       	std	Y+15, r24	; 0x0f
    1cc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc6:	84 31       	cpi	r24, 0x14	; 20
    1cc8:	08 f4       	brcc	.+2      	; 0x1ccc <led_blinking+0x12a>
    1cca:	83 cf       	rjmp	.-250    	; 0x1bd2 <led_blinking+0x30>
		{
			gpio_pin_toggle(led);
			Delay_ms(50);
		}
		ret = E_OK;
    1ccc:	18 8a       	std	Y+16, r1	; 0x10
	}

	return ret;
    1cce:	88 89       	ldd	r24, Y+16	; 0x10
}
    1cd0:	62 96       	adiw	r28, 0x12	; 18
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <led_Toggle>:

Std_ReturnType led_Toggle(led_t * led)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <led_Toggle+0x6>
    1ce8:	0f 92       	push	r0
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	9b 83       	std	Y+3, r25	; 0x03
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOK;
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == led)
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	19 f4       	brne	.+6      	; 0x1d04 <led_Toggle+0x22>
	{
		ret = E_NOK;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	89 83       	std	Y+1, r24	; 0x01
    1d02:	05 c0       	rjmp	.+10     	; 0x1d0e <led_Toggle+0x2c>
	}
	else
	{
		gpio_pin_toggle(led);
    1d04:	8a 81       	ldd	r24, Y+2	; 0x02
    1d06:	9b 81       	ldd	r25, Y+3	; 0x03
    1d08:	0e 94 04 0c 	call	0x1808	; 0x1808 <gpio_pin_toggle>

		ret = E_OK;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
	}

	return ret;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	0f 90       	pop	r0
    1d12:	0f 90       	pop	r0
    1d14:	0f 90       	pop	r0
    1d16:	cf 91       	pop	r28
    1d18:	df 91       	pop	r29
    1d1a:	08 95       	ret

00001d1c <Keypad_Initialize>:
 * GLOBAL FUNCTIONS
 ************************************/


Std_ReturnType Keypad_Initialize( Kypad_cnfg_t * keypad_obj)
{
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <Keypad_Initialize+0x6>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <Keypad_Initialize+0x8>
    1d24:	0f 92       	push	r0
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	9d 83       	std	Y+5, r25	; 0x05
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
	Std_ReturnType ret = E_NOK;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	8b 83       	std	Y+3, r24	; 0x03
	uint8 Loc_Row_counter = ZERO_INIT, Loc_Col_counter = ZERO_INIT;
    1d32:	1a 82       	std	Y+2, r1	; 0x02
    1d34:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == keypad_obj)
    1d36:	8c 81       	ldd	r24, Y+4	; 0x04
    1d38:	9d 81       	ldd	r25, Y+5	; 0x05
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	19 f4       	brne	.+6      	; 0x1d44 <Keypad_Initialize+0x28>
	{
		ret = E_NOK;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	8b 83       	std	Y+3, r24	; 0x03
    1d42:	49 c0       	rjmp	.+146    	; 0x1dd6 <Keypad_Initialize+0xba>
	}
	else
	{
		for(Loc_Row_counter = 0; Loc_Row_counter < KEYPAD_ROW; ++Loc_Row_counter)
    1d44:	1a 82       	std	Y+2, r1	; 0x02
    1d46:	2b c0       	rjmp	.+86     	; 0x1d9e <Keypad_Initialize+0x82>
		{
			keypad_obj->Row[Loc_Row_counter].logic = LOW;
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	88 2f       	mov	r24, r24
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1d50:	3d 81       	ldd	r19, Y+5	; 0x05
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	31 96       	adiw	r30, 0x01	; 1
    1d5e:	80 81       	ld	r24, Z
    1d60:	8f 7e       	andi	r24, 0xEF	; 239
    1d62:	80 83       	st	Z, r24
			keypad_obj->Row[Loc_Row_counter].direction = GPIO_PIN_OUTPOT;
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	88 2f       	mov	r24, r24
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	82 0f       	add	r24, r18
    1d74:	93 1f       	adc	r25, r19
    1d76:	fc 01       	movw	r30, r24
    1d78:	31 96       	adiw	r30, 0x01	; 1
    1d7a:	80 81       	ld	r24, Z
    1d7c:	87 7f       	andi	r24, 0xF7	; 247
    1d7e:	80 83       	st	Z, r24
			ret = gpio_pin_initialize(&(keypad_obj->Row[Loc_Row_counter]));
    1d80:	2c 81       	ldd	r18, Y+4	; 0x04
    1d82:	3d 81       	ldd	r19, Y+5	; 0x05
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	88 2f       	mov	r24, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	82 0f       	add	r24, r18
    1d90:	93 1f       	adc	r25, r19
    1d92:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    1d96:	8b 83       	std	Y+3, r24	; 0x03
	{
		ret = E_NOK;
	}
	else
	{
		for(Loc_Row_counter = 0; Loc_Row_counter < KEYPAD_ROW; ++Loc_Row_counter)
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	8f 5f       	subi	r24, 0xFF	; 255
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
    1d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1da0:	84 30       	cpi	r24, 0x04	; 4
    1da2:	90 f2       	brcs	.-92     	; 0x1d48 <Keypad_Initialize+0x2c>
		{
			keypad_obj->Row[Loc_Row_counter].logic = LOW;
			keypad_obj->Row[Loc_Row_counter].direction = GPIO_PIN_OUTPOT;
			ret = gpio_pin_initialize(&(keypad_obj->Row[Loc_Row_counter]));
		}
		for(Loc_Col_counter = 0; Loc_Col_counter < KEYPAD_COL; ++Loc_Col_counter)
    1da4:	19 82       	std	Y+1, r1	; 0x01
    1da6:	13 c0       	rjmp	.+38     	; 0x1dce <Keypad_Initialize+0xb2>
		{
			ret = gpio_pin_direction_initialize(&(keypad_obj->Col[Loc_Col_counter]), GPIO_PIN_INPOT);
    1da8:	8c 81       	ldd	r24, Y+4	; 0x04
    1daa:	9d 81       	ldd	r25, Y+5	; 0x05
    1dac:	9c 01       	movw	r18, r24
    1dae:	28 5f       	subi	r18, 0xF8	; 248
    1db0:	3f 4f       	sbci	r19, 0xFF	; 255
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	82 0f       	add	r24, r18
    1dbe:	93 1f       	adc	r25, r19
    1dc0:	61 e0       	ldi	r22, 0x01	; 1
    1dc2:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    1dc6:	8b 83       	std	Y+3, r24	; 0x03
		{
			keypad_obj->Row[Loc_Row_counter].logic = LOW;
			keypad_obj->Row[Loc_Row_counter].direction = GPIO_PIN_OUTPOT;
			ret = gpio_pin_initialize(&(keypad_obj->Row[Loc_Row_counter]));
		}
		for(Loc_Col_counter = 0; Loc_Col_counter < KEYPAD_COL; ++Loc_Col_counter)
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	8f 5f       	subi	r24, 0xFF	; 255
    1dcc:	89 83       	std	Y+1, r24	; 0x01
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	84 30       	cpi	r24, 0x04	; 4
    1dd2:	50 f3       	brcs	.-44     	; 0x1da8 <Keypad_Initialize+0x8c>
		{
			ret = gpio_pin_direction_initialize(&(keypad_obj->Col[Loc_Col_counter]), GPIO_PIN_INPOT);
		}
		ret = E_OK;
    1dd4:	1b 82       	std	Y+3, r1	; 0x03
	}

	return ret ;
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1dd8:	0f 90       	pop	r0
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <Keypad_Scane>:
Std_ReturnType Keypad_Scane(const Kypad_cnfg_t * keypad_obj, uint8 * value)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	a5 97       	sbiw	r28, 0x25	; 37
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	9b a3       	std	Y+35, r25	; 0x23
    1dfe:	8a a3       	std	Y+34, r24	; 0x22
    1e00:	7d a3       	std	Y+37, r23	; 0x25
    1e02:	6c a3       	std	Y+36, r22	; 0x24
	Std_ReturnType ret = E_NOK;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	88 a3       	std	Y+32, r24	; 0x20
	uint8 Loc_Col_value =ZERO_INIT;
    1e08:	19 a2       	std	Y+33, r1	; 0x21
	uint8 Loc_Row_counter = ZERO_INIT, Loc_Col_counter = ZERO_INIT, Loc_counter = ZERO_INIT;
    1e0a:	1f 8e       	std	Y+31, r1	; 0x1f
    1e0c:	1e 8e       	std	Y+30, r1	; 0x1e
    1e0e:	1d 8e       	std	Y+29, r1	; 0x1d
	if(NULL == keypad_obj)
    1e10:	8a a1       	ldd	r24, Y+34	; 0x22
    1e12:	9b a1       	ldd	r25, Y+35	; 0x23
    1e14:	00 97       	sbiw	r24, 0x00	; 0
    1e16:	19 f4       	brne	.+6      	; 0x1e1e <Keypad_Scane+0x36>
	{
		ret = E_NOK;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	88 a3       	std	Y+32, r24	; 0x20
    1e1c:	45 c1       	rjmp	.+650    	; 0x20a8 <Keypad_Scane+0x2c0>
	}
	else
	{
		for(Loc_Row_counter = 0; Loc_Row_counter < KEYPAD_ROW; ++Loc_Row_counter)
    1e1e:	1f 8e       	std	Y+31, r1	; 0x1f
    1e20:	3e c1       	rjmp	.+636    	; 0x209e <Keypad_Scane+0x2b6>
		{
			for(Loc_counter = 0; Loc_counter < KEYPAD_ROW; ++Loc_counter)
    1e22:	1d 8e       	std	Y+29, r1	; 0x1d
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <Keypad_Scane+0x5c>
			{
				gpio_pin_write_logic(&(keypad_obj->Row[Loc_counter]), LOW);
    1e26:	2a a1       	ldd	r18, Y+34	; 0x22
    1e28:	3b a1       	ldd	r19, Y+35	; 0x23
    1e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e2c:	88 2f       	mov	r24, r24
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	82 0f       	add	r24, r18
    1e36:	93 1f       	adc	r25, r19
    1e38:	60 e0       	ldi	r22, 0x00	; 0
    1e3a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
	}
	else
	{
		for(Loc_Row_counter = 0; Loc_Row_counter < KEYPAD_ROW; ++Loc_Row_counter)
		{
			for(Loc_counter = 0; Loc_counter < KEYPAD_ROW; ++Loc_counter)
    1e3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e40:	8f 5f       	subi	r24, 0xFF	; 255
    1e42:	8d 8f       	std	Y+29, r24	; 0x1d
    1e44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e46:	84 30       	cpi	r24, 0x04	; 4
    1e48:	70 f3       	brcs	.-36     	; 0x1e26 <Keypad_Scane+0x3e>
			{
				gpio_pin_write_logic(&(keypad_obj->Row[Loc_counter]), LOW);
			}
			gpio_pin_write_logic(&(keypad_obj->Row[Loc_Row_counter]), HIGH);
    1e4a:	2a a1       	ldd	r18, Y+34	; 0x22
    1e4c:	3b a1       	ldd	r19, Y+35	; 0x23
    1e4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	88 0f       	add	r24, r24
    1e56:	99 1f       	adc	r25, r25
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e2       	ldi	r26, 0x20	; 32
    1e68:	b1 e4       	ldi	r27, 0x41	; 65
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	53 e4       	ldi	r21, 0x43	; 67
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <Keypad_Scane+0xcc>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <Keypad_Scane+0x14a>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <Keypad_Scane+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <Keypad_Scane+0x12c>
    1ef6:	89 e1       	ldi	r24, 0x19	; 25
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <Keypad_Scane+0x11a>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <Keypad_Scane+0x10e>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <Keypad_Scane+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <Keypad_Scane+0x156>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
			Delay_ms(10);
			for(Loc_Col_counter = 0; Loc_Col_counter < KEYPAD_COL; ++Loc_Col_counter)
    1f46:	1e 8e       	std	Y+30, r1	; 0x1e
    1f48:	a3 c0       	rjmp	.+326    	; 0x2090 <Keypad_Scane+0x2a8>
			{
				ret = gpio_pin_read(&(keypad_obj->Col[Loc_Col_counter]), &Loc_Col_value);
    1f4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f4e:	9c 01       	movw	r18, r24
    1f50:	28 5f       	subi	r18, 0xF8	; 248
    1f52:	3f 4f       	sbci	r19, 0xFF	; 255
    1f54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f56:	88 2f       	mov	r24, r24
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	82 0f       	add	r24, r18
    1f60:	93 1f       	adc	r25, r19
    1f62:	9e 01       	movw	r18, r28
    1f64:	2f 5d       	subi	r18, 0xDF	; 223
    1f66:	3f 4f       	sbci	r19, 0xFF	; 255
    1f68:	b9 01       	movw	r22, r18
    1f6a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <gpio_pin_read>
    1f6e:	88 a3       	std	Y+32, r24	; 0x20
				if(HIGH == Loc_Col_value)
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	81 30       	cpi	r24, 0x01	; 1
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <Keypad_Scane+0x190>
    1f76:	89 c0       	rjmp	.+274    	; 0x208a <Keypad_Scane+0x2a2>
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e2       	ldi	r26, 0x20	; 32
    1f7e:	b1 e4       	ldi	r27, 0x41	; 65
    1f80:	8b 87       	std	Y+11, r24	; 0x0b
    1f82:	9c 87       	std	Y+12, r25	; 0x0c
    1f84:	ad 87       	std	Y+13, r26	; 0x0d
    1f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a e7       	ldi	r20, 0x7A	; 122
    1f96:	53 e4       	ldi	r21, 0x43	; 67
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8f 83       	std	Y+7, r24	; 0x07
    1fa2:	98 87       	std	Y+8, r25	; 0x08
    1fa4:	a9 87       	std	Y+9, r26	; 0x09
    1fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <Keypad_Scane+0x1e2>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	9e 83       	std	Y+6, r25	; 0x06
    1fc6:	8d 83       	std	Y+5, r24	; 0x05
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <Keypad_Scane+0x260>
	else if (__tmp > 65535)
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <Keypad_Scane+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	9e 83       	std	Y+6, r25	; 0x06
    2008:	8d 83       	std	Y+5, r24	; 0x05
    200a:	0f c0       	rjmp	.+30     	; 0x202a <Keypad_Scane+0x242>
    200c:	89 e1       	ldi	r24, 0x19	; 25
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	8b 83       	std	Y+3, r24	; 0x03
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <Keypad_Scane+0x230>
    201c:	9c 83       	std	Y+4, r25	; 0x04
    201e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8d 81       	ldd	r24, Y+5	; 0x05
    2022:	9e 81       	ldd	r25, Y+6	; 0x06
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	9e 83       	std	Y+6, r25	; 0x06
    2028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8d 81       	ldd	r24, Y+5	; 0x05
    202c:	9e 81       	ldd	r25, Y+6	; 0x06
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <Keypad_Scane+0x224>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <Keypad_Scane+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	6f 81       	ldd	r22, Y+7	; 0x07
    2036:	78 85       	ldd	r23, Y+8	; 0x08
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	9a 83       	std	Y+2, r25	; 0x02
    204e:	89 83       	std	Y+1, r24	; 0x01
    2050:	89 81       	ldd	r24, Y+1	; 0x01
    2052:	9a 81       	ldd	r25, Y+2	; 0x02
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <Keypad_Scane+0x26c>
    2058:	9a 83       	std	Y+2, r25	; 0x02
    205a:	89 83       	std	Y+1, r24	; 0x01
				{
					Delay_ms(10);
					if(HIGH == Loc_Col_value)
    205c:	89 a1       	ldd	r24, Y+33	; 0x21
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	a1 f4       	brne	.+40     	; 0x208a <Keypad_Scane+0x2a2>
					{
						*value = Btn_val [Loc_Row_counter][Loc_Col_counter];
    2062:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2064:	48 2f       	mov	r20, r24
    2066:	50 e0       	ldi	r21, 0x00	; 0
    2068:	8e 8d       	ldd	r24, Y+30	; 0x1e
    206a:	28 2f       	mov	r18, r24
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	ca 01       	movw	r24, r20
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	fc 01       	movw	r30, r24
    207e:	eb 54       	subi	r30, 0x4B	; 75
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	ec a1       	ldd	r30, Y+36	; 0x24
    2086:	fd a1       	ldd	r31, Y+37	; 0x25
    2088:	80 83       	st	Z, r24
			{
				gpio_pin_write_logic(&(keypad_obj->Row[Loc_counter]), LOW);
			}
			gpio_pin_write_logic(&(keypad_obj->Row[Loc_Row_counter]), HIGH);
			Delay_ms(10);
			for(Loc_Col_counter = 0; Loc_Col_counter < KEYPAD_COL; ++Loc_Col_counter)
    208a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	8e 8f       	std	Y+30, r24	; 0x1e
    2090:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	08 f4       	brcc	.+2      	; 0x2098 <Keypad_Scane+0x2b0>
    2096:	59 cf       	rjmp	.-334    	; 0x1f4a <Keypad_Scane+0x162>
	{
		ret = E_NOK;
	}
	else
	{
		for(Loc_Row_counter = 0; Loc_Row_counter < KEYPAD_ROW; ++Loc_Row_counter)
    2098:	8f 8d       	ldd	r24, Y+31	; 0x1f
    209a:	8f 5f       	subi	r24, 0xFF	; 255
    209c:	8f 8f       	std	Y+31, r24	; 0x1f
    209e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20a0:	84 30       	cpi	r24, 0x04	; 4
    20a2:	08 f4       	brcc	.+2      	; 0x20a6 <Keypad_Scane+0x2be>
    20a4:	be ce       	rjmp	.-644    	; 0x1e22 <Keypad_Scane+0x3a>
						*value = Btn_val [Loc_Row_counter][Loc_Col_counter];
					}
				}
			}
		}
		ret = E_OK;
    20a6:	18 a2       	std	Y+32, r1	; 0x20
	}
	return ret ;
    20a8:	88 a1       	ldd	r24, Y+32	; 0x20
}
    20aa:	a5 96       	adiw	r28, 0x25	; 37
    20ac:	0f b6       	in	r0, 0x3f	; 63
    20ae:	f8 94       	cli
    20b0:	de bf       	out	0x3e, r29	; 62
    20b2:	0f be       	out	0x3f, r0	; 63
    20b4:	cd bf       	out	0x3d, r28	; 61
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <Ecu_Init>:
		.lcd_data[1].pin = 4,
		.lcd_data[2].pin = 5,
		.lcd_data[3].pin = 6, };

Std_ReturnType Ecu_Init()
{
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
	Std_ReturnType Ret =E_NOK;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	89 83       	std	Y+1, r24	; 0x01
	lcd_4bit_intialize(&lcd1);
    20ca:	89 ea       	ldi	r24, 0xA9	; 169
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	0e 94 95 10 	call	0x212a	; 0x212a <lcd_4bit_intialize>
	Timer0_Init();
    20d2:	0e 94 22 06 	call	0xc44	; 0xc44 <Timer0_Init>

	return Ret;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    20d8:	0f 90       	pop	r0
    20da:	cf 91       	pop	r28
    20dc:	df 91       	pop	r29
    20de:	08 95       	ret

000020e0 <Print_time_Lcd>:
void Print_time_Lcd(void)
{
    20e0:	df 93       	push	r29
    20e2:	cf 93       	push	r28
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	/*
	lcd_4bit_send_string_pos(&lcd1, 1,1,"00");
	lcd_4bit_send_char_data_pos(&lcd1, 1, 3, ':');
	lcd_4bit_send_string_pos(&lcd1, 1,4,"00");
*/
	Timer0_Calculate_Min_And_Sec(&sec, &minuts);
    20e8:	84 ed       	ldi	r24, 0xD4	; 212
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	23 ed       	ldi	r18, 0xD3	; 211
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	b9 01       	movw	r22, r18
    20f2:	0e 94 94 06 	call	0xd28	; 0xd28 <Timer0_Calculate_Min_And_Sec>
	lcd_4bit_send_char_data_pos(&lcd1, 1, 3, ':');
    20f6:	89 ea       	ldi	r24, 0xA9	; 169
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	61 e0       	ldi	r22, 0x01	; 1
    20fc:	43 e0       	ldi	r20, 0x03	; 3
    20fe:	2a e3       	ldi	r18, 0x3A	; 58
    2100:	0e 94 34 16 	call	0x2c68	; 0x2c68 <lcd_4bit_send_char_data_pos>
	lcd_4bit_send_num_pos(&lcd1, 1,4,sec);
    2104:	20 91 d4 00 	lds	r18, 0x00D4
    2108:	89 ea       	ldi	r24, 0xA9	; 169
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	44 e0       	ldi	r20, 0x04	; 4
    2110:	0e 94 c2 1c 	call	0x3984	; 0x3984 <lcd_4bit_send_num_pos>
	lcd_4bit_send_num_pos(&lcd1, 1,1,minuts);
    2114:	20 91 d3 00 	lds	r18, 0x00D3
    2118:	89 ea       	ldi	r24, 0xA9	; 169
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	61 e0       	ldi	r22, 0x01	; 1
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 c2 1c 	call	0x3984	; 0x3984 <lcd_4bit_send_num_pos>
}
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <lcd_4bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_intialize(const chr_lcd_4bit_t *lcd){
    212a:	0f 93       	push	r16
    212c:	1f 93       	push	r17
    212e:	df 93       	push	r29
    2130:	cf 93       	push	r28
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	c1 5a       	subi	r28, 0xA1	; 161
    2138:	d0 40       	sbci	r29, 0x00	; 0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	f8 94       	cli
    213e:	de bf       	out	0x3e, r29	; 62
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	cd bf       	out	0x3d, r28	; 61
    2144:	fe 01       	movw	r30, r28
    2146:	ef 56       	subi	r30, 0x6F	; 111
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	91 83       	std	Z+1, r25	; 0x01
    214c:	80 83       	st	Z, r24
	Std_ReturnType ret = E_OK;
    214e:	fe 01       	movw	r30, r28
    2150:	ea 5a       	subi	r30, 0xAA	; 170
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	10 82       	st	Z, r1
	uint8 Loc_counter = 0;
    2156:	fe 01       	movw	r30, r28
    2158:	eb 5a       	subi	r30, 0xAB	; 171
    215a:	ff 4f       	sbci	r31, 0xFF	; 255
    215c:	10 82       	st	Z, r1
	uint8 string1[] = {"Lcd inializing....."};
    215e:	ce 01       	movw	r24, r28
    2160:	89 5a       	subi	r24, 0xA9	; 169
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	cd 56       	subi	r28, 0x6D	; 109
    2166:	df 4f       	sbci	r29, 0xFF	; 255
    2168:	99 83       	std	Y+1, r25	; 0x01
    216a:	88 83       	st	Y, r24
    216c:	c3 59       	subi	r28, 0x93	; 147
    216e:	d0 40       	sbci	r29, 0x00	; 0
    2170:	80 e6       	ldi	r24, 0x60	; 96
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	cb 56       	subi	r28, 0x6B	; 107
    2176:	df 4f       	sbci	r29, 0xFF	; 255
    2178:	99 83       	std	Y+1, r25	; 0x01
    217a:	88 83       	st	Y, r24
    217c:	c5 59       	subi	r28, 0x95	; 149
    217e:	d0 40       	sbci	r29, 0x00	; 0
    2180:	94 e1       	ldi	r25, 0x14	; 20
    2182:	c9 56       	subi	r28, 0x69	; 105
    2184:	df 4f       	sbci	r29, 0xFF	; 255
    2186:	98 83       	st	Y, r25
    2188:	c7 59       	subi	r28, 0x97	; 151
    218a:	d0 40       	sbci	r29, 0x00	; 0
    218c:	cb 56       	subi	r28, 0x6B	; 107
    218e:	df 4f       	sbci	r29, 0xFF	; 255
    2190:	e8 81       	ld	r30, Y
    2192:	f9 81       	ldd	r31, Y+1	; 0x01
    2194:	c5 59       	subi	r28, 0x95	; 149
    2196:	d0 40       	sbci	r29, 0x00	; 0
    2198:	00 80       	ld	r0, Z
    219a:	cb 56       	subi	r28, 0x6B	; 107
    219c:	df 4f       	sbci	r29, 0xFF	; 255
    219e:	88 81       	ld	r24, Y
    21a0:	99 81       	ldd	r25, Y+1	; 0x01
    21a2:	c5 59       	subi	r28, 0x95	; 149
    21a4:	d0 40       	sbci	r29, 0x00	; 0
    21a6:	01 96       	adiw	r24, 0x01	; 1
    21a8:	cb 56       	subi	r28, 0x6B	; 107
    21aa:	df 4f       	sbci	r29, 0xFF	; 255
    21ac:	99 83       	std	Y+1, r25	; 0x01
    21ae:	88 83       	st	Y, r24
    21b0:	c5 59       	subi	r28, 0x95	; 149
    21b2:	d0 40       	sbci	r29, 0x00	; 0
    21b4:	cd 56       	subi	r28, 0x6D	; 109
    21b6:	df 4f       	sbci	r29, 0xFF	; 255
    21b8:	e8 81       	ld	r30, Y
    21ba:	f9 81       	ldd	r31, Y+1	; 0x01
    21bc:	c3 59       	subi	r28, 0x93	; 147
    21be:	d0 40       	sbci	r29, 0x00	; 0
    21c0:	00 82       	st	Z, r0
    21c2:	cd 56       	subi	r28, 0x6D	; 109
    21c4:	df 4f       	sbci	r29, 0xFF	; 255
    21c6:	88 81       	ld	r24, Y
    21c8:	99 81       	ldd	r25, Y+1	; 0x01
    21ca:	c3 59       	subi	r28, 0x93	; 147
    21cc:	d0 40       	sbci	r29, 0x00	; 0
    21ce:	01 96       	adiw	r24, 0x01	; 1
    21d0:	cd 56       	subi	r28, 0x6D	; 109
    21d2:	df 4f       	sbci	r29, 0xFF	; 255
    21d4:	99 83       	std	Y+1, r25	; 0x01
    21d6:	88 83       	st	Y, r24
    21d8:	c3 59       	subi	r28, 0x93	; 147
    21da:	d0 40       	sbci	r29, 0x00	; 0
    21dc:	c9 56       	subi	r28, 0x69	; 105
    21de:	df 4f       	sbci	r29, 0xFF	; 255
    21e0:	98 81       	ld	r25, Y
    21e2:	c7 59       	subi	r28, 0x97	; 151
    21e4:	d0 40       	sbci	r29, 0x00	; 0
    21e6:	91 50       	subi	r25, 0x01	; 1
    21e8:	c9 56       	subi	r28, 0x69	; 105
    21ea:	df 4f       	sbci	r29, 0xFF	; 255
    21ec:	98 83       	st	Y, r25
    21ee:	c7 59       	subi	r28, 0x97	; 151
    21f0:	d0 40       	sbci	r29, 0x00	; 0
    21f2:	c9 56       	subi	r28, 0x69	; 105
    21f4:	df 4f       	sbci	r29, 0xFF	; 255
    21f6:	e8 81       	ld	r30, Y
    21f8:	c7 59       	subi	r28, 0x97	; 151
    21fa:	d0 40       	sbci	r29, 0x00	; 0
    21fc:	ee 23       	and	r30, r30
    21fe:	31 f6       	brne	.-116    	; 0x218c <lcd_4bit_intialize+0x62>
	uint8 string2 []= {"Lcd inialized....."};
    2200:	ce 01       	movw	r24, r28
    2202:	85 59       	subi	r24, 0x95	; 149
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	c8 56       	subi	r28, 0x68	; 104
    2208:	df 4f       	sbci	r29, 0xFF	; 255
    220a:	99 83       	std	Y+1, r25	; 0x01
    220c:	88 83       	st	Y, r24
    220e:	c8 59       	subi	r28, 0x98	; 152
    2210:	d0 40       	sbci	r29, 0x00	; 0
    2212:	84 e7       	ldi	r24, 0x74	; 116
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	c6 56       	subi	r28, 0x66	; 102
    2218:	df 4f       	sbci	r29, 0xFF	; 255
    221a:	99 83       	std	Y+1, r25	; 0x01
    221c:	88 83       	st	Y, r24
    221e:	ca 59       	subi	r28, 0x9A	; 154
    2220:	d0 40       	sbci	r29, 0x00	; 0
    2222:	93 e1       	ldi	r25, 0x13	; 19
    2224:	c4 56       	subi	r28, 0x64	; 100
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	98 83       	st	Y, r25
    222a:	cc 59       	subi	r28, 0x9C	; 156
    222c:	d0 40       	sbci	r29, 0x00	; 0
    222e:	c6 56       	subi	r28, 0x66	; 102
    2230:	df 4f       	sbci	r29, 0xFF	; 255
    2232:	e8 81       	ld	r30, Y
    2234:	f9 81       	ldd	r31, Y+1	; 0x01
    2236:	ca 59       	subi	r28, 0x9A	; 154
    2238:	d0 40       	sbci	r29, 0x00	; 0
    223a:	00 80       	ld	r0, Z
    223c:	c6 56       	subi	r28, 0x66	; 102
    223e:	df 4f       	sbci	r29, 0xFF	; 255
    2240:	88 81       	ld	r24, Y
    2242:	99 81       	ldd	r25, Y+1	; 0x01
    2244:	ca 59       	subi	r28, 0x9A	; 154
    2246:	d0 40       	sbci	r29, 0x00	; 0
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	c6 56       	subi	r28, 0x66	; 102
    224c:	df 4f       	sbci	r29, 0xFF	; 255
    224e:	99 83       	std	Y+1, r25	; 0x01
    2250:	88 83       	st	Y, r24
    2252:	ca 59       	subi	r28, 0x9A	; 154
    2254:	d0 40       	sbci	r29, 0x00	; 0
    2256:	c8 56       	subi	r28, 0x68	; 104
    2258:	df 4f       	sbci	r29, 0xFF	; 255
    225a:	e8 81       	ld	r30, Y
    225c:	f9 81       	ldd	r31, Y+1	; 0x01
    225e:	c8 59       	subi	r28, 0x98	; 152
    2260:	d0 40       	sbci	r29, 0x00	; 0
    2262:	00 82       	st	Z, r0
    2264:	c8 56       	subi	r28, 0x68	; 104
    2266:	df 4f       	sbci	r29, 0xFF	; 255
    2268:	88 81       	ld	r24, Y
    226a:	99 81       	ldd	r25, Y+1	; 0x01
    226c:	c8 59       	subi	r28, 0x98	; 152
    226e:	d0 40       	sbci	r29, 0x00	; 0
    2270:	01 96       	adiw	r24, 0x01	; 1
    2272:	c8 56       	subi	r28, 0x68	; 104
    2274:	df 4f       	sbci	r29, 0xFF	; 255
    2276:	99 83       	std	Y+1, r25	; 0x01
    2278:	88 83       	st	Y, r24
    227a:	c8 59       	subi	r28, 0x98	; 152
    227c:	d0 40       	sbci	r29, 0x00	; 0
    227e:	c4 56       	subi	r28, 0x64	; 100
    2280:	df 4f       	sbci	r29, 0xFF	; 255
    2282:	98 81       	ld	r25, Y
    2284:	cc 59       	subi	r28, 0x9C	; 156
    2286:	d0 40       	sbci	r29, 0x00	; 0
    2288:	91 50       	subi	r25, 0x01	; 1
    228a:	c4 56       	subi	r28, 0x64	; 100
    228c:	df 4f       	sbci	r29, 0xFF	; 255
    228e:	98 83       	st	Y, r25
    2290:	cc 59       	subi	r28, 0x9C	; 156
    2292:	d0 40       	sbci	r29, 0x00	; 0
    2294:	c4 56       	subi	r28, 0x64	; 100
    2296:	df 4f       	sbci	r29, 0xFF	; 255
    2298:	e8 81       	ld	r30, Y
    229a:	cc 59       	subi	r28, 0x9C	; 156
    229c:	d0 40       	sbci	r29, 0x00	; 0
    229e:	ee 23       	and	r30, r30
    22a0:	31 f6       	brne	.-116    	; 0x222e <lcd_4bit_intialize+0x104>
	uint8 string3 []= {"Lcd Is Ready......"};
    22a2:	ce 01       	movw	r24, r28
    22a4:	82 58       	subi	r24, 0x82	; 130
    22a6:	9f 4f       	sbci	r25, 0xFF	; 255
    22a8:	c3 56       	subi	r28, 0x63	; 99
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	99 83       	std	Y+1, r25	; 0x01
    22ae:	88 83       	st	Y, r24
    22b0:	cd 59       	subi	r28, 0x9D	; 157
    22b2:	d0 40       	sbci	r29, 0x00	; 0
    22b4:	87 e8       	ldi	r24, 0x87	; 135
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	c1 56       	subi	r28, 0x61	; 97
    22ba:	df 4f       	sbci	r29, 0xFF	; 255
    22bc:	99 83       	std	Y+1, r25	; 0x01
    22be:	88 83       	st	Y, r24
    22c0:	cf 59       	subi	r28, 0x9F	; 159
    22c2:	d0 40       	sbci	r29, 0x00	; 0
    22c4:	93 e1       	ldi	r25, 0x13	; 19
    22c6:	cf 55       	subi	r28, 0x5F	; 95
    22c8:	df 4f       	sbci	r29, 0xFF	; 255
    22ca:	98 83       	st	Y, r25
    22cc:	c1 5a       	subi	r28, 0xA1	; 161
    22ce:	d0 40       	sbci	r29, 0x00	; 0
    22d0:	c1 56       	subi	r28, 0x61	; 97
    22d2:	df 4f       	sbci	r29, 0xFF	; 255
    22d4:	e8 81       	ld	r30, Y
    22d6:	f9 81       	ldd	r31, Y+1	; 0x01
    22d8:	cf 59       	subi	r28, 0x9F	; 159
    22da:	d0 40       	sbci	r29, 0x00	; 0
    22dc:	00 80       	ld	r0, Z
    22de:	c1 56       	subi	r28, 0x61	; 97
    22e0:	df 4f       	sbci	r29, 0xFF	; 255
    22e2:	88 81       	ld	r24, Y
    22e4:	99 81       	ldd	r25, Y+1	; 0x01
    22e6:	cf 59       	subi	r28, 0x9F	; 159
    22e8:	d0 40       	sbci	r29, 0x00	; 0
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	c1 56       	subi	r28, 0x61	; 97
    22ee:	df 4f       	sbci	r29, 0xFF	; 255
    22f0:	99 83       	std	Y+1, r25	; 0x01
    22f2:	88 83       	st	Y, r24
    22f4:	cf 59       	subi	r28, 0x9F	; 159
    22f6:	d0 40       	sbci	r29, 0x00	; 0
    22f8:	c3 56       	subi	r28, 0x63	; 99
    22fa:	df 4f       	sbci	r29, 0xFF	; 255
    22fc:	e8 81       	ld	r30, Y
    22fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2300:	cd 59       	subi	r28, 0x9D	; 157
    2302:	d0 40       	sbci	r29, 0x00	; 0
    2304:	00 82       	st	Z, r0
    2306:	c3 56       	subi	r28, 0x63	; 99
    2308:	df 4f       	sbci	r29, 0xFF	; 255
    230a:	88 81       	ld	r24, Y
    230c:	99 81       	ldd	r25, Y+1	; 0x01
    230e:	cd 59       	subi	r28, 0x9D	; 157
    2310:	d0 40       	sbci	r29, 0x00	; 0
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	c3 56       	subi	r28, 0x63	; 99
    2316:	df 4f       	sbci	r29, 0xFF	; 255
    2318:	99 83       	std	Y+1, r25	; 0x01
    231a:	88 83       	st	Y, r24
    231c:	cd 59       	subi	r28, 0x9D	; 157
    231e:	d0 40       	sbci	r29, 0x00	; 0
    2320:	cf 55       	subi	r28, 0x5F	; 95
    2322:	df 4f       	sbci	r29, 0xFF	; 255
    2324:	98 81       	ld	r25, Y
    2326:	c1 5a       	subi	r28, 0xA1	; 161
    2328:	d0 40       	sbci	r29, 0x00	; 0
    232a:	91 50       	subi	r25, 0x01	; 1
    232c:	cf 55       	subi	r28, 0x5F	; 95
    232e:	df 4f       	sbci	r29, 0xFF	; 255
    2330:	98 83       	st	Y, r25
    2332:	c1 5a       	subi	r28, 0xA1	; 161
    2334:	d0 40       	sbci	r29, 0x00	; 0
    2336:	cf 55       	subi	r28, 0x5F	; 95
    2338:	df 4f       	sbci	r29, 0xFF	; 255
    233a:	e8 81       	ld	r30, Y
    233c:	c1 5a       	subi	r28, 0xA1	; 161
    233e:	d0 40       	sbci	r29, 0x00	; 0
    2340:	ee 23       	and	r30, r30
    2342:	31 f6       	brne	.-116    	; 0x22d0 <lcd_4bit_intialize+0x1a6>
	if(NULL == lcd){
    2344:	fe 01       	movw	r30, r28
    2346:	ef 56       	subi	r30, 0x6F	; 111
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 81       	ld	r24, Z
    234c:	91 81       	ldd	r25, Z+1	; 0x01
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	31 f4       	brne	.+12     	; 0x235e <lcd_4bit_intialize+0x234>
		ret = E_NOK;
    2352:	fe 01       	movw	r30, r28
    2354:	ea 5a       	subi	r30, 0xAA	; 170
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	80 83       	st	Z, r24
    235c:	03 c4       	rjmp	.+2054   	; 0x2b64 <lcd_4bit_intialize+0xa3a>
	}
	else{
		ret = gpio_pin_direction_initialize(&(lcd->lcd_rs), GPIO_PIN_OUTPOT);
    235e:	fe 01       	movw	r30, r28
    2360:	ef 56       	subi	r30, 0x6F	; 111
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	60 e0       	ldi	r22, 0x00	; 0
    236a:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    236e:	fe 01       	movw	r30, r28
    2370:	ea 5a       	subi	r30, 0xAA	; 170
    2372:	ff 4f       	sbci	r31, 0xFF	; 255
    2374:	80 83       	st	Z, r24
		ret = gpio_pin_direction_initialize(&(lcd->lcd_en), GPIO_PIN_OUTPOT);
    2376:	fe 01       	movw	r30, r28
    2378:	ef 56       	subi	r30, 0x6F	; 111
    237a:	ff 4f       	sbci	r31, 0xFF	; 255
    237c:	80 81       	ld	r24, Z
    237e:	91 81       	ldd	r25, Z+1	; 0x01
    2380:	02 96       	adiw	r24, 0x02	; 2
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    2388:	fe 01       	movw	r30, r28
    238a:	ea 5a       	subi	r30, 0xAA	; 170
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 83       	st	Z, r24
		for(Loc_counter = 0; Loc_counter < 4; ++Loc_counter)
    2390:	fe 01       	movw	r30, r28
    2392:	eb 5a       	subi	r30, 0xAB	; 171
    2394:	ff 4f       	sbci	r31, 0xFF	; 255
    2396:	10 82       	st	Z, r1
    2398:	22 c0       	rjmp	.+68     	; 0x23de <lcd_4bit_intialize+0x2b4>
		{
			ret = gpio_pin_direction_initialize(&(lcd->lcd_data[Loc_counter]), GPIO_PIN_OUTPOT);
    239a:	fe 01       	movw	r30, r28
    239c:	ef 56       	subi	r30, 0x6F	; 111
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	91 81       	ldd	r25, Z+1	; 0x01
    23a4:	9c 01       	movw	r18, r24
    23a6:	2c 5f       	subi	r18, 0xFC	; 252
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	eb 5a       	subi	r30, 0xAB	; 171
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	80 81       	ld	r24, Z
    23b2:	88 2f       	mov	r24, r24
    23b4:	90 e0       	ldi	r25, 0x00	; 0
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	82 0f       	add	r24, r18
    23bc:	93 1f       	adc	r25, r19
    23be:	60 e0       	ldi	r22, 0x00	; 0
    23c0:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    23c4:	fe 01       	movw	r30, r28
    23c6:	ea 5a       	subi	r30, 0xAA	; 170
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 83       	st	Z, r24
		ret = E_NOK;
	}
	else{
		ret = gpio_pin_direction_initialize(&(lcd->lcd_rs), GPIO_PIN_OUTPOT);
		ret = gpio_pin_direction_initialize(&(lcd->lcd_en), GPIO_PIN_OUTPOT);
		for(Loc_counter = 0; Loc_counter < 4; ++Loc_counter)
    23cc:	de 01       	movw	r26, r28
    23ce:	ab 5a       	subi	r26, 0xAB	; 171
    23d0:	bf 4f       	sbci	r27, 0xFF	; 255
    23d2:	fe 01       	movw	r30, r28
    23d4:	eb 5a       	subi	r30, 0xAB	; 171
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	80 81       	ld	r24, Z
    23da:	8f 5f       	subi	r24, 0xFF	; 255
    23dc:	8c 93       	st	X, r24
    23de:	fe 01       	movw	r30, r28
    23e0:	eb 5a       	subi	r30, 0xAB	; 171
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	80 81       	ld	r24, Z
    23e6:	84 30       	cpi	r24, 0x04	; 4
    23e8:	c0 f2       	brcs	.-80     	; 0x239a <lcd_4bit_intialize+0x270>
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5a       	subi	r30, 0xAF	; 175
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	a0 ea       	ldi	r26, 0xA0	; 160
    23f6:	b1 e4       	ldi	r27, 0x41	; 65
    23f8:	80 83       	st	Z, r24
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	a2 83       	std	Z+2, r26	; 0x02
    23fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2400:	8e 01       	movw	r16, r28
    2402:	03 5b       	subi	r16, 0xB3	; 179
    2404:	1f 4f       	sbci	r17, 0xFF	; 255
    2406:	fe 01       	movw	r30, r28
    2408:	ef 5a       	subi	r30, 0xAF	; 175
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	60 81       	ld	r22, Z
    240e:	71 81       	ldd	r23, Z+1	; 0x01
    2410:	82 81       	ldd	r24, Z+2	; 0x02
    2412:	93 81       	ldd	r25, Z+3	; 0x03
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a e7       	ldi	r20, 0x7A	; 122
    241a:	53 e4       	ldi	r21, 0x43	; 67
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	80 83       	st	Z, r24
    2428:	91 83       	std	Z+1, r25	; 0x01
    242a:	a2 83       	std	Z+2, r26	; 0x02
    242c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    242e:	fe 01       	movw	r30, r28
    2430:	e3 5b       	subi	r30, 0xB3	; 179
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e8       	ldi	r20, 0x80	; 128
    2442:	5f e3       	ldi	r21, 0x3F	; 63
    2444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2448:	88 23       	and	r24, r24
    244a:	44 f4       	brge	.+16     	; 0x245c <lcd_4bit_intialize+0x332>
		__ticks = 1;
    244c:	fe 01       	movw	r30, r28
    244e:	e5 5b       	subi	r30, 0xB5	; 181
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	91 83       	std	Z+1, r25	; 0x01
    2458:	80 83       	st	Z, r24
    245a:	64 c0       	rjmp	.+200    	; 0x2524 <lcd_4bit_intialize+0x3fa>
	else if (__tmp > 65535)
    245c:	fe 01       	movw	r30, r28
    245e:	e3 5b       	subi	r30, 0xB3	; 179
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	60 81       	ld	r22, Z
    2464:	71 81       	ldd	r23, Z+1	; 0x01
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	3f ef       	ldi	r19, 0xFF	; 255
    246e:	4f e7       	ldi	r20, 0x7F	; 127
    2470:	57 e4       	ldi	r21, 0x47	; 71
    2472:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2476:	18 16       	cp	r1, r24
    2478:	0c f0       	brlt	.+2      	; 0x247c <lcd_4bit_intialize+0x352>
    247a:	43 c0       	rjmp	.+134    	; 0x2502 <lcd_4bit_intialize+0x3d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	fe 01       	movw	r30, r28
    247e:	ef 5a       	subi	r30, 0xAF	; 175
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	8e 01       	movw	r16, r28
    249c:	05 5b       	subi	r16, 0xB5	; 181
    249e:	1f 4f       	sbci	r17, 0xFF	; 255
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	f8 01       	movw	r30, r16
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24
    24b2:	1f c0       	rjmp	.+62     	; 0x24f2 <lcd_4bit_intialize+0x3c8>
    24b4:	fe 01       	movw	r30, r28
    24b6:	e7 5b       	subi	r30, 0xB7	; 183
    24b8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ba:	89 e1       	ldi	r24, 0x19	; 25
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 83       	std	Z+1, r25	; 0x01
    24c0:	80 83       	st	Z, r24
    24c2:	fe 01       	movw	r30, r28
    24c4:	e7 5b       	subi	r30, 0xB7	; 183
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <lcd_4bit_intialize+0x3a2>
    24d0:	fe 01       	movw	r30, r28
    24d2:	e7 5b       	subi	r30, 0xB7	; 183
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	de 01       	movw	r26, r28
    24dc:	a5 5b       	subi	r26, 0xB5	; 181
    24de:	bf 4f       	sbci	r27, 0xFF	; 255
    24e0:	fe 01       	movw	r30, r28
    24e2:	e5 5b       	subi	r30, 0xB5	; 181
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 81       	ld	r24, Z
    24e8:	91 81       	ldd	r25, Z+1	; 0x01
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	11 96       	adiw	r26, 0x01	; 1
    24ee:	9c 93       	st	X, r25
    24f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f2:	fe 01       	movw	r30, r28
    24f4:	e5 5b       	subi	r30, 0xB5	; 181
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	d1 f6       	brne	.-76     	; 0x24b4 <lcd_4bit_intialize+0x38a>
    2500:	27 c0       	rjmp	.+78     	; 0x2550 <lcd_4bit_intialize+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	8e 01       	movw	r16, r28
    2504:	05 5b       	subi	r16, 0xB5	; 181
    2506:	1f 4f       	sbci	r17, 0xFF	; 255
    2508:	fe 01       	movw	r30, r28
    250a:	e3 5b       	subi	r30, 0xB3	; 179
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	de 01       	movw	r26, r28
    2526:	a9 5b       	subi	r26, 0xB9	; 185
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e5 5b       	subi	r30, 0xB5	; 181
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	91 81       	ldd	r25, Z+1	; 0x01
    2534:	8d 93       	st	X+, r24
    2536:	9c 93       	st	X, r25
    2538:	fe 01       	movw	r30, r28
    253a:	e9 5b       	subi	r30, 0xB9	; 185
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	80 81       	ld	r24, Z
    2540:	91 81       	ldd	r25, Z+1	; 0x01
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <lcd_4bit_intialize+0x418>
    2546:	fe 01       	movw	r30, r28
    2548:	e9 5b       	subi	r30, 0xB9	; 185
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
		{
			ret = gpio_pin_direction_initialize(&(lcd->lcd_data[Loc_counter]), GPIO_PIN_OUTPOT);
		}

		Delay_ms(20);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2550:	fe 01       	movw	r30, r28
    2552:	ef 56       	subi	r30, 0x6F	; 111
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	68 e3       	ldi	r22, 0x38	; 56
    255c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2560:	fe 01       	movw	r30, r28
    2562:	ea 5a       	subi	r30, 0xAA	; 170
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	80 83       	st	Z, r24
    2568:	fe 01       	movw	r30, r28
    256a:	ed 5b       	subi	r30, 0xBD	; 189
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	a0 ea       	ldi	r26, 0xA0	; 160
    2574:	b0 e4       	ldi	r27, 0x40	; 64
    2576:	80 83       	st	Z, r24
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	a2 83       	std	Z+2, r26	; 0x02
    257c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257e:	8e 01       	movw	r16, r28
    2580:	01 5c       	subi	r16, 0xC1	; 193
    2582:	1f 4f       	sbci	r17, 0xFF	; 255
    2584:	fe 01       	movw	r30, r28
    2586:	ed 5b       	subi	r30, 0xBD	; 189
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4a e7       	ldi	r20, 0x7A	; 122
    2598:	53 e4       	ldi	r21, 0x43	; 67
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	f8 01       	movw	r30, r16
    25a4:	80 83       	st	Z, r24
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	a2 83       	std	Z+2, r26	; 0x02
    25aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ac:	fe 01       	movw	r30, r28
    25ae:	ff 96       	adiw	r30, 0x3f	; 63
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e8       	ldi	r20, 0x80	; 128
    25be:	5f e3       	ldi	r21, 0x3F	; 63
    25c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c4:	88 23       	and	r24, r24
    25c6:	2c f4       	brge	.+10     	; 0x25d2 <lcd_4bit_intialize+0x4a8>
		__ticks = 1;
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	9e af       	std	Y+62, r25	; 0x3e
    25ce:	8d af       	std	Y+61, r24	; 0x3d
    25d0:	46 c0       	rjmp	.+140    	; 0x265e <lcd_4bit_intialize+0x534>
	else if (__tmp > 65535)
    25d2:	fe 01       	movw	r30, r28
    25d4:	ff 96       	adiw	r30, 0x3f	; 63
    25d6:	60 81       	ld	r22, Z
    25d8:	71 81       	ldd	r23, Z+1	; 0x01
    25da:	82 81       	ldd	r24, Z+2	; 0x02
    25dc:	93 81       	ldd	r25, Z+3	; 0x03
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	64 f5       	brge	.+88     	; 0x2646 <lcd_4bit_intialize+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	fe 01       	movw	r30, r28
    25f0:	ed 5b       	subi	r30, 0xBD	; 189
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	60 81       	ld	r22, Z
    25f6:	71 81       	ldd	r23, Z+1	; 0x01
    25f8:	82 81       	ldd	r24, Z+2	; 0x02
    25fa:	93 81       	ldd	r25, Z+3	; 0x03
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9e af       	std	Y+62, r25	; 0x3e
    261a:	8d af       	std	Y+61, r24	; 0x3d
    261c:	0f c0       	rjmp	.+30     	; 0x263c <lcd_4bit_intialize+0x512>
    261e:	89 e1       	ldi	r24, 0x19	; 25
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c af       	std	Y+60, r25	; 0x3c
    2624:	8b af       	std	Y+59, r24	; 0x3b
    2626:	8b ad       	ldd	r24, Y+59	; 0x3b
    2628:	9c ad       	ldd	r25, Y+60	; 0x3c
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <lcd_4bit_intialize+0x500>
    262e:	9c af       	std	Y+60, r25	; 0x3c
    2630:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8d ad       	ldd	r24, Y+61	; 0x3d
    2634:	9e ad       	ldd	r25, Y+62	; 0x3e
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9e af       	std	Y+62, r25	; 0x3e
    263a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8d ad       	ldd	r24, Y+61	; 0x3d
    263e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <lcd_4bit_intialize+0x4f4>
    2644:	16 c0       	rjmp	.+44     	; 0x2672 <lcd_4bit_intialize+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	fe 01       	movw	r30, r28
    2648:	ff 96       	adiw	r30, 0x3f	; 63
    264a:	60 81       	ld	r22, Z
    264c:	71 81       	ldd	r23, Z+1	; 0x01
    264e:	82 81       	ldd	r24, Z+2	; 0x02
    2650:	93 81       	ldd	r25, Z+3	; 0x03
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9e af       	std	Y+62, r25	; 0x3e
    265c:	8d af       	std	Y+61, r24	; 0x3d
    265e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2660:	9e ad       	ldd	r25, Y+62	; 0x3e
    2662:	9a af       	std	Y+58, r25	; 0x3a
    2664:	89 af       	std	Y+57, r24	; 0x39
    2666:	89 ad       	ldd	r24, Y+57	; 0x39
    2668:	9a ad       	ldd	r25, Y+58	; 0x3a
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <lcd_4bit_intialize+0x540>
    266e:	9a af       	std	Y+58, r25	; 0x3a
    2670:	89 af       	std	Y+57, r24	; 0x39
		Delay_ms(5);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2672:	fe 01       	movw	r30, r28
    2674:	ef 56       	subi	r30, 0x6F	; 111
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	91 81       	ldd	r25, Z+1	; 0x01
    267c:	68 e3       	ldi	r22, 0x38	; 56
    267e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2682:	fe 01       	movw	r30, r28
    2684:	ea 5a       	subi	r30, 0xAA	; 170
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 83       	st	Z, r24
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	a6 e1       	ldi	r26, 0x16	; 22
    2690:	b3 e4       	ldi	r27, 0x43	; 67
    2692:	8d ab       	std	Y+53, r24	; 0x35
    2694:	9e ab       	std	Y+54, r25	; 0x36
    2696:	af ab       	std	Y+55, r26	; 0x37
    2698:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269a:	6d a9       	ldd	r22, Y+53	; 0x35
    269c:	7e a9       	ldd	r23, Y+54	; 0x36
    269e:	8f a9       	ldd	r24, Y+55	; 0x37
    26a0:	98 ad       	ldd	r25, Y+56	; 0x38
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	4a e7       	ldi	r20, 0x7A	; 122
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	89 ab       	std	Y+49, r24	; 0x31
    26b4:	9a ab       	std	Y+50, r25	; 0x32
    26b6:	ab ab       	std	Y+51, r26	; 0x33
    26b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26ba:	69 a9       	ldd	r22, Y+49	; 0x31
    26bc:	7a a9       	ldd	r23, Y+50	; 0x32
    26be:	8b a9       	ldd	r24, Y+51	; 0x33
    26c0:	9c a9       	ldd	r25, Y+52	; 0x34
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e8       	ldi	r20, 0x80	; 128
    26c8:	5f e3       	ldi	r21, 0x3F	; 63
    26ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ce:	88 23       	and	r24, r24
    26d0:	2c f4       	brge	.+10     	; 0x26dc <lcd_4bit_intialize+0x5b2>
		__ticks = 1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	98 ab       	std	Y+48, r25	; 0x30
    26d8:	8f a7       	std	Y+47, r24	; 0x2f
    26da:	3f c0       	rjmp	.+126    	; 0x275a <lcd_4bit_intialize+0x630>
	else if (__tmp > 65535)
    26dc:	69 a9       	ldd	r22, Y+49	; 0x31
    26de:	7a a9       	ldd	r23, Y+50	; 0x32
    26e0:	8b a9       	ldd	r24, Y+51	; 0x33
    26e2:	9c a9       	ldd	r25, Y+52	; 0x34
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	3f ef       	ldi	r19, 0xFF	; 255
    26e8:	4f e7       	ldi	r20, 0x7F	; 127
    26ea:	57 e4       	ldi	r21, 0x47	; 71
    26ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f0:	18 16       	cp	r1, r24
    26f2:	4c f5       	brge	.+82     	; 0x2746 <lcd_4bit_intialize+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f4:	6d a9       	ldd	r22, Y+53	; 0x35
    26f6:	7e a9       	ldd	r23, Y+54	; 0x36
    26f8:	8f a9       	ldd	r24, Y+55	; 0x37
    26fa:	98 ad       	ldd	r25, Y+56	; 0x38
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	bc 01       	movw	r22, r24
    270e:	cd 01       	movw	r24, r26
    2710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	98 ab       	std	Y+48, r25	; 0x30
    271a:	8f a7       	std	Y+47, r24	; 0x2f
    271c:	0f c0       	rjmp	.+30     	; 0x273c <lcd_4bit_intialize+0x612>
    271e:	89 e1       	ldi	r24, 0x19	; 25
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	9e a7       	std	Y+46, r25	; 0x2e
    2724:	8d a7       	std	Y+45, r24	; 0x2d
    2726:	8d a5       	ldd	r24, Y+45	; 0x2d
    2728:	9e a5       	ldd	r25, Y+46	; 0x2e
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	f1 f7       	brne	.-4      	; 0x272a <lcd_4bit_intialize+0x600>
    272e:	9e a7       	std	Y+46, r25	; 0x2e
    2730:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2732:	8f a5       	ldd	r24, Y+47	; 0x2f
    2734:	98 a9       	ldd	r25, Y+48	; 0x30
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	98 ab       	std	Y+48, r25	; 0x30
    273a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    273c:	8f a5       	ldd	r24, Y+47	; 0x2f
    273e:	98 a9       	ldd	r25, Y+48	; 0x30
    2740:	00 97       	sbiw	r24, 0x00	; 0
    2742:	69 f7       	brne	.-38     	; 0x271e <lcd_4bit_intialize+0x5f4>
    2744:	14 c0       	rjmp	.+40     	; 0x276e <lcd_4bit_intialize+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2746:	69 a9       	ldd	r22, Y+49	; 0x31
    2748:	7a a9       	ldd	r23, Y+50	; 0x32
    274a:	8b a9       	ldd	r24, Y+51	; 0x33
    274c:	9c a9       	ldd	r25, Y+52	; 0x34
    274e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2752:	dc 01       	movw	r26, r24
    2754:	cb 01       	movw	r24, r22
    2756:	98 ab       	std	Y+48, r25	; 0x30
    2758:	8f a7       	std	Y+47, r24	; 0x2f
    275a:	8f a5       	ldd	r24, Y+47	; 0x2f
    275c:	98 a9       	ldd	r25, Y+48	; 0x30
    275e:	9c a7       	std	Y+44, r25	; 0x2c
    2760:	8b a7       	std	Y+43, r24	; 0x2b
    2762:	8b a5       	ldd	r24, Y+43	; 0x2b
    2764:	9c a5       	ldd	r25, Y+44	; 0x2c
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <lcd_4bit_intialize+0x63c>
    276a:	9c a7       	std	Y+44, r25	; 0x2c
    276c:	8b a7       	std	Y+43, r24	; 0x2b
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    276e:	fe 01       	movw	r30, r28
    2770:	ef 56       	subi	r30, 0x6F	; 111
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	80 81       	ld	r24, Z
    2776:	91 81       	ldd	r25, Z+1	; 0x01
    2778:	68 e3       	ldi	r22, 0x38	; 56
    277a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    277e:	fe 01       	movw	r30, r28
    2780:	ea 5a       	subi	r30, 0xAA	; 170
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	80 83       	st	Z, r24

		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2786:	fe 01       	movw	r30, r28
    2788:	ef 56       	subi	r30, 0x6F	; 111
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	80 81       	ld	r24, Z
    278e:	91 81       	ldd	r25, Z+1	; 0x01
    2790:	61 e0       	ldi	r22, 0x01	; 1
    2792:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2796:	fe 01       	movw	r30, r28
    2798:	ea 5a       	subi	r30, 0xAA	; 170
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_RETURN_HOME);
    279e:	fe 01       	movw	r30, r28
    27a0:	ef 56       	subi	r30, 0x6F	; 111
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	62 e0       	ldi	r22, 0x02	; 2
    27aa:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    27ae:	fe 01       	movw	r30, r28
    27b0:	ea 5a       	subi	r30, 0xAA	; 170
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    27b6:	fe 01       	movw	r30, r28
    27b8:	ef 56       	subi	r30, 0x6F	; 111
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	80 81       	ld	r24, Z
    27be:	91 81       	ldd	r25, Z+1	; 0x01
    27c0:	66 e0       	ldi	r22, 0x06	; 6
    27c2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    27c6:	fe 01       	movw	r30, r28
    27c8:	ea 5a       	subi	r30, 0xAA	; 170
    27ca:	ff 4f       	sbci	r31, 0xFF	; 255
    27cc:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    27ce:	fe 01       	movw	r30, r28
    27d0:	ef 56       	subi	r30, 0x6F	; 111
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	6c e0       	ldi	r22, 0x0C	; 12
    27da:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    27de:	fe 01       	movw	r30, r28
    27e0:	ea 5a       	subi	r30, 0xAA	; 170
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, _LCD_4BIT_MODE_2_LINE);
    27e6:	fe 01       	movw	r30, r28
    27e8:	ef 56       	subi	r30, 0x6F	; 111
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	91 81       	ldd	r25, Z+1	; 0x01
    27f0:	68 e2       	ldi	r22, 0x28	; 40
    27f2:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    27f6:	fe 01       	movw	r30, r28
    27f8:	ea 5a       	subi	r30, 0xAA	; 170
    27fa:	ff 4f       	sbci	r31, 0xFF	; 255
    27fc:	80 83       	st	Z, r24
		ret = lcd_4bit_send_command(lcd, 0x80);
    27fe:	fe 01       	movw	r30, r28
    2800:	ef 56       	subi	r30, 0x6F	; 111
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	60 e8       	ldi	r22, 0x80	; 128
    280a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    280e:	fe 01       	movw	r30, r28
    2810:	ea 5a       	subi	r30, 0xAA	; 170
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string1);
    2816:	fe 01       	movw	r30, r28
    2818:	ef 56       	subi	r30, 0x6F	; 111
    281a:	ff 4f       	sbci	r31, 0xFF	; 255
    281c:	80 81       	ld	r24, Z
    281e:	91 81       	ldd	r25, Z+1	; 0x01
    2820:	9e 01       	movw	r18, r28
    2822:	29 5a       	subi	r18, 0xA9	; 169
    2824:	3f 4f       	sbci	r19, 0xFF	; 255
    2826:	b9 01       	movw	r22, r18
    2828:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <lcd_4bit_send_string>
    282c:	fe 01       	movw	r30, r28
    282e:	ea 5a       	subi	r30, 0xAA	; 170
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	80 83       	st	Z, r24
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	a6 e1       	ldi	r26, 0x16	; 22
    283a:	b3 e4       	ldi	r27, 0x43	; 67
    283c:	8f a3       	std	Y+39, r24	; 0x27
    283e:	98 a7       	std	Y+40, r25	; 0x28
    2840:	a9 a7       	std	Y+41, r26	; 0x29
    2842:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2844:	6f a1       	ldd	r22, Y+39	; 0x27
    2846:	78 a5       	ldd	r23, Y+40	; 0x28
    2848:	89 a5       	ldd	r24, Y+41	; 0x29
    284a:	9a a5       	ldd	r25, Y+42	; 0x2a
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a e7       	ldi	r20, 0x7A	; 122
    2852:	53 e4       	ldi	r21, 0x43	; 67
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	8b a3       	std	Y+35, r24	; 0x23
    285e:	9c a3       	std	Y+36, r25	; 0x24
    2860:	ad a3       	std	Y+37, r26	; 0x25
    2862:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2864:	6b a1       	ldd	r22, Y+35	; 0x23
    2866:	7c a1       	ldd	r23, Y+36	; 0x24
    2868:	8d a1       	ldd	r24, Y+37	; 0x25
    286a:	9e a1       	ldd	r25, Y+38	; 0x26
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	30 e0       	ldi	r19, 0x00	; 0
    2870:	40 e8       	ldi	r20, 0x80	; 128
    2872:	5f e3       	ldi	r21, 0x3F	; 63
    2874:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2878:	88 23       	and	r24, r24
    287a:	2c f4       	brge	.+10     	; 0x2886 <lcd_4bit_intialize+0x75c>
		__ticks = 1;
    287c:	81 e0       	ldi	r24, 0x01	; 1
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	9a a3       	std	Y+34, r25	; 0x22
    2882:	89 a3       	std	Y+33, r24	; 0x21
    2884:	3f c0       	rjmp	.+126    	; 0x2904 <lcd_4bit_intialize+0x7da>
	else if (__tmp > 65535)
    2886:	6b a1       	ldd	r22, Y+35	; 0x23
    2888:	7c a1       	ldd	r23, Y+36	; 0x24
    288a:	8d a1       	ldd	r24, Y+37	; 0x25
    288c:	9e a1       	ldd	r25, Y+38	; 0x26
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	3f ef       	ldi	r19, 0xFF	; 255
    2892:	4f e7       	ldi	r20, 0x7F	; 127
    2894:	57 e4       	ldi	r21, 0x47	; 71
    2896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    289a:	18 16       	cp	r1, r24
    289c:	4c f5       	brge	.+82     	; 0x28f0 <lcd_4bit_intialize+0x7c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    289e:	6f a1       	ldd	r22, Y+39	; 0x27
    28a0:	78 a5       	ldd	r23, Y+40	; 0x28
    28a2:	89 a5       	ldd	r24, Y+41	; 0x29
    28a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e2       	ldi	r20, 0x20	; 32
    28ac:	51 e4       	ldi	r21, 0x41	; 65
    28ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	bc 01       	movw	r22, r24
    28b8:	cd 01       	movw	r24, r26
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	9a a3       	std	Y+34, r25	; 0x22
    28c4:	89 a3       	std	Y+33, r24	; 0x21
    28c6:	0f c0       	rjmp	.+30     	; 0x28e6 <lcd_4bit_intialize+0x7bc>
    28c8:	89 e1       	ldi	r24, 0x19	; 25
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	98 a3       	std	Y+32, r25	; 0x20
    28ce:	8f 8f       	std	Y+31, r24	; 0x1f
    28d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    28d2:	98 a1       	ldd	r25, Y+32	; 0x20
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <lcd_4bit_intialize+0x7aa>
    28d8:	98 a3       	std	Y+32, r25	; 0x20
    28da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28dc:	89 a1       	ldd	r24, Y+33	; 0x21
    28de:	9a a1       	ldd	r25, Y+34	; 0x22
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	9a a3       	std	Y+34, r25	; 0x22
    28e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e6:	89 a1       	ldd	r24, Y+33	; 0x21
    28e8:	9a a1       	ldd	r25, Y+34	; 0x22
    28ea:	00 97       	sbiw	r24, 0x00	; 0
    28ec:	69 f7       	brne	.-38     	; 0x28c8 <lcd_4bit_intialize+0x79e>
    28ee:	14 c0       	rjmp	.+40     	; 0x2918 <lcd_4bit_intialize+0x7ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28f0:	6b a1       	ldd	r22, Y+35	; 0x23
    28f2:	7c a1       	ldd	r23, Y+36	; 0x24
    28f4:	8d a1       	ldd	r24, Y+37	; 0x25
    28f6:	9e a1       	ldd	r25, Y+38	; 0x26
    28f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9a a3       	std	Y+34, r25	; 0x22
    2902:	89 a3       	std	Y+33, r24	; 0x21
    2904:	89 a1       	ldd	r24, Y+33	; 0x21
    2906:	9a a1       	ldd	r25, Y+34	; 0x22
    2908:	9e 8f       	std	Y+30, r25	; 0x1e
    290a:	8d 8f       	std	Y+29, r24	; 0x1d
    290c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    290e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <lcd_4bit_intialize+0x7e6>
    2914:	9e 8f       	std	Y+30, r25	; 0x1e
    2916:	8d 8f       	std	Y+29, r24	; 0x1d
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2918:	fe 01       	movw	r30, r28
    291a:	ef 56       	subi	r30, 0x6F	; 111
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	61 e0       	ldi	r22, 0x01	; 1
    2924:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2928:	fe 01       	movw	r30, r28
    292a:	ea 5a       	subi	r30, 0xAA	; 170
    292c:	ff 4f       	sbci	r31, 0xFF	; 255
    292e:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string2);
    2930:	fe 01       	movw	r30, r28
    2932:	ef 56       	subi	r30, 0x6F	; 111
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	9e 01       	movw	r18, r28
    293c:	25 59       	subi	r18, 0x95	; 149
    293e:	3f 4f       	sbci	r19, 0xFF	; 255
    2940:	b9 01       	movw	r22, r18
    2942:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <lcd_4bit_send_string>
    2946:	fe 01       	movw	r30, r28
    2948:	ea 5a       	subi	r30, 0xAA	; 170
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 83       	st	Z, r24
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	a6 e1       	ldi	r26, 0x16	; 22
    2954:	b3 e4       	ldi	r27, 0x43	; 67
    2956:	89 8f       	std	Y+25, r24	; 0x19
    2958:	9a 8f       	std	Y+26, r25	; 0x1a
    295a:	ab 8f       	std	Y+27, r26	; 0x1b
    295c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    295e:	69 8d       	ldd	r22, Y+25	; 0x19
    2960:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2962:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2964:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	4a e7       	ldi	r20, 0x7A	; 122
    296c:	53 e4       	ldi	r21, 0x43	; 67
    296e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	8d 8b       	std	Y+21, r24	; 0x15
    2978:	9e 8b       	std	Y+22, r25	; 0x16
    297a:	af 8b       	std	Y+23, r26	; 0x17
    297c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    297e:	6d 89       	ldd	r22, Y+21	; 0x15
    2980:	7e 89       	ldd	r23, Y+22	; 0x16
    2982:	8f 89       	ldd	r24, Y+23	; 0x17
    2984:	98 8d       	ldd	r25, Y+24	; 0x18
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e8       	ldi	r20, 0x80	; 128
    298c:	5f e3       	ldi	r21, 0x3F	; 63
    298e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2992:	88 23       	and	r24, r24
    2994:	2c f4       	brge	.+10     	; 0x29a0 <lcd_4bit_intialize+0x876>
		__ticks = 1;
    2996:	81 e0       	ldi	r24, 0x01	; 1
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	9c 8b       	std	Y+20, r25	; 0x14
    299c:	8b 8b       	std	Y+19, r24	; 0x13
    299e:	3f c0       	rjmp	.+126    	; 0x2a1e <lcd_4bit_intialize+0x8f4>
	else if (__tmp > 65535)
    29a0:	6d 89       	ldd	r22, Y+21	; 0x15
    29a2:	7e 89       	ldd	r23, Y+22	; 0x16
    29a4:	8f 89       	ldd	r24, Y+23	; 0x17
    29a6:	98 8d       	ldd	r25, Y+24	; 0x18
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	3f ef       	ldi	r19, 0xFF	; 255
    29ac:	4f e7       	ldi	r20, 0x7F	; 127
    29ae:	57 e4       	ldi	r21, 0x47	; 71
    29b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29b4:	18 16       	cp	r1, r24
    29b6:	4c f5       	brge	.+82     	; 0x2a0a <lcd_4bit_intialize+0x8e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29b8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	51 e4       	ldi	r21, 0x41	; 65
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	bc 01       	movw	r22, r24
    29d2:	cd 01       	movw	r24, r26
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <lcd_4bit_intialize+0x8d6>
    29e2:	89 e1       	ldi	r24, 0x19	; 25
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9a 8b       	std	Y+18, r25	; 0x12
    29e8:	89 8b       	std	Y+17, r24	; 0x11
    29ea:	89 89       	ldd	r24, Y+17	; 0x11
    29ec:	9a 89       	ldd	r25, Y+18	; 0x12
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	f1 f7       	brne	.-4      	; 0x29ee <lcd_4bit_intialize+0x8c4>
    29f2:	9a 8b       	std	Y+18, r25	; 0x12
    29f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f6:	8b 89       	ldd	r24, Y+19	; 0x13
    29f8:	9c 89       	ldd	r25, Y+20	; 0x14
    29fa:	01 97       	sbiw	r24, 0x01	; 1
    29fc:	9c 8b       	std	Y+20, r25	; 0x14
    29fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a00:	8b 89       	ldd	r24, Y+19	; 0x13
    2a02:	9c 89       	ldd	r25, Y+20	; 0x14
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	69 f7       	brne	.-38     	; 0x29e2 <lcd_4bit_intialize+0x8b8>
    2a08:	14 c0       	rjmp	.+40     	; 0x2a32 <lcd_4bit_intialize+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a10:	98 8d       	ldd	r25, Y+24	; 0x18
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9c 8b       	std	Y+20, r25	; 0x14
    2a1c:	8b 8b       	std	Y+19, r24	; 0x13
    2a1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2a20:	9c 89       	ldd	r25, Y+20	; 0x14
    2a22:	98 8b       	std	Y+16, r25	; 0x10
    2a24:	8f 87       	std	Y+15, r24	; 0x0f
    2a26:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a28:	98 89       	ldd	r25, Y+16	; 0x10
    2a2a:	01 97       	sbiw	r24, 0x01	; 1
    2a2c:	f1 f7       	brne	.-4      	; 0x2a2a <lcd_4bit_intialize+0x900>
    2a2e:	98 8b       	std	Y+16, r25	; 0x10
    2a30:	8f 87       	std	Y+15, r24	; 0x0f
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2a32:	fe 01       	movw	r30, r28
    2a34:	ef 56       	subi	r30, 0x6F	; 111
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2a42:	fe 01       	movw	r30, r28
    2a44:	ea 5a       	subi	r30, 0xAA	; 170
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 83       	st	Z, r24

		ret = lcd_4bit_send_string(lcd, &string3);
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	ef 56       	subi	r30, 0x6F	; 111
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	80 81       	ld	r24, Z
    2a52:	91 81       	ldd	r25, Z+1	; 0x01
    2a54:	9e 01       	movw	r18, r28
    2a56:	22 58       	subi	r18, 0x82	; 130
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	b9 01       	movw	r22, r18
    2a5c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <lcd_4bit_send_string>
    2a60:	fe 01       	movw	r30, r28
    2a62:	ea 5a       	subi	r30, 0xAA	; 170
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	80 83       	st	Z, r24
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	a6 e1       	ldi	r26, 0x16	; 22
    2a6e:	b3 e4       	ldi	r27, 0x43	; 67
    2a70:	8b 87       	std	Y+11, r24	; 0x0b
    2a72:	9c 87       	std	Y+12, r25	; 0x0c
    2a74:	ad 87       	std	Y+13, r26	; 0x0d
    2a76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	4a e7       	ldi	r20, 0x7A	; 122
    2a86:	53 e4       	ldi	r21, 0x43	; 67
    2a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8c:	dc 01       	movw	r26, r24
    2a8e:	cb 01       	movw	r24, r22
    2a90:	8f 83       	std	Y+7, r24	; 0x07
    2a92:	98 87       	std	Y+8, r25	; 0x08
    2a94:	a9 87       	std	Y+9, r26	; 0x09
    2a96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a98:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9a:	78 85       	ldd	r23, Y+8	; 0x08
    2a9c:	89 85       	ldd	r24, Y+9	; 0x09
    2a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e8       	ldi	r20, 0x80	; 128
    2aa6:	5f e3       	ldi	r21, 0x3F	; 63
    2aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aac:	88 23       	and	r24, r24
    2aae:	2c f4       	brge	.+10     	; 0x2aba <lcd_4bit_intialize+0x990>
		__ticks = 1;
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	3f c0       	rjmp	.+126    	; 0x2b38 <lcd_4bit_intialize+0xa0e>
	else if (__tmp > 65535)
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	3f ef       	ldi	r19, 0xFF	; 255
    2ac6:	4f e7       	ldi	r20, 0x7F	; 127
    2ac8:	57 e4       	ldi	r21, 0x47	; 71
    2aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ace:	18 16       	cp	r1, r24
    2ad0:	4c f5       	brge	.+82     	; 0x2b24 <lcd_4bit_intialize+0x9fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ad4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ad6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ad8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e2       	ldi	r20, 0x20	; 32
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	cb 01       	movw	r24, r22
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
    2afa:	0f c0       	rjmp	.+30     	; 0x2b1a <lcd_4bit_intialize+0x9f0>
    2afc:	89 e1       	ldi	r24, 0x19	; 25
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	8b 83       	std	Y+3, r24	; 0x03
    2b04:	8b 81       	ldd	r24, Y+3	; 0x03
    2b06:	9c 81       	ldd	r25, Y+4	; 0x04
    2b08:	01 97       	sbiw	r24, 0x01	; 1
    2b0a:	f1 f7       	brne	.-4      	; 0x2b08 <lcd_4bit_intialize+0x9de>
    2b0c:	9c 83       	std	Y+4, r25	; 0x04
    2b0e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b10:	8d 81       	ldd	r24, Y+5	; 0x05
    2b12:	9e 81       	ldd	r25, Y+6	; 0x06
    2b14:	01 97       	sbiw	r24, 0x01	; 1
    2b16:	9e 83       	std	Y+6, r25	; 0x06
    2b18:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	69 f7       	brne	.-38     	; 0x2afc <lcd_4bit_intialize+0x9d2>
    2b22:	14 c0       	rjmp	.+40     	; 0x2b4c <lcd_4bit_intialize+0xa22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	9a 83       	std	Y+2, r25	; 0x02
    2b3e:	89 83       	std	Y+1, r24	; 0x01
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	9a 81       	ldd	r25, Y+2	; 0x02
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	f1 f7       	brne	.-4      	; 0x2b44 <lcd_4bit_intialize+0xa1a>
    2b48:	9a 83       	std	Y+2, r25	; 0x02
    2b4a:	89 83       	std	Y+1, r24	; 0x01
		Delay_ms(150);
		ret = lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ef 56       	subi	r30, 0x6F	; 111
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	91 81       	ldd	r25, Z+1	; 0x01
    2b56:	61 e0       	ldi	r22, 0x01	; 1
    2b58:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	ea 5a       	subi	r30, 0xAA	; 170
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
	}
	return ret;
    2b64:	fe 01       	movw	r30, r28
    2b66:	ea 5a       	subi	r30, 0xAA	; 170
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	80 81       	ld	r24, Z
}
    2b6c:	cf 55       	subi	r28, 0x5F	; 95
    2b6e:	df 4f       	sbci	r29, 0xFF	; 255
    2b70:	0f b6       	in	r0, 0x3f	; 63
    2b72:	f8 94       	cli
    2b74:	de bf       	out	0x3e, r29	; 62
    2b76:	0f be       	out	0x3f, r0	; 63
    2b78:	cd bf       	out	0x3d, r28	; 61
    2b7a:	cf 91       	pop	r28
    2b7c:	df 91       	pop	r29
    2b7e:	1f 91       	pop	r17
    2b80:	0f 91       	pop	r16
    2b82:	08 95       	ret

00002b84 <lcd_4bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_command(const chr_lcd_4bit_t *lcd, uint8 command){
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <lcd_4bit_send_command+0x6>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <lcd_4bit_send_command+0x8>
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	9b 83       	std	Y+3, r25	; 0x03
    2b92:	8a 83       	std	Y+2, r24	; 0x02
    2b94:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2b96:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2b98:	8a 81       	ldd	r24, Y+2	; 0x02
    2b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	19 f4       	brne	.+6      	; 0x2ba6 <lcd_4bit_send_command+0x22>
		ret = E_NOK;
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	20 c0       	rjmp	.+64     	; 0x2be6 <lcd_4bit_send_command+0x62>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    2bb0:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Command through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, command >> 4);
    2bb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb4:	28 2f       	mov	r18, r24
    2bb6:	22 95       	swap	r18
    2bb8:	2f 70       	andi	r18, 0x0F	; 15
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	62 2f       	mov	r22, r18
    2bc0:	0e 94 82 1a 	call	0x3504	; 0x3504 <lcd_send_4bits>
    2bc4:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bca:	0e 94 ce 1a 	call	0x359c	; 0x359c <lcd_4bit_send_enable_signal>
    2bce:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Command through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, command);
    2bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd4:	6c 81       	ldd	r22, Y+4	; 0x04
    2bd6:	0e 94 82 1a 	call	0x3504	; 0x3504 <lcd_send_4bits>
    2bda:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	0e 94 ce 1a 	call	0x359c	; 0x359c <lcd_4bit_send_enable_signal>
    2be4:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	cf 91       	pop	r28
    2bf2:	df 91       	pop	r29
    2bf4:	08 95       	ret

00002bf6 <lcd_4bit_send_char_data>:
 * @param data The data that we need to send to the LCD
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data(const chr_lcd_4bit_t *lcd, uint8 data){
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <lcd_4bit_send_char_data+0x6>
    2bfc:	00 d0       	rcall	.+0      	; 0x2bfe <lcd_4bit_send_char_data+0x8>
    2bfe:	cd b7       	in	r28, 0x3d	; 61
    2c00:	de b7       	in	r29, 0x3e	; 62
    2c02:	9b 83       	std	Y+3, r25	; 0x03
    2c04:	8a 83       	std	Y+2, r24	; 0x02
    2c06:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2c08:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	19 f4       	brne	.+6      	; 0x2c18 <lcd_4bit_send_char_data+0x22>
		ret = E_NOK;
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	89 83       	std	Y+1, r24	; 0x01
    2c16:	20 c0       	rjmp	.+64     	; 0x2c58 <lcd_4bit_send_char_data+0x62>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	61 e0       	ldi	r22, 0x01	; 1
    2c1e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    2c22:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Data through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, data >> 4);
    2c24:	8c 81       	ldd	r24, Y+4	; 0x04
    2c26:	28 2f       	mov	r18, r24
    2c28:	22 95       	swap	r18
    2c2a:	2f 70       	andi	r18, 0x0F	; 15
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	62 2f       	mov	r22, r18
    2c32:	0e 94 82 1a 	call	0x3504	; 0x3504 <lcd_send_4bits>
    2c36:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2c38:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3c:	0e 94 ce 1a 	call	0x359c	; 0x359c <lcd_4bit_send_enable_signal>
    2c40:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Data through the (4-Pins" Data lines */
		ret = lcd_send_4bits(lcd, data);
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	6c 81       	ldd	r22, Y+4	; 0x04
    2c48:	0e 94 82 1a 	call	0x3504	; 0x3504 <lcd_send_4bits>
    2c4c:	89 83       	std	Y+1, r24	; 0x01
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_4bit_send_enable_signal(lcd);
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	0e 94 ce 1a 	call	0x359c	; 0x359c <lcd_4bit_send_enable_signal>
    2c56:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <lcd_4bit_send_char_data_pos>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_char_data_pos(const chr_lcd_4bit_t *lcd,uint8 row, uint8 column, uint8 data){
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <lcd_4bit_send_char_data_pos+0x6>
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <lcd_4bit_send_char_data_pos+0x8>
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <lcd_4bit_send_char_data_pos+0xa>
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	9b 83       	std	Y+3, r25	; 0x03
    2c78:	8a 83       	std	Y+2, r24	; 0x02
    2c7a:	6c 83       	std	Y+4, r22	; 0x04
    2c7c:	4d 83       	std	Y+5, r20	; 0x05
    2c7e:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    2c80:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	00 97       	sbiw	r24, 0x00	; 0
    2c88:	19 f4       	brne	.+6      	; 0x2c90 <lcd_4bit_send_char_data_pos+0x28>
		ret = E_NOK;
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	89 83       	std	Y+1, r24	; 0x01
    2c8e:	0d c0       	rjmp	.+26     	; 0x2caa <lcd_4bit_send_char_data_pos+0x42>
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
    2c90:	8a 81       	ldd	r24, Y+2	; 0x02
    2c92:	9b 81       	ldd	r25, Y+3	; 0x03
    2c94:	6c 81       	ldd	r22, Y+4	; 0x04
    2c96:	4d 81       	ldd	r20, Y+5	; 0x05
    2c98:	0e 94 5f 1c 	call	0x38be	; 0x38be <lcd_4bit_set_cursor>
    2c9c:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_4bit_send_char_data(lcd, data);
    2c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca2:	6e 81       	ldd	r22, Y+6	; 0x06
    2ca4:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <lcd_4bit_send_char_data>
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cac:	26 96       	adiw	r28, 0x06	; 6
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <lcd_4bit_send_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string(const chr_lcd_4bit_t *lcd, uint8 *str){
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <lcd_4bit_send_string+0x6>
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <lcd_4bit_send_string+0x8>
    2cc6:	0f 92       	push	r0
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9b 83       	std	Y+3, r25	; 0x03
    2cce:	8a 83       	std	Y+2, r24	; 0x02
    2cd0:	7d 83       	std	Y+5, r23	; 0x05
    2cd2:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    2cd4:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cda:	00 97       	sbiw	r24, 0x00	; 0
    2cdc:	89 f4       	brne	.+34     	; 0x2d00 <lcd_4bit_send_string+0x42>
		ret = E_NOK;
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	13 c0       	rjmp	.+38     	; 0x2d0a <lcd_4bit_send_string+0x4c>
	}
	else{
		while(*str){
			ret = lcd_4bit_send_char_data(lcd, *str++);
    2ce4:	ec 81       	ldd	r30, Y+4	; 0x04
    2ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    2ce8:	20 81       	ld	r18, Z
    2cea:	8c 81       	ldd	r24, Y+4	; 0x04
    2cec:	9d 81       	ldd	r25, Y+5	; 0x05
    2cee:	01 96       	adiw	r24, 0x01	; 1
    2cf0:	9d 83       	std	Y+5, r25	; 0x05
    2cf2:	8c 83       	std	Y+4, r24	; 0x04
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf8:	62 2f       	mov	r22, r18
    2cfa:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <lcd_4bit_send_char_data>
    2cfe:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		while(*str){
    2d00:	ec 81       	ldd	r30, Y+4	; 0x04
    2d02:	fd 81       	ldd	r31, Y+5	; 0x05
    2d04:	80 81       	ld	r24, Z
    2d06:	88 23       	and	r24, r24
    2d08:	69 f7       	brne	.-38     	; 0x2ce4 <lcd_4bit_send_string+0x26>
			ret = lcd_4bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <lcd_4bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_string_pos(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	27 97       	sbiw	r28, 0x07	; 7
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	9b 83       	std	Y+3, r25	; 0x03
    2d32:	8a 83       	std	Y+2, r24	; 0x02
    2d34:	6c 83       	std	Y+4, r22	; 0x04
    2d36:	4d 83       	std	Y+5, r20	; 0x05
    2d38:	3f 83       	std	Y+7, r19	; 0x07
    2d3a:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    2d3c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <lcd_4bit_send_string_pos+0x30>
		ret = E_NOK;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	89 83       	std	Y+1, r24	; 0x01
    2d4a:	1b c0       	rjmp	.+54     	; 0x2d82 <lcd_4bit_send_string_pos+0x66>
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	6c 81       	ldd	r22, Y+4	; 0x04
    2d52:	4d 81       	ldd	r20, Y+5	; 0x05
    2d54:	0e 94 5f 1c 	call	0x38be	; 0x38be <lcd_4bit_set_cursor>
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	0e c0       	rjmp	.+28     	; 0x2d78 <lcd_4bit_send_string_pos+0x5c>
		while(*str){
			ret = lcd_4bit_send_char_data(lcd, *str++);
    2d5c:	ee 81       	ldd	r30, Y+6	; 0x06
    2d5e:	ff 81       	ldd	r31, Y+7	; 0x07
    2d60:	20 81       	ld	r18, Z
    2d62:	8e 81       	ldd	r24, Y+6	; 0x06
    2d64:	9f 81       	ldd	r25, Y+7	; 0x07
    2d66:	01 96       	adiw	r24, 0x01	; 1
    2d68:	9f 83       	std	Y+7, r25	; 0x07
    2d6a:	8e 83       	std	Y+6, r24	; 0x06
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	62 2f       	mov	r22, r18
    2d72:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <lcd_4bit_send_char_data>
    2d76:	89 83       	std	Y+1, r24	; 0x01
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_4bit_set_cursor(lcd, row, column);
		while(*str){
    2d78:	ee 81       	ldd	r30, Y+6	; 0x06
    2d7a:	ff 81       	ldd	r31, Y+7	; 0x07
    2d7c:	80 81       	ld	r24, Z
    2d7e:	88 23       	and	r24, r24
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <lcd_4bit_send_string_pos+0x40>
			ret = lcd_4bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d84:	27 96       	adiw	r28, 0x07	; 7
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	cf 91       	pop	r28
    2d92:	df 91       	pop	r29
    2d94:	08 95       	ret

00002d96 <lcd_4bit_send_custom_char>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_4bit_send_custom_char(const chr_lcd_4bit_t *lcd, uint8 row, uint8 column,
		const uint8 _chr[], uint8 mem_pos){
    2d96:	0f 93       	push	r16
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	cd b7       	in	r28, 0x3d	; 61
    2d9e:	de b7       	in	r29, 0x3e	; 62
    2da0:	29 97       	sbiw	r28, 0x09	; 9
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	9c 83       	std	Y+4, r25	; 0x04
    2dae:	8b 83       	std	Y+3, r24	; 0x03
    2db0:	6d 83       	std	Y+5, r22	; 0x05
    2db2:	4e 83       	std	Y+6, r20	; 0x06
    2db4:	38 87       	std	Y+8, r19	; 0x08
    2db6:	2f 83       	std	Y+7, r18	; 0x07
    2db8:	09 87       	std	Y+9, r16	; 0x09
	Std_ReturnType ret = E_OK;
    2dba:	1a 82       	std	Y+2, r1	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    2dbc:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	19 f4       	brne	.+6      	; 0x2dcc <lcd_4bit_send_custom_char+0x36>
		ret = E_NOK;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	8a 83       	std	Y+2, r24	; 0x02
    2dca:	30 c0       	rjmp	.+96     	; 0x2e2c <lcd_4bit_send_custom_char+0x96>
	}
	else{
		ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	08 96       	adiw	r24, 0x08	; 8
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	88 0f       	add	r24, r24
    2dde:	99 1f       	adc	r25, r25
    2de0:	28 2f       	mov	r18, r24
    2de2:	8b 81       	ldd	r24, Y+3	; 0x03
    2de4:	9c 81       	ldd	r25, Y+4	; 0x04
    2de6:	62 2f       	mov	r22, r18
    2de8:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    2dec:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    2dee:	19 82       	std	Y+1, r1	; 0x01
    2df0:	12 c0       	rjmp	.+36     	; 0x2e16 <lcd_4bit_send_custom_char+0x80>
			ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	28 2f       	mov	r18, r24
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	8f 81       	ldd	r24, Y+7	; 0x07
    2dfa:	98 85       	ldd	r25, Y+8	; 0x08
    2dfc:	fc 01       	movw	r30, r24
    2dfe:	e2 0f       	add	r30, r18
    2e00:	f3 1f       	adc	r31, r19
    2e02:	20 81       	ld	r18, Z
    2e04:	8b 81       	ldd	r24, Y+3	; 0x03
    2e06:	9c 81       	ldd	r25, Y+4	; 0x04
    2e08:	62 2f       	mov	r22, r18
    2e0a:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <lcd_4bit_send_char_data>
    2e0e:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_4bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	8f 5f       	subi	r24, 0xFF	; 255
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	88 30       	cpi	r24, 0x08	; 8
    2e1a:	58 f3       	brcs	.-42     	; 0x2df2 <lcd_4bit_send_custom_char+0x5c>
			ret = lcd_4bit_send_char_data(lcd, _chr[lcd_counter]);
		}
		ret = lcd_4bit_send_char_data_pos(lcd, row, column, mem_pos);
    2e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e20:	6d 81       	ldd	r22, Y+5	; 0x05
    2e22:	4e 81       	ldd	r20, Y+6	; 0x06
    2e24:	29 85       	ldd	r18, Y+9	; 0x09
    2e26:	0e 94 34 16 	call	0x2c68	; 0x2c68 <lcd_4bit_send_char_data_pos>
    2e2a:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e2e:	29 96       	adiw	r28, 0x09	; 9
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	0f 91       	pop	r16
    2e40:	08 95       	ret

00002e42 <lcd_4bit_clear>:

Std_ReturnType lcd_4bit_clear(const chr_lcd_4bit_t *lcd)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	00 d0       	rcall	.+0      	; 0x2e48 <lcd_4bit_clear+0x6>
    2e48:	0f 92       	push	r0
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
	lcd_4bit_send_command(lcd, _LCD_CLEAR);
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	9a 81       	ldd	r25, Y+2	; 0x02
    2e56:	61 e0       	ldi	r22, 0x01	; 1
    2e58:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>

}
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <lcd_8bit_intialize>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_intialize(const chr_lcd_8bit_t *lcd){
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	ae 97       	sbiw	r28, 0x2e	; 46
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	9e a7       	std	Y+46, r25	; 0x2e
    2e7e:	8d a7       	std	Y+45, r24	; 0x2d
	Std_ReturnType ret = E_OK;
    2e80:	1c a6       	std	Y+44, r1	; 0x2c
	uint8 l_data_pins_counter = ZERO_INIT;
    2e82:	1b a6       	std	Y+43, r1	; 0x2b
	if(NULL == lcd){
    2e84:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e86:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e88:	00 97       	sbiw	r24, 0x00	; 0
    2e8a:	19 f4       	brne	.+6      	; 0x2e92 <lcd_8bit_intialize+0x2a>
		ret = E_NOK;
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	8c a7       	std	Y+44, r24	; 0x2c
    2e90:	ae c1       	rjmp	.+860    	; 0x31ee <lcd_8bit_intialize+0x386>
	}
	else{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
    2e92:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e94:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e96:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    2e9a:	8c a7       	std	Y+44, r24	; 0x2c
		ret = gpio_pin_initialize(&(lcd->lcd_en));
    2e9c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e9e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ea0:	02 96       	adiw	r24, 0x02	; 2
    2ea2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    2ea6:	8c a7       	std	Y+44, r24	; 0x2c
		for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<8; l_data_pins_counter++){
    2ea8:	1b a6       	std	Y+43, r1	; 0x2b
    2eaa:	12 c0       	rjmp	.+36     	; 0x2ed0 <lcd_8bit_intialize+0x68>
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
    2eac:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eae:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eb0:	9c 01       	movw	r18, r24
    2eb2:	2c 5f       	subi	r18, 0xFC	; 252
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb8:	88 2f       	mov	r24, r24
    2eba:	90 e0       	ldi	r25, 0x00	; 0
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	82 0f       	add	r24, r18
    2ec2:	93 1f       	adc	r25, r19
    2ec4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <gpio_pin_initialize>
    2ec8:	8c a7       	std	Y+44, r24	; 0x2c
		ret = E_NOK;
	}
	else{
		ret = gpio_pin_initialize(&(lcd->lcd_rs));
		ret = gpio_pin_initialize(&(lcd->lcd_en));
		for(l_data_pins_counter=ZERO_INIT; l_data_pins_counter<8; l_data_pins_counter++){
    2eca:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ecc:	8f 5f       	subi	r24, 0xFF	; 255
    2ece:	8b a7       	std	Y+43, r24	; 0x2b
    2ed0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ed2:	88 30       	cpi	r24, 0x08	; 8
    2ed4:	58 f3       	brcs	.-42     	; 0x2eac <lcd_8bit_intialize+0x44>
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	a0 ea       	ldi	r26, 0xA0	; 160
    2edc:	b1 e4       	ldi	r27, 0x41	; 65
    2ede:	8f a3       	std	Y+39, r24	; 0x27
    2ee0:	98 a7       	std	Y+40, r25	; 0x28
    2ee2:	a9 a7       	std	Y+41, r26	; 0x29
    2ee4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eea:	89 a5       	ldd	r24, Y+41	; 0x29
    2eec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	4a e7       	ldi	r20, 0x7A	; 122
    2ef4:	53 e4       	ldi	r21, 0x43	; 67
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	8b a3       	std	Y+35, r24	; 0x23
    2f00:	9c a3       	std	Y+36, r25	; 0x24
    2f02:	ad a3       	std	Y+37, r26	; 0x25
    2f04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e8       	ldi	r20, 0x80	; 128
    2f14:	5f e3       	ldi	r21, 0x3F	; 63
    2f16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1a:	88 23       	and	r24, r24
    2f1c:	2c f4       	brge	.+10     	; 0x2f28 <lcd_8bit_intialize+0xc0>
		__ticks = 1;
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	9a a3       	std	Y+34, r25	; 0x22
    2f24:	89 a3       	std	Y+33, r24	; 0x21
    2f26:	3f c0       	rjmp	.+126    	; 0x2fa6 <lcd_8bit_intialize+0x13e>
	else if (__tmp > 65535)
    2f28:	6b a1       	ldd	r22, Y+35	; 0x23
    2f2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	3f ef       	ldi	r19, 0xFF	; 255
    2f34:	4f e7       	ldi	r20, 0x7F	; 127
    2f36:	57 e4       	ldi	r21, 0x47	; 71
    2f38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3c:	18 16       	cp	r1, r24
    2f3e:	4c f5       	brge	.+82     	; 0x2f92 <lcd_8bit_intialize+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f40:	6f a1       	ldd	r22, Y+39	; 0x27
    2f42:	78 a5       	ldd	r23, Y+40	; 0x28
    2f44:	89 a5       	ldd	r24, Y+41	; 0x29
    2f46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	bc 01       	movw	r22, r24
    2f5a:	cd 01       	movw	r24, r26
    2f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	9a a3       	std	Y+34, r25	; 0x22
    2f66:	89 a3       	std	Y+33, r24	; 0x21
    2f68:	0f c0       	rjmp	.+30     	; 0x2f88 <lcd_8bit_intialize+0x120>
    2f6a:	89 e1       	ldi	r24, 0x19	; 25
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	98 a3       	std	Y+32, r25	; 0x20
    2f70:	8f 8f       	std	Y+31, r24	; 0x1f
    2f72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f74:	98 a1       	ldd	r25, Y+32	; 0x20
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <lcd_8bit_intialize+0x10e>
    2f7a:	98 a3       	std	Y+32, r25	; 0x20
    2f7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f80:	9a a1       	ldd	r25, Y+34	; 0x22
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	9a a3       	std	Y+34, r25	; 0x22
    2f86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f88:	89 a1       	ldd	r24, Y+33	; 0x21
    2f8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8c:	00 97       	sbiw	r24, 0x00	; 0
    2f8e:	69 f7       	brne	.-38     	; 0x2f6a <lcd_8bit_intialize+0x102>
    2f90:	14 c0       	rjmp	.+40     	; 0x2fba <lcd_8bit_intialize+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f92:	6b a1       	ldd	r22, Y+35	; 0x23
    2f94:	7c a1       	ldd	r23, Y+36	; 0x24
    2f96:	8d a1       	ldd	r24, Y+37	; 0x25
    2f98:	9e a1       	ldd	r25, Y+38	; 0x26
    2f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	9a a3       	std	Y+34, r25	; 0x22
    2fa4:	89 a3       	std	Y+33, r24	; 0x21
    2fa6:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa8:	9a a1       	ldd	r25, Y+34	; 0x22
    2faa:	9e 8f       	std	Y+30, r25	; 0x1e
    2fac:	8d 8f       	std	Y+29, r24	; 0x1d
    2fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb2:	01 97       	sbiw	r24, 0x01	; 1
    2fb4:	f1 f7       	brne	.-4      	; 0x2fb2 <lcd_8bit_intialize+0x14a>
    2fb6:	9e 8f       	std	Y+30, r25	; 0x1e
    2fb8:	8d 8f       	std	Y+29, r24	; 0x1d
			ret = gpio_pin_initialize(&(lcd->lcd_data[l_data_pins_counter]));
		}
		Delay_ms(20);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    2fba:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fbc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fbe:	68 e3       	ldi	r22, 0x38	; 56
    2fc0:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    2fc4:	8c a7       	std	Y+44, r24	; 0x2c
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a0 ea       	ldi	r26, 0xA0	; 160
    2fcc:	b0 e4       	ldi	r27, 0x40	; 64
    2fce:	89 8f       	std	Y+25, r24	; 0x19
    2fd0:	9a 8f       	std	Y+26, r25	; 0x1a
    2fd2:	ab 8f       	std	Y+27, r26	; 0x1b
    2fd4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a e7       	ldi	r20, 0x7A	; 122
    2fe4:	53 e4       	ldi	r21, 0x43	; 67
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8d 8b       	std	Y+21, r24	; 0x15
    2ff0:	9e 8b       	std	Y+22, r25	; 0x16
    2ff2:	af 8b       	std	Y+23, r26	; 0x17
    2ff4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    2ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	2c f4       	brge	.+10     	; 0x3018 <lcd_8bit_intialize+0x1b0>
		__ticks = 1;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9c 8b       	std	Y+20, r25	; 0x14
    3014:	8b 8b       	std	Y+19, r24	; 0x13
    3016:	3f c0       	rjmp	.+126    	; 0x3096 <lcd_8bit_intialize+0x22e>
	else if (__tmp > 65535)
    3018:	6d 89       	ldd	r22, Y+21	; 0x15
    301a:	7e 89       	ldd	r23, Y+22	; 0x16
    301c:	8f 89       	ldd	r24, Y+23	; 0x17
    301e:	98 8d       	ldd	r25, Y+24	; 0x18
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	4c f5       	brge	.+82     	; 0x3082 <lcd_8bit_intialize+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	69 8d       	ldd	r22, Y+25	; 0x19
    3032:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3034:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3036:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9c 8b       	std	Y+20, r25	; 0x14
    3056:	8b 8b       	std	Y+19, r24	; 0x13
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <lcd_8bit_intialize+0x210>
    305a:	89 e1       	ldi	r24, 0x19	; 25
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	9a 8b       	std	Y+18, r25	; 0x12
    3060:	89 8b       	std	Y+17, r24	; 0x11
    3062:	89 89       	ldd	r24, Y+17	; 0x11
    3064:	9a 89       	ldd	r25, Y+18	; 0x12
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <lcd_8bit_intialize+0x1fe>
    306a:	9a 8b       	std	Y+18, r25	; 0x12
    306c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	8b 89       	ldd	r24, Y+19	; 0x13
    3070:	9c 89       	ldd	r25, Y+20	; 0x14
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9c 8b       	std	Y+20, r25	; 0x14
    3076:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	8b 89       	ldd	r24, Y+19	; 0x13
    307a:	9c 89       	ldd	r25, Y+20	; 0x14
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <lcd_8bit_intialize+0x1f2>
    3080:	14 c0       	rjmp	.+40     	; 0x30aa <lcd_8bit_intialize+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6d 89       	ldd	r22, Y+21	; 0x15
    3084:	7e 89       	ldd	r23, Y+22	; 0x16
    3086:	8f 89       	ldd	r24, Y+23	; 0x17
    3088:	98 8d       	ldd	r25, Y+24	; 0x18
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9c 8b       	std	Y+20, r25	; 0x14
    3094:	8b 8b       	std	Y+19, r24	; 0x13
    3096:	8b 89       	ldd	r24, Y+19	; 0x13
    3098:	9c 89       	ldd	r25, Y+20	; 0x14
    309a:	98 8b       	std	Y+16, r25	; 0x10
    309c:	8f 87       	std	Y+15, r24	; 0x0f
    309e:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a0:	98 89       	ldd	r25, Y+16	; 0x10
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <lcd_8bit_intialize+0x23a>
    30a6:	98 8b       	std	Y+16, r25	; 0x10
    30a8:	8f 87       	std	Y+15, r24	; 0x0f
		Delay_ms(5);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    30aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    30ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    30ae:	68 e3       	ldi	r22, 0x38	; 56
    30b0:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    30b4:	8c a7       	std	Y+44, r24	; 0x2c
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	a6 e1       	ldi	r26, 0x16	; 22
    30bc:	b3 e4       	ldi	r27, 0x43	; 67
    30be:	8b 87       	std	Y+11, r24	; 0x0b
    30c0:	9c 87       	std	Y+12, r25	; 0x0c
    30c2:	ad 87       	std	Y+13, r26	; 0x0d
    30c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    30cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a e7       	ldi	r20, 0x7A	; 122
    30d4:	53 e4       	ldi	r21, 0x43	; 67
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8f 83       	std	Y+7, r24	; 0x07
    30e0:	98 87       	std	Y+8, r25	; 0x08
    30e2:	a9 87       	std	Y+9, r26	; 0x09
    30e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e6:	6f 81       	ldd	r22, Y+7	; 0x07
    30e8:	78 85       	ldd	r23, Y+8	; 0x08
    30ea:	89 85       	ldd	r24, Y+9	; 0x09
    30ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <lcd_8bit_intialize+0x2a0>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9e 83       	std	Y+6, r25	; 0x06
    3104:	8d 83       	std	Y+5, r24	; 0x05
    3106:	3f c0       	rjmp	.+126    	; 0x3186 <lcd_8bit_intialize+0x31e>
	else if (__tmp > 65535)
    3108:	6f 81       	ldd	r22, Y+7	; 0x07
    310a:	78 85       	ldd	r23, Y+8	; 0x08
    310c:	89 85       	ldd	r24, Y+9	; 0x09
    310e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	4c f5       	brge	.+82     	; 0x3172 <lcd_8bit_intialize+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3120:	6b 85       	ldd	r22, Y+11	; 0x0b
    3122:	7c 85       	ldd	r23, Y+12	; 0x0c
    3124:	8d 85       	ldd	r24, Y+13	; 0x0d
    3126:	9e 85       	ldd	r25, Y+14	; 0x0e
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	8d 83       	std	Y+5, r24	; 0x05
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <lcd_8bit_intialize+0x300>
    314a:	89 e1       	ldi	r24, 0x19	; 25
    314c:	90 e0       	ldi	r25, 0x00	; 0
    314e:	9c 83       	std	Y+4, r25	; 0x04
    3150:	8b 83       	std	Y+3, r24	; 0x03
    3152:	8b 81       	ldd	r24, Y+3	; 0x03
    3154:	9c 81       	ldd	r25, Y+4	; 0x04
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <lcd_8bit_intialize+0x2ee>
    315a:	9c 83       	std	Y+4, r25	; 0x04
    315c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	8d 81       	ldd	r24, Y+5	; 0x05
    3160:	9e 81       	ldd	r25, Y+6	; 0x06
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	8d 81       	ldd	r24, Y+5	; 0x05
    316a:	9e 81       	ldd	r25, Y+6	; 0x06
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <lcd_8bit_intialize+0x2e2>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <lcd_8bit_intialize+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	6f 81       	ldd	r22, Y+7	; 0x07
    3174:	78 85       	ldd	r23, Y+8	; 0x08
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
    3186:	8d 81       	ldd	r24, Y+5	; 0x05
    3188:	9e 81       	ldd	r25, Y+6	; 0x06
    318a:	9a 83       	std	Y+2, r25	; 0x02
    318c:	89 83       	std	Y+1, r24	; 0x01
    318e:	89 81       	ldd	r24, Y+1	; 0x01
    3190:	9a 81       	ldd	r25, Y+2	; 0x02
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <lcd_8bit_intialize+0x32a>
    3196:	9a 83       	std	Y+2, r25	; 0x02
    3198:	89 83       	std	Y+1, r24	; 0x01
		Delay_ms(150);
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    319a:	8d a5       	ldd	r24, Y+45	; 0x2d
    319c:	9e a5       	ldd	r25, Y+46	; 0x2e
    319e:	68 e3       	ldi	r22, 0x38	; 56
    31a0:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31a4:	8c a7       	std	Y+44, r24	; 0x2c

		ret = lcd_8bit_send_command(lcd, _LCD_CLEAR);
    31a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    31a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    31aa:	61 e0       	ldi	r22, 0x01	; 1
    31ac:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31b0:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_RETURN_HOME);
    31b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b6:	62 e0       	ldi	r22, 0x02	; 2
    31b8:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31bc:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_ENTRY_MODE_INC_SHIFT_OFF);
    31be:	8d a5       	ldd	r24, Y+45	; 0x2d
    31c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    31c2:	66 e0       	ldi	r22, 0x06	; 6
    31c4:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31c8:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_DISPLAY_ON_UNDERLINE_OFF_CURSOR_OFF);
    31ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    31cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    31ce:	6c e0       	ldi	r22, 0x0C	; 12
    31d0:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31d4:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, _LCD_8BIT_MODE_2_LINE);
    31d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    31d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    31da:	68 e3       	ldi	r22, 0x38	; 56
    31dc:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31e0:	8c a7       	std	Y+44, r24	; 0x2c
		ret = lcd_8bit_send_command(lcd, 0x80);
    31e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31e6:	60 e8       	ldi	r22, 0x80	; 128
    31e8:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    31ec:	8c a7       	std	Y+44, r24	; 0x2c
	}
	return ret;
    31ee:	8c a5       	ldd	r24, Y+44	; 0x2c
}
    31f0:	ae 96       	adiw	r28, 0x2e	; 46
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	f8 94       	cli
    31f6:	de bf       	out	0x3e, r29	; 62
    31f8:	0f be       	out	0x3f, r0	; 63
    31fa:	cd bf       	out	0x3d, r28	; 61
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	08 95       	ret

00003202 <lcd_8bit_send_command>:
 * @param command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_command(const chr_lcd_8bit_t *lcd, uint8 command){
    3202:	df 93       	push	r29
    3204:	cf 93       	push	r28
    3206:	00 d0       	rcall	.+0      	; 0x3208 <lcd_8bit_send_command+0x6>
    3208:	00 d0       	rcall	.+0      	; 0x320a <lcd_8bit_send_command+0x8>
    320a:	0f 92       	push	r0
    320c:	cd b7       	in	r28, 0x3d	; 61
    320e:	de b7       	in	r29, 0x3e	; 62
    3210:	9c 83       	std	Y+4, r25	; 0x04
    3212:	8b 83       	std	Y+3, r24	; 0x03
    3214:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    3216:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_pin_counter = ZERO_INIT;
    3218:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	19 f4       	brne	.+6      	; 0x3228 <lcd_8bit_send_command+0x26>
		ret = E_NOK;
    3222:	81 e0       	ldi	r24, 0x01	; 1
    3224:	8a 83       	std	Y+2, r24	; 0x02
    3226:	34 c0       	rjmp	.+104    	; 0x3290 <lcd_8bit_send_command+0x8e>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
    3228:	8b 81       	ldd	r24, Y+3	; 0x03
    322a:	9c 81       	ldd	r25, Y+4	; 0x04
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    3232:	8a 83       	std	Y+2, r24	; 0x02
		/* Send the Command through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    3234:	19 82       	std	Y+1, r1	; 0x01
    3236:	24 c0       	rjmp	.+72     	; 0x3280 <lcd_8bit_send_command+0x7e>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	9c 81       	ldd	r25, Y+4	; 0x04
    323c:	9c 01       	movw	r18, r24
    323e:	2c 5f       	subi	r18, 0xFC	; 252
    3240:	3f 4f       	sbci	r19, 0xFF	; 255
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	88 2f       	mov	r24, r24
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	88 0f       	add	r24, r24
    324a:	99 1f       	adc	r25, r25
    324c:	a9 01       	movw	r20, r18
    324e:	48 0f       	add	r20, r24
    3250:	59 1f       	adc	r21, r25
    3252:	8d 81       	ldd	r24, Y+5	; 0x05
    3254:	28 2f       	mov	r18, r24
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	b9 01       	movw	r22, r18
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <lcd_8bit_send_command+0x64>
    3262:	75 95       	asr	r23
    3264:	67 95       	ror	r22
    3266:	8a 95       	dec	r24
    3268:	e2 f7       	brpl	.-8      	; 0x3262 <lcd_8bit_send_command+0x60>
    326a:	cb 01       	movw	r24, r22
    326c:	28 2f       	mov	r18, r24
    326e:	21 70       	andi	r18, 0x01	; 1
    3270:	ca 01       	movw	r24, r20
    3272:	62 2f       	mov	r22, r18
    3274:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    3278:	8a 83       	std	Y+2, r24	; 0x02
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (0) to the "Register Select" Pin to select the "Instruction Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), LOW);
		/* Send the Command through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	8f 5f       	subi	r24, 0xFF	; 255
    327e:	89 83       	std	Y+1, r24	; 0x01
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	88 30       	cpi	r24, 0x08	; 8
    3284:	c8 f2       	brcs	.-78     	; 0x3238 <lcd_8bit_send_command+0x36>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (command >> l_pin_counter) & (uint8)0x01);
		}
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_8bit_send_enable_signal(lcd);
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	9c 81       	ldd	r25, Y+4	; 0x04
    328a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <lcd_8bit_send_enable_signal>
    328e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <lcd_8bit_send_char_data>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_char_data(const chr_lcd_8bit_t *lcd, uint8 data){
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <lcd_8bit_send_char_data+0x6>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <lcd_8bit_send_char_data+0x8>
    32aa:	0f 92       	push	r0
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
    32b0:	9c 83       	std	Y+4, r25	; 0x04
    32b2:	8b 83       	std	Y+3, r24	; 0x03
    32b4:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_OK;
    32b6:	1a 82       	std	Y+2, r1	; 0x02
	uint8 l_pin_counter = ZERO_INIT;
    32b8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	00 97       	sbiw	r24, 0x00	; 0
    32c0:	19 f4       	brne	.+6      	; 0x32c8 <lcd_8bit_send_char_data+0x26>
		ret = E_NOK;
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	8a 83       	std	Y+2, r24	; 0x02
    32c6:	34 c0       	rjmp	.+104    	; 0x3330 <lcd_8bit_send_char_data+0x8e>
	}
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
    32c8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ca:	9c 81       	ldd	r25, Y+4	; 0x04
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    32d2:	8a 83       	std	Y+2, r24	; 0x02
		/* Send the Data through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    32d4:	19 82       	std	Y+1, r1	; 0x01
    32d6:	24 c0       	rjmp	.+72     	; 0x3320 <lcd_8bit_send_char_data+0x7e>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
    32d8:	8b 81       	ldd	r24, Y+3	; 0x03
    32da:	9c 81       	ldd	r25, Y+4	; 0x04
    32dc:	9c 01       	movw	r18, r24
    32de:	2c 5f       	subi	r18, 0xFC	; 252
    32e0:	3f 4f       	sbci	r19, 0xFF	; 255
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	88 2f       	mov	r24, r24
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	a9 01       	movw	r20, r18
    32ee:	48 0f       	add	r20, r24
    32f0:	59 1f       	adc	r21, r25
    32f2:	8d 81       	ldd	r24, Y+5	; 0x05
    32f4:	28 2f       	mov	r18, r24
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	88 2f       	mov	r24, r24
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	b9 01       	movw	r22, r18
    3300:	02 c0       	rjmp	.+4      	; 0x3306 <lcd_8bit_send_char_data+0x64>
    3302:	75 95       	asr	r23
    3304:	67 95       	ror	r22
    3306:	8a 95       	dec	r24
    3308:	e2 f7       	brpl	.-8      	; 0x3302 <lcd_8bit_send_char_data+0x60>
    330a:	cb 01       	movw	r24, r22
    330c:	28 2f       	mov	r18, r24
    330e:	21 70       	andi	r18, 0x01	; 1
    3310:	ca 01       	movw	r24, r20
    3312:	62 2f       	mov	r22, r18
    3314:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    3318:	8a 83       	std	Y+2, r24	; 0x02
	else{
		/* R/W Pin connected to the GND -> Logic (0) "Hard Wired" */
		/* Write Logic (1) to the "Register Select" Pin to select the "Data Register"  */
		ret = gpio_pin_write_logic(&(lcd->lcd_rs), HIGH);
		/* Send the Data through the (8-Pins" Data lines */
		for(l_pin_counter=0; l_pin_counter<8; ++l_pin_counter){
    331a:	89 81       	ldd	r24, Y+1	; 0x01
    331c:	8f 5f       	subi	r24, 0xFF	; 255
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	89 81       	ldd	r24, Y+1	; 0x01
    3322:	88 30       	cpi	r24, 0x08	; 8
    3324:	c8 f2       	brcs	.-78     	; 0x32d8 <lcd_8bit_send_char_data+0x36>
			ret = gpio_pin_write_logic(&(lcd->lcd_data[l_pin_counter]), (data >> l_pin_counter) & (uint8)0x01);
		}
		/* Send the Enable Signal on the "E" Pin */
		ret = lcd_8bit_send_enable_signal(lcd);
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <lcd_8bit_send_enable_signal>
    332e:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    3330:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <lcd_8bit_send_char_data_pos>:
 * @param data
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_char_data_pos(const chr_lcd_8bit_t *lcd,uint8 row, uint8 column, uint8 data){
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <lcd_8bit_send_char_data_pos+0x6>
    3348:	00 d0       	rcall	.+0      	; 0x334a <lcd_8bit_send_char_data_pos+0x8>
    334a:	00 d0       	rcall	.+0      	; 0x334c <lcd_8bit_send_char_data_pos+0xa>
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	9b 83       	std	Y+3, r25	; 0x03
    3352:	8a 83       	std	Y+2, r24	; 0x02
    3354:	6c 83       	std	Y+4, r22	; 0x04
    3356:	4d 83       	std	Y+5, r20	; 0x05
    3358:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    335a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	00 97       	sbiw	r24, 0x00	; 0
    3362:	19 f4       	brne	.+6      	; 0x336a <lcd_8bit_send_char_data_pos+0x28>
		ret = E_NOK;
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	0d c0       	rjmp	.+26     	; 0x3384 <lcd_8bit_send_char_data_pos+0x42>
	}
	else{
		ret = lcd_8bit_set_cursor(lcd, row, column);
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	6c 81       	ldd	r22, Y+4	; 0x04
    3370:	4d 81       	ldd	r20, Y+5	; 0x05
    3372:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <lcd_8bit_set_cursor>
    3376:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_8bit_send_char_data(lcd, data);
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	6e 81       	ldd	r22, Y+6	; 0x06
    337e:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_8bit_send_char_data>
    3382:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3384:	89 81       	ldd	r24, Y+1	; 0x01
}
    3386:	26 96       	adiw	r28, 0x06	; 6
    3388:	0f b6       	in	r0, 0x3f	; 63
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <lcd_8bit_send_string>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_string(const chr_lcd_8bit_t *lcd, uint8 *str){
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	00 d0       	rcall	.+0      	; 0x339e <lcd_8bit_send_string+0x6>
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <lcd_8bit_send_string+0x8>
    33a0:	0f 92       	push	r0
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	9b 83       	std	Y+3, r25	; 0x03
    33a8:	8a 83       	std	Y+2, r24	; 0x02
    33aa:	7d 83       	std	Y+5, r23	; 0x05
    33ac:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    33ae:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	9b 81       	ldd	r25, Y+3	; 0x03
    33b4:	00 97       	sbiw	r24, 0x00	; 0
    33b6:	89 f4       	brne	.+34     	; 0x33da <lcd_8bit_send_string+0x42>
		ret = E_NOK;
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	89 83       	std	Y+1, r24	; 0x01
    33bc:	13 c0       	rjmp	.+38     	; 0x33e4 <lcd_8bit_send_string+0x4c>
	}
	else{
		while(*str){
			ret = lcd_8bit_send_char_data(lcd, *str++);
    33be:	ec 81       	ldd	r30, Y+4	; 0x04
    33c0:	fd 81       	ldd	r31, Y+5	; 0x05
    33c2:	20 81       	ld	r18, Z
    33c4:	8c 81       	ldd	r24, Y+4	; 0x04
    33c6:	9d 81       	ldd	r25, Y+5	; 0x05
    33c8:	01 96       	adiw	r24, 0x01	; 1
    33ca:	9d 83       	std	Y+5, r25	; 0x05
    33cc:	8c 83       	std	Y+4, r24	; 0x04
    33ce:	8a 81       	ldd	r24, Y+2	; 0x02
    33d0:	9b 81       	ldd	r25, Y+3	; 0x03
    33d2:	62 2f       	mov	r22, r18
    33d4:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_8bit_send_char_data>
    33d8:	89 83       	std	Y+1, r24	; 0x01
	Std_ReturnType ret = E_OK;
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		while(*str){
    33da:	ec 81       	ldd	r30, Y+4	; 0x04
    33dc:	fd 81       	ldd	r31, Y+5	; 0x05
    33de:	80 81       	ld	r24, Z
    33e0:	88 23       	and	r24, r24
    33e2:	69 f7       	brne	.-38     	; 0x33be <lcd_8bit_send_string+0x26>
			ret = lcd_8bit_send_char_data(lcd, *str++);
		}
	}
	return ret;
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	0f 90       	pop	r0
    33ee:	0f 90       	pop	r0
    33f0:	cf 91       	pop	r28
    33f2:	df 91       	pop	r29
    33f4:	08 95       	ret

000033f6 <lcd_8bit_send_string_pos>:
 * @param str
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_string_pos(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column, uint8 *str){
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	27 97       	sbiw	r28, 0x07	; 7
    3400:	0f b6       	in	r0, 0x3f	; 63
    3402:	f8 94       	cli
    3404:	de bf       	out	0x3e, r29	; 62
    3406:	0f be       	out	0x3f, r0	; 63
    3408:	cd bf       	out	0x3d, r28	; 61
    340a:	9b 83       	std	Y+3, r25	; 0x03
    340c:	8a 83       	std	Y+2, r24	; 0x02
    340e:	6c 83       	std	Y+4, r22	; 0x04
    3410:	4d 83       	std	Y+5, r20	; 0x05
    3412:	3f 83       	std	Y+7, r19	; 0x07
    3414:	2e 83       	std	Y+6, r18	; 0x06
	Std_ReturnType ret = E_OK;
    3416:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    3418:	8a 81       	ldd	r24, Y+2	; 0x02
    341a:	9b 81       	ldd	r25, Y+3	; 0x03
    341c:	00 97       	sbiw	r24, 0x00	; 0
    341e:	19 f4       	brne	.+6      	; 0x3426 <lcd_8bit_send_string_pos+0x30>
		ret = E_NOK;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	89 83       	std	Y+1, r24	; 0x01
    3424:	0f c0       	rjmp	.+30     	; 0x3444 <lcd_8bit_send_string_pos+0x4e>
	}
	else{
		ret = lcd_8bit_set_cursor(lcd, row, column);
    3426:	8a 81       	ldd	r24, Y+2	; 0x02
    3428:	9b 81       	ldd	r25, Y+3	; 0x03
    342a:	6c 81       	ldd	r22, Y+4	; 0x04
    342c:	4d 81       	ldd	r20, Y+5	; 0x05
    342e:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <lcd_8bit_set_cursor>
    3432:	89 83       	std	Y+1, r24	; 0x01
		ret = lcd_8bit_send_string(lcd, str);
    3434:	8a 81       	ldd	r24, Y+2	; 0x02
    3436:	9b 81       	ldd	r25, Y+3	; 0x03
    3438:	2e 81       	ldd	r18, Y+6	; 0x06
    343a:	3f 81       	ldd	r19, Y+7	; 0x07
    343c:	b9 01       	movw	r22, r18
    343e:	0e 94 cc 19 	call	0x3398	; 0x3398 <lcd_8bit_send_string>
    3442:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    3444:	89 81       	ldd	r24, Y+1	; 0x01
}
    3446:	27 96       	adiw	r28, 0x07	; 7
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <lcd_8bit_send_custom_char>:
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
Std_ReturnType lcd_8bit_send_custom_char(const chr_lcd_8bit_t *lcd, uint8 row, uint8 column,
		const uint8 _chr[], uint8 mem_pos){
    3458:	0f 93       	push	r16
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	29 97       	sbiw	r28, 0x09	; 9
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	9c 83       	std	Y+4, r25	; 0x04
    3470:	8b 83       	std	Y+3, r24	; 0x03
    3472:	6d 83       	std	Y+5, r22	; 0x05
    3474:	4e 83       	std	Y+6, r20	; 0x06
    3476:	38 87       	std	Y+8, r19	; 0x08
    3478:	2f 83       	std	Y+7, r18	; 0x07
    347a:	09 87       	std	Y+9, r16	; 0x09
	Std_ReturnType ret = E_OK;
    347c:	1a 82       	std	Y+2, r1	; 0x02
	uint8 lcd_counter = ZERO_INIT;
    347e:	19 82       	std	Y+1, r1	; 0x01
	if(NULL == lcd){
    3480:	8b 81       	ldd	r24, Y+3	; 0x03
    3482:	9c 81       	ldd	r25, Y+4	; 0x04
    3484:	00 97       	sbiw	r24, 0x00	; 0
    3486:	19 f4       	brne	.+6      	; 0x348e <lcd_8bit_send_custom_char+0x36>
		ret = E_NOK;
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	8a 83       	std	Y+2, r24	; 0x02
    348c:	30 c0       	rjmp	.+96     	; 0x34ee <lcd_8bit_send_custom_char+0x96>
	}
	else{
		ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	88 2f       	mov	r24, r24
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	08 96       	adiw	r24, 0x08	; 8
    3496:	88 0f       	add	r24, r24
    3498:	99 1f       	adc	r25, r25
    349a:	88 0f       	add	r24, r24
    349c:	99 1f       	adc	r25, r25
    349e:	88 0f       	add	r24, r24
    34a0:	99 1f       	adc	r25, r25
    34a2:	28 2f       	mov	r18, r24
    34a4:	8b 81       	ldd	r24, Y+3	; 0x03
    34a6:	9c 81       	ldd	r25, Y+4	; 0x04
    34a8:	62 2f       	mov	r22, r18
    34aa:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    34ae:	8a 83       	std	Y+2, r24	; 0x02
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    34b0:	19 82       	std	Y+1, r1	; 0x01
    34b2:	12 c0       	rjmp	.+36     	; 0x34d8 <lcd_8bit_send_custom_char+0x80>
			ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
    34b4:	89 81       	ldd	r24, Y+1	; 0x01
    34b6:	28 2f       	mov	r18, r24
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	8f 81       	ldd	r24, Y+7	; 0x07
    34bc:	98 85       	ldd	r25, Y+8	; 0x08
    34be:	fc 01       	movw	r30, r24
    34c0:	e2 0f       	add	r30, r18
    34c2:	f3 1f       	adc	r31, r19
    34c4:	20 81       	ld	r18, Z
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	9c 81       	ldd	r25, Y+4	; 0x04
    34ca:	62 2f       	mov	r22, r18
    34cc:	0e 94 51 19 	call	0x32a2	; 0x32a2 <lcd_8bit_send_char_data>
    34d0:	8a 83       	std	Y+2, r24	; 0x02
	if(NULL == lcd){
		ret = E_NOK;
	}
	else{
		ret = lcd_8bit_send_command(lcd, (_LCD_CGRAM_START+(mem_pos*8)));
		for(lcd_counter=0; lcd_counter<=7; ++lcd_counter){
    34d2:	89 81       	ldd	r24, Y+1	; 0x01
    34d4:	8f 5f       	subi	r24, 0xFF	; 255
    34d6:	89 83       	std	Y+1, r24	; 0x01
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	88 30       	cpi	r24, 0x08	; 8
    34dc:	58 f3       	brcs	.-42     	; 0x34b4 <lcd_8bit_send_custom_char+0x5c>
			ret = lcd_8bit_send_char_data(lcd, _chr[lcd_counter]);
		}
		ret = lcd_8bit_send_char_data_pos(lcd, row, column, mem_pos);
    34de:	8b 81       	ldd	r24, Y+3	; 0x03
    34e0:	9c 81       	ldd	r25, Y+4	; 0x04
    34e2:	6d 81       	ldd	r22, Y+5	; 0x05
    34e4:	4e 81       	ldd	r20, Y+6	; 0x06
    34e6:	29 85       	ldd	r18, Y+9	; 0x09
    34e8:	0e 94 a1 19 	call	0x3342	; 0x3342 <lcd_8bit_send_char_data_pos>
    34ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    34f0:	29 96       	adiw	r28, 0x09	; 9
    34f2:	0f b6       	in	r0, 0x3f	; 63
    34f4:	f8 94       	cli
    34f6:	de bf       	out	0x3e, r29	; 62
    34f8:	0f be       	out	0x3f, r0	; 63
    34fa:	cd bf       	out	0x3d, r28	; 61
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	0f 91       	pop	r16
    3502:	08 95       	ret

00003504 <lcd_send_4bits>:
 * @param _data_command
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_send_4bits(const chr_lcd_4bit_t *lcd, uint8 _data_command){
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	00 d0       	rcall	.+0      	; 0x350a <lcd_send_4bits+0x6>
    350a:	00 d0       	rcall	.+0      	; 0x350c <lcd_send_4bits+0x8>
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	9b 83       	std	Y+3, r25	; 0x03
    3512:	8a 83       	std	Y+2, r24	; 0x02
    3514:	6c 83       	std	Y+4, r22	; 0x04
	Std_ReturnType ret = E_OK;
    3516:	19 82       	std	Y+1, r1	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[0]), (_data_command >> 0) & (uint8)0x01);
    3518:	8a 81       	ldd	r24, Y+2	; 0x02
    351a:	9b 81       	ldd	r25, Y+3	; 0x03
    351c:	9c 01       	movw	r18, r24
    351e:	2c 5f       	subi	r18, 0xFC	; 252
    3520:	3f 4f       	sbci	r19, 0xFF	; 255
    3522:	8c 81       	ldd	r24, Y+4	; 0x04
    3524:	48 2f       	mov	r20, r24
    3526:	41 70       	andi	r20, 0x01	; 1
    3528:	c9 01       	movw	r24, r18
    352a:	64 2f       	mov	r22, r20
    352c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    3530:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[1]), (_data_command >> 1) & (uint8)0x01);
    3532:	8a 81       	ldd	r24, Y+2	; 0x02
    3534:	9b 81       	ldd	r25, Y+3	; 0x03
    3536:	9c 01       	movw	r18, r24
    3538:	2a 5f       	subi	r18, 0xFA	; 250
    353a:	3f 4f       	sbci	r19, 0xFF	; 255
    353c:	8c 81       	ldd	r24, Y+4	; 0x04
    353e:	86 95       	lsr	r24
    3540:	48 2f       	mov	r20, r24
    3542:	41 70       	andi	r20, 0x01	; 1
    3544:	c9 01       	movw	r24, r18
    3546:	64 2f       	mov	r22, r20
    3548:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    354c:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[2]), (_data_command >> 2) & (uint8)0x01);
    354e:	8a 81       	ldd	r24, Y+2	; 0x02
    3550:	9b 81       	ldd	r25, Y+3	; 0x03
    3552:	9c 01       	movw	r18, r24
    3554:	28 5f       	subi	r18, 0xF8	; 248
    3556:	3f 4f       	sbci	r19, 0xFF	; 255
    3558:	8c 81       	ldd	r24, Y+4	; 0x04
    355a:	86 95       	lsr	r24
    355c:	86 95       	lsr	r24
    355e:	48 2f       	mov	r20, r24
    3560:	41 70       	andi	r20, 0x01	; 1
    3562:	c9 01       	movw	r24, r18
    3564:	64 2f       	mov	r22, r20
    3566:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    356a:	89 83       	std	Y+1, r24	; 0x01
	ret = gpio_pin_write_logic(&(lcd->lcd_data[3]), (_data_command >> 3) & (uint8)0x01);
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	9c 01       	movw	r18, r24
    3572:	26 5f       	subi	r18, 0xF6	; 246
    3574:	3f 4f       	sbci	r19, 0xFF	; 255
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	86 95       	lsr	r24
    357a:	86 95       	lsr	r24
    357c:	86 95       	lsr	r24
    357e:	48 2f       	mov	r20, r24
    3580:	41 70       	andi	r20, 0x01	; 1
    3582:	c9 01       	movw	r24, r18
    3584:	64 2f       	mov	r22, r20
    3586:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    358a:	89 83       	std	Y+1, r24	; 0x01
	return ret;
    358c:	89 81       	ldd	r24, Y+1	; 0x01
}
    358e:	0f 90       	pop	r0
    3590:	0f 90       	pop	r0
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	cf 91       	pop	r28
    3598:	df 91       	pop	r29
    359a:	08 95       	ret

0000359c <lcd_4bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_send_enable_signal(const chr_lcd_4bit_t *lcd){
    359c:	df 93       	push	r29
    359e:	cf 93       	push	r28
    35a0:	cd b7       	in	r28, 0x3d	; 61
    35a2:	de b7       	in	r29, 0x3e	; 62
    35a4:	61 97       	sbiw	r28, 0x11	; 17
    35a6:	0f b6       	in	r0, 0x3f	; 63
    35a8:	f8 94       	cli
    35aa:	de bf       	out	0x3e, r29	; 62
    35ac:	0f be       	out	0x3f, r0	; 63
    35ae:	cd bf       	out	0x3d, r28	; 61
    35b0:	99 8b       	std	Y+17, r25	; 0x11
    35b2:	88 8b       	std	Y+16, r24	; 0x10
	Std_ReturnType ret = E_OK;
    35b4:	1f 86       	std	Y+15, r1	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en), HIGH);
    35b6:	88 89       	ldd	r24, Y+16	; 0x10
    35b8:	99 89       	ldd	r25, Y+17	; 0x11
    35ba:	02 96       	adiw	r24, 0x02	; 2
    35bc:	61 e0       	ldi	r22, 0x01	; 1
    35be:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    35c2:	8f 87       	std	Y+15, r24	; 0x0f
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	a0 ea       	ldi	r26, 0xA0	; 160
    35ca:	b0 e4       	ldi	r27, 0x40	; 64
    35cc:	8b 87       	std	Y+11, r24	; 0x0b
    35ce:	9c 87       	std	Y+12, r25	; 0x0c
    35d0:	ad 87       	std	Y+13, r26	; 0x0d
    35d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    35da:	9e 85       	ldd	r25, Y+14	; 0x0e
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4a e7       	ldi	r20, 0x7A	; 122
    35e2:	53 e4       	ldi	r21, 0x43	; 67
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	8f 83       	std	Y+7, r24	; 0x07
    35ee:	98 87       	std	Y+8, r25	; 0x08
    35f0:	a9 87       	std	Y+9, r26	; 0x09
    35f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f4:	6f 81       	ldd	r22, Y+7	; 0x07
    35f6:	78 85       	ldd	r23, Y+8	; 0x08
    35f8:	89 85       	ldd	r24, Y+9	; 0x09
    35fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	40 e8       	ldi	r20, 0x80	; 128
    3602:	5f e3       	ldi	r21, 0x3F	; 63
    3604:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3608:	88 23       	and	r24, r24
    360a:	2c f4       	brge	.+10     	; 0x3616 <lcd_4bit_send_enable_signal+0x7a>
		__ticks = 1;
    360c:	81 e0       	ldi	r24, 0x01	; 1
    360e:	90 e0       	ldi	r25, 0x00	; 0
    3610:	9e 83       	std	Y+6, r25	; 0x06
    3612:	8d 83       	std	Y+5, r24	; 0x05
    3614:	3f c0       	rjmp	.+126    	; 0x3694 <lcd_4bit_send_enable_signal+0xf8>
	else if (__tmp > 65535)
    3616:	6f 81       	ldd	r22, Y+7	; 0x07
    3618:	78 85       	ldd	r23, Y+8	; 0x08
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	3f ef       	ldi	r19, 0xFF	; 255
    3622:	4f e7       	ldi	r20, 0x7F	; 127
    3624:	57 e4       	ldi	r21, 0x47	; 71
    3626:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    362a:	18 16       	cp	r1, r24
    362c:	4c f5       	brge	.+82     	; 0x3680 <lcd_4bit_send_enable_signal+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3630:	7c 85       	ldd	r23, Y+12	; 0x0c
    3632:	8d 85       	ldd	r24, Y+13	; 0x0d
    3634:	9e 85       	ldd	r25, Y+14	; 0x0e
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e2       	ldi	r20, 0x20	; 32
    363c:	51 e4       	ldi	r21, 0x41	; 65
    363e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	bc 01       	movw	r22, r24
    3648:	cd 01       	movw	r24, r26
    364a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364e:	dc 01       	movw	r26, r24
    3650:	cb 01       	movw	r24, r22
    3652:	9e 83       	std	Y+6, r25	; 0x06
    3654:	8d 83       	std	Y+5, r24	; 0x05
    3656:	0f c0       	rjmp	.+30     	; 0x3676 <lcd_4bit_send_enable_signal+0xda>
    3658:	89 e1       	ldi	r24, 0x19	; 25
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	9c 83       	std	Y+4, r25	; 0x04
    365e:	8b 83       	std	Y+3, r24	; 0x03
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	f1 f7       	brne	.-4      	; 0x3664 <lcd_4bit_send_enable_signal+0xc8>
    3668:	9c 83       	std	Y+4, r25	; 0x04
    366a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366c:	8d 81       	ldd	r24, Y+5	; 0x05
    366e:	9e 81       	ldd	r25, Y+6	; 0x06
    3670:	01 97       	sbiw	r24, 0x01	; 1
    3672:	9e 83       	std	Y+6, r25	; 0x06
    3674:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3676:	8d 81       	ldd	r24, Y+5	; 0x05
    3678:	9e 81       	ldd	r25, Y+6	; 0x06
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	69 f7       	brne	.-38     	; 0x3658 <lcd_4bit_send_enable_signal+0xbc>
    367e:	14 c0       	rjmp	.+40     	; 0x36a8 <lcd_4bit_send_enable_signal+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3680:	6f 81       	ldd	r22, Y+7	; 0x07
    3682:	78 85       	ldd	r23, Y+8	; 0x08
    3684:	89 85       	ldd	r24, Y+9	; 0x09
    3686:	9a 85       	ldd	r25, Y+10	; 0x0a
    3688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368c:	dc 01       	movw	r26, r24
    368e:	cb 01       	movw	r24, r22
    3690:	9e 83       	std	Y+6, r25	; 0x06
    3692:	8d 83       	std	Y+5, r24	; 0x05
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <lcd_4bit_send_enable_signal+0x104>
    36a4:	9a 83       	std	Y+2, r25	; 0x02
    36a6:	89 83       	std	Y+1, r24	; 0x01
	Delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en), LOW);
    36a8:	88 89       	ldd	r24, Y+16	; 0x10
    36aa:	99 89       	ldd	r25, Y+17	; 0x11
    36ac:	02 96       	adiw	r24, 0x02	; 2
    36ae:	60 e0       	ldi	r22, 0x00	; 0
    36b0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    36b4:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    36b6:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    36b8:	61 96       	adiw	r28, 0x11	; 17
    36ba:	0f b6       	in	r0, 0x3f	; 63
    36bc:	f8 94       	cli
    36be:	de bf       	out	0x3e, r29	; 62
    36c0:	0f be       	out	0x3f, r0	; 63
    36c2:	cd bf       	out	0x3d, r28	; 61
    36c4:	cf 91       	pop	r28
    36c6:	df 91       	pop	r29
    36c8:	08 95       	ret

000036ca <lcd_8bit_send_enable_signal>:
 * @param lcd
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_8bit_send_enable_signal(const chr_lcd_8bit_t *lcd){
    36ca:	df 93       	push	r29
    36cc:	cf 93       	push	r28
    36ce:	cd b7       	in	r28, 0x3d	; 61
    36d0:	de b7       	in	r29, 0x3e	; 62
    36d2:	61 97       	sbiw	r28, 0x11	; 17
    36d4:	0f b6       	in	r0, 0x3f	; 63
    36d6:	f8 94       	cli
    36d8:	de bf       	out	0x3e, r29	; 62
    36da:	0f be       	out	0x3f, r0	; 63
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	99 8b       	std	Y+17, r25	; 0x11
    36e0:	88 8b       	std	Y+16, r24	; 0x10
	Std_ReturnType ret = E_OK;
    36e2:	1f 86       	std	Y+15, r1	; 0x0f
	ret = gpio_pin_write_logic(&(lcd->lcd_en), HIGH);
    36e4:	88 89       	ldd	r24, Y+16	; 0x10
    36e6:	99 89       	ldd	r25, Y+17	; 0x11
    36e8:	02 96       	adiw	r24, 0x02	; 2
    36ea:	61 e0       	ldi	r22, 0x01	; 1
    36ec:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    36f0:	8f 87       	std	Y+15, r24	; 0x0f
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	a0 ea       	ldi	r26, 0xA0	; 160
    36f8:	b0 e4       	ldi	r27, 0x40	; 64
    36fa:	8b 87       	std	Y+11, r24	; 0x0b
    36fc:	9c 87       	std	Y+12, r25	; 0x0c
    36fe:	ad 87       	std	Y+13, r26	; 0x0d
    3700:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3702:	6b 85       	ldd	r22, Y+11	; 0x0b
    3704:	7c 85       	ldd	r23, Y+12	; 0x0c
    3706:	8d 85       	ldd	r24, Y+13	; 0x0d
    3708:	9e 85       	ldd	r25, Y+14	; 0x0e
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	4a e7       	ldi	r20, 0x7A	; 122
    3710:	53 e4       	ldi	r21, 0x43	; 67
    3712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	8f 83       	std	Y+7, r24	; 0x07
    371c:	98 87       	std	Y+8, r25	; 0x08
    371e:	a9 87       	std	Y+9, r26	; 0x09
    3720:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3722:	6f 81       	ldd	r22, Y+7	; 0x07
    3724:	78 85       	ldd	r23, Y+8	; 0x08
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	9a 85       	ldd	r25, Y+10	; 0x0a
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	40 e8       	ldi	r20, 0x80	; 128
    3730:	5f e3       	ldi	r21, 0x3F	; 63
    3732:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3736:	88 23       	and	r24, r24
    3738:	2c f4       	brge	.+10     	; 0x3744 <lcd_8bit_send_enable_signal+0x7a>
		__ticks = 1;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	90 e0       	ldi	r25, 0x00	; 0
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
    3742:	3f c0       	rjmp	.+126    	; 0x37c2 <lcd_8bit_send_enable_signal+0xf8>
	else if (__tmp > 65535)
    3744:	6f 81       	ldd	r22, Y+7	; 0x07
    3746:	78 85       	ldd	r23, Y+8	; 0x08
    3748:	89 85       	ldd	r24, Y+9	; 0x09
    374a:	9a 85       	ldd	r25, Y+10	; 0x0a
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	3f ef       	ldi	r19, 0xFF	; 255
    3750:	4f e7       	ldi	r20, 0x7F	; 127
    3752:	57 e4       	ldi	r21, 0x47	; 71
    3754:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3758:	18 16       	cp	r1, r24
    375a:	4c f5       	brge	.+82     	; 0x37ae <lcd_8bit_send_enable_signal+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375c:	6b 85       	ldd	r22, Y+11	; 0x0b
    375e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3760:	8d 85       	ldd	r24, Y+13	; 0x0d
    3762:	9e 85       	ldd	r25, Y+14	; 0x0e
    3764:	20 e0       	ldi	r18, 0x00	; 0
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	40 e2       	ldi	r20, 0x20	; 32
    376a:	51 e4       	ldi	r21, 0x41	; 65
    376c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3770:	dc 01       	movw	r26, r24
    3772:	cb 01       	movw	r24, r22
    3774:	bc 01       	movw	r22, r24
    3776:	cd 01       	movw	r24, r26
    3778:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	9e 83       	std	Y+6, r25	; 0x06
    3782:	8d 83       	std	Y+5, r24	; 0x05
    3784:	0f c0       	rjmp	.+30     	; 0x37a4 <lcd_8bit_send_enable_signal+0xda>
    3786:	89 e1       	ldi	r24, 0x19	; 25
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	9c 83       	std	Y+4, r25	; 0x04
    378c:	8b 83       	std	Y+3, r24	; 0x03
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	01 97       	sbiw	r24, 0x01	; 1
    3794:	f1 f7       	brne	.-4      	; 0x3792 <lcd_8bit_send_enable_signal+0xc8>
    3796:	9c 83       	std	Y+4, r25	; 0x04
    3798:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    379a:	8d 81       	ldd	r24, Y+5	; 0x05
    379c:	9e 81       	ldd	r25, Y+6	; 0x06
    379e:	01 97       	sbiw	r24, 0x01	; 1
    37a0:	9e 83       	std	Y+6, r25	; 0x06
    37a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a4:	8d 81       	ldd	r24, Y+5	; 0x05
    37a6:	9e 81       	ldd	r25, Y+6	; 0x06
    37a8:	00 97       	sbiw	r24, 0x00	; 0
    37aa:	69 f7       	brne	.-38     	; 0x3786 <lcd_8bit_send_enable_signal+0xbc>
    37ac:	14 c0       	rjmp	.+40     	; 0x37d6 <lcd_8bit_send_enable_signal+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ae:	6f 81       	ldd	r22, Y+7	; 0x07
    37b0:	78 85       	ldd	r23, Y+8	; 0x08
    37b2:	89 85       	ldd	r24, Y+9	; 0x09
    37b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    37b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ba:	dc 01       	movw	r26, r24
    37bc:	cb 01       	movw	r24, r22
    37be:	9e 83       	std	Y+6, r25	; 0x06
    37c0:	8d 83       	std	Y+5, r24	; 0x05
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	9a 83       	std	Y+2, r25	; 0x02
    37c8:	89 83       	std	Y+1, r24	; 0x01
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	9a 81       	ldd	r25, Y+2	; 0x02
    37ce:	01 97       	sbiw	r24, 0x01	; 1
    37d0:	f1 f7       	brne	.-4      	; 0x37ce <lcd_8bit_send_enable_signal+0x104>
    37d2:	9a 83       	std	Y+2, r25	; 0x02
    37d4:	89 83       	std	Y+1, r24	; 0x01
	Delay_ms(5);
	ret = gpio_pin_write_logic(&(lcd->lcd_en), LOW);
    37d6:	88 89       	ldd	r24, Y+16	; 0x10
    37d8:	99 89       	ldd	r25, Y+17	; 0x11
    37da:	02 96       	adiw	r24, 0x02	; 2
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <gpio_pin_write_logic>
    37e2:	8f 87       	std	Y+15, r24	; 0x0f
	return ret;
    37e4:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    37e6:	61 96       	adiw	r28, 0x11	; 17
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	cf 91       	pop	r28
    37f4:	df 91       	pop	r29
    37f6:	08 95       	ret

000037f8 <lcd_8bit_set_cursor>:
 * @param coulmn Which column you need to print your character
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_8bit_set_cursor(const chr_lcd_8bit_t *lcd, uint8 row, uint8 coulmn){
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	27 97       	sbiw	r28, 0x07	; 7
    3802:	0f b6       	in	r0, 0x3f	; 63
    3804:	f8 94       	cli
    3806:	de bf       	out	0x3e, r29	; 62
    3808:	0f be       	out	0x3f, r0	; 63
    380a:	cd bf       	out	0x3d, r28	; 61
    380c:	9b 83       	std	Y+3, r25	; 0x03
    380e:	8a 83       	std	Y+2, r24	; 0x02
    3810:	6c 83       	std	Y+4, r22	; 0x04
    3812:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType ret = E_OK;
    3814:	19 82       	std	Y+1, r1	; 0x01
	coulmn--;
    3816:	8d 81       	ldd	r24, Y+5	; 0x05
    3818:	81 50       	subi	r24, 0x01	; 1
    381a:	8d 83       	std	Y+5, r24	; 0x05
	switch(row){
    381c:	8c 81       	ldd	r24, Y+4	; 0x04
    381e:	28 2f       	mov	r18, r24
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	3f 83       	std	Y+7, r19	; 0x07
    3824:	2e 83       	std	Y+6, r18	; 0x06
    3826:	8e 81       	ldd	r24, Y+6	; 0x06
    3828:	9f 81       	ldd	r25, Y+7	; 0x07
    382a:	82 30       	cpi	r24, 0x02	; 2
    382c:	91 05       	cpc	r25, r1
    382e:	01 f1       	breq	.+64     	; 0x3870 <lcd_8bit_set_cursor+0x78>
    3830:	2e 81       	ldd	r18, Y+6	; 0x06
    3832:	3f 81       	ldd	r19, Y+7	; 0x07
    3834:	23 30       	cpi	r18, 0x03	; 3
    3836:	31 05       	cpc	r19, r1
    3838:	34 f4       	brge	.+12     	; 0x3846 <lcd_8bit_set_cursor+0x4e>
    383a:	8e 81       	ldd	r24, Y+6	; 0x06
    383c:	9f 81       	ldd	r25, Y+7	; 0x07
    383e:	81 30       	cpi	r24, 0x01	; 1
    3840:	91 05       	cpc	r25, r1
    3842:	61 f0       	breq	.+24     	; 0x385c <lcd_8bit_set_cursor+0x64>
    3844:	32 c0       	rjmp	.+100    	; 0x38aa <lcd_8bit_set_cursor+0xb2>
    3846:	2e 81       	ldd	r18, Y+6	; 0x06
    3848:	3f 81       	ldd	r19, Y+7	; 0x07
    384a:	23 30       	cpi	r18, 0x03	; 3
    384c:	31 05       	cpc	r19, r1
    384e:	d1 f0       	breq	.+52     	; 0x3884 <lcd_8bit_set_cursor+0x8c>
    3850:	8e 81       	ldd	r24, Y+6	; 0x06
    3852:	9f 81       	ldd	r25, Y+7	; 0x07
    3854:	84 30       	cpi	r24, 0x04	; 4
    3856:	91 05       	cpc	r25, r1
    3858:	f9 f0       	breq	.+62     	; 0x3898 <lcd_8bit_set_cursor+0xa0>
    385a:	27 c0       	rjmp	.+78     	; 0x38aa <lcd_8bit_set_cursor+0xb2>
	case ROW1 : ret = lcd_8bit_send_command(lcd, (0x80 + coulmn)); break; /* 0x00 -> Decimal : 0  */
    385c:	8d 81       	ldd	r24, Y+5	; 0x05
    385e:	28 2f       	mov	r18, r24
    3860:	20 58       	subi	r18, 0x80	; 128
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	9b 81       	ldd	r25, Y+3	; 0x03
    3866:	62 2f       	mov	r22, r18
    3868:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    386c:	89 83       	std	Y+1, r24	; 0x01
    386e:	1d c0       	rjmp	.+58     	; 0x38aa <lcd_8bit_set_cursor+0xb2>
	case ROW2 : ret = lcd_8bit_send_command(lcd, (0xc0 + coulmn)); break; /* 0x40 -> Decimal : 64 */
    3870:	8d 81       	ldd	r24, Y+5	; 0x05
    3872:	28 2f       	mov	r18, r24
    3874:	20 54       	subi	r18, 0x40	; 64
    3876:	8a 81       	ldd	r24, Y+2	; 0x02
    3878:	9b 81       	ldd	r25, Y+3	; 0x03
    387a:	62 2f       	mov	r22, r18
    387c:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    3880:	89 83       	std	Y+1, r24	; 0x01
    3882:	13 c0       	rjmp	.+38     	; 0x38aa <lcd_8bit_set_cursor+0xb2>
	case ROW3 : ret = lcd_8bit_send_command(lcd, (0x94 + coulmn)); break; /* 0x14 -> Decimal : 20 */
    3884:	8d 81       	ldd	r24, Y+5	; 0x05
    3886:	28 2f       	mov	r18, r24
    3888:	2c 56       	subi	r18, 0x6C	; 108
    388a:	8a 81       	ldd	r24, Y+2	; 0x02
    388c:	9b 81       	ldd	r25, Y+3	; 0x03
    388e:	62 2f       	mov	r22, r18
    3890:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    3894:	89 83       	std	Y+1, r24	; 0x01
    3896:	09 c0       	rjmp	.+18     	; 0x38aa <lcd_8bit_set_cursor+0xb2>
	case ROW4 : ret = lcd_8bit_send_command(lcd, (0xd4 + coulmn)); break; /* 0x54 -> Decimal : 84 */
    3898:	8d 81       	ldd	r24, Y+5	; 0x05
    389a:	28 2f       	mov	r18, r24
    389c:	2c 52       	subi	r18, 0x2C	; 44
    389e:	8a 81       	ldd	r24, Y+2	; 0x02
    38a0:	9b 81       	ldd	r25, Y+3	; 0x03
    38a2:	62 2f       	mov	r22, r18
    38a4:	0e 94 01 19 	call	0x3202	; 0x3202 <lcd_8bit_send_command>
    38a8:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    38ac:	27 96       	adiw	r28, 0x07	; 7
    38ae:	0f b6       	in	r0, 0x3f	; 63
    38b0:	f8 94       	cli
    38b2:	de bf       	out	0x3e, r29	; 62
    38b4:	0f be       	out	0x3f, r0	; 63
    38b6:	cd bf       	out	0x3d, r28	; 61
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <lcd_4bit_set_cursor>:
 * @param coulmn
 * @return Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to perform this action
 */
static Std_ReturnType lcd_4bit_set_cursor(const chr_lcd_4bit_t *lcd, uint8 row, uint8 coulmn){
    38be:	df 93       	push	r29
    38c0:	cf 93       	push	r28
    38c2:	cd b7       	in	r28, 0x3d	; 61
    38c4:	de b7       	in	r29, 0x3e	; 62
    38c6:	27 97       	sbiw	r28, 0x07	; 7
    38c8:	0f b6       	in	r0, 0x3f	; 63
    38ca:	f8 94       	cli
    38cc:	de bf       	out	0x3e, r29	; 62
    38ce:	0f be       	out	0x3f, r0	; 63
    38d0:	cd bf       	out	0x3d, r28	; 61
    38d2:	9b 83       	std	Y+3, r25	; 0x03
    38d4:	8a 83       	std	Y+2, r24	; 0x02
    38d6:	6c 83       	std	Y+4, r22	; 0x04
    38d8:	4d 83       	std	Y+5, r20	; 0x05
	Std_ReturnType ret = E_OK;
    38da:	19 82       	std	Y+1, r1	; 0x01
	coulmn--;
    38dc:	8d 81       	ldd	r24, Y+5	; 0x05
    38de:	81 50       	subi	r24, 0x01	; 1
    38e0:	8d 83       	std	Y+5, r24	; 0x05
	switch(row){
    38e2:	8c 81       	ldd	r24, Y+4	; 0x04
    38e4:	28 2f       	mov	r18, r24
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	3f 83       	std	Y+7, r19	; 0x07
    38ea:	2e 83       	std	Y+6, r18	; 0x06
    38ec:	8e 81       	ldd	r24, Y+6	; 0x06
    38ee:	9f 81       	ldd	r25, Y+7	; 0x07
    38f0:	82 30       	cpi	r24, 0x02	; 2
    38f2:	91 05       	cpc	r25, r1
    38f4:	01 f1       	breq	.+64     	; 0x3936 <lcd_4bit_set_cursor+0x78>
    38f6:	2e 81       	ldd	r18, Y+6	; 0x06
    38f8:	3f 81       	ldd	r19, Y+7	; 0x07
    38fa:	23 30       	cpi	r18, 0x03	; 3
    38fc:	31 05       	cpc	r19, r1
    38fe:	34 f4       	brge	.+12     	; 0x390c <lcd_4bit_set_cursor+0x4e>
    3900:	8e 81       	ldd	r24, Y+6	; 0x06
    3902:	9f 81       	ldd	r25, Y+7	; 0x07
    3904:	81 30       	cpi	r24, 0x01	; 1
    3906:	91 05       	cpc	r25, r1
    3908:	61 f0       	breq	.+24     	; 0x3922 <lcd_4bit_set_cursor+0x64>
    390a:	32 c0       	rjmp	.+100    	; 0x3970 <lcd_4bit_set_cursor+0xb2>
    390c:	2e 81       	ldd	r18, Y+6	; 0x06
    390e:	3f 81       	ldd	r19, Y+7	; 0x07
    3910:	23 30       	cpi	r18, 0x03	; 3
    3912:	31 05       	cpc	r19, r1
    3914:	d1 f0       	breq	.+52     	; 0x394a <lcd_4bit_set_cursor+0x8c>
    3916:	8e 81       	ldd	r24, Y+6	; 0x06
    3918:	9f 81       	ldd	r25, Y+7	; 0x07
    391a:	84 30       	cpi	r24, 0x04	; 4
    391c:	91 05       	cpc	r25, r1
    391e:	f9 f0       	breq	.+62     	; 0x395e <lcd_4bit_set_cursor+0xa0>
    3920:	27 c0       	rjmp	.+78     	; 0x3970 <lcd_4bit_set_cursor+0xb2>
	case ROW1 : ret = lcd_4bit_send_command(lcd, (0x80 + coulmn)); break;
    3922:	8d 81       	ldd	r24, Y+5	; 0x05
    3924:	28 2f       	mov	r18, r24
    3926:	20 58       	subi	r18, 0x80	; 128
    3928:	8a 81       	ldd	r24, Y+2	; 0x02
    392a:	9b 81       	ldd	r25, Y+3	; 0x03
    392c:	62 2f       	mov	r22, r18
    392e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    3932:	89 83       	std	Y+1, r24	; 0x01
    3934:	1d c0       	rjmp	.+58     	; 0x3970 <lcd_4bit_set_cursor+0xb2>
	case ROW2 : ret = lcd_4bit_send_command(lcd, (0xc0 + coulmn)); break;
    3936:	8d 81       	ldd	r24, Y+5	; 0x05
    3938:	28 2f       	mov	r18, r24
    393a:	20 54       	subi	r18, 0x40	; 64
    393c:	8a 81       	ldd	r24, Y+2	; 0x02
    393e:	9b 81       	ldd	r25, Y+3	; 0x03
    3940:	62 2f       	mov	r22, r18
    3942:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    3946:	89 83       	std	Y+1, r24	; 0x01
    3948:	13 c0       	rjmp	.+38     	; 0x3970 <lcd_4bit_set_cursor+0xb2>
	case ROW3 : ret = lcd_4bit_send_command(lcd, (0x94 + coulmn)); break;
    394a:	8d 81       	ldd	r24, Y+5	; 0x05
    394c:	28 2f       	mov	r18, r24
    394e:	2c 56       	subi	r18, 0x6C	; 108
    3950:	8a 81       	ldd	r24, Y+2	; 0x02
    3952:	9b 81       	ldd	r25, Y+3	; 0x03
    3954:	62 2f       	mov	r22, r18
    3956:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    395a:	89 83       	std	Y+1, r24	; 0x01
    395c:	09 c0       	rjmp	.+18     	; 0x3970 <lcd_4bit_set_cursor+0xb2>
	case ROW4 : ret = lcd_4bit_send_command(lcd, (0xd4 + coulmn)); break;
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	28 2f       	mov	r18, r24
    3962:	2c 52       	subi	r18, 0x2C	; 44
    3964:	8a 81       	ldd	r24, Y+2	; 0x02
    3966:	9b 81       	ldd	r25, Y+3	; 0x03
    3968:	62 2f       	mov	r22, r18
    396a:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <lcd_4bit_send_command>
    396e:	89 83       	std	Y+1, r24	; 0x01
	default : ;
	}
	return ret;
    3970:	89 81       	ldd	r24, Y+1	; 0x01
}
    3972:	27 96       	adiw	r28, 0x07	; 7
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	cf 91       	pop	r28
    3980:	df 91       	pop	r29
    3982:	08 95       	ret

00003984 <lcd_4bit_send_num_pos>:


Std_ReturnType lcd_4bit_send_num_pos(chr_lcd_4bit_t *lcd, uint8 row, uint8 column,  uint8 num)
{
    3984:	df 93       	push	r29
    3986:	cf 93       	push	r28
    3988:	cd b7       	in	r28, 0x3d	; 61
    398a:	de b7       	in	r29, 0x3e	; 62
    398c:	2a 97       	sbiw	r28, 0x0a	; 10
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	9f 83       	std	Y+7, r25	; 0x07
    399a:	8e 83       	std	Y+6, r24	; 0x06
    399c:	68 87       	std	Y+8, r22	; 0x08
    399e:	49 87       	std	Y+9, r20	; 0x09
    39a0:	2a 87       	std	Y+10, r18	; 0x0a
	Std_ReturnType ret = E_NOK;
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	89 83       	std	Y+1, r24	; 0x01

	char s[4];
	sprintf(s,"%d",num);
    39a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    39a8:	28 2f       	mov	r18, r24
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	00 d0       	rcall	.+0      	; 0x39ae <lcd_4bit_send_num_pos+0x2a>
    39ae:	00 d0       	rcall	.+0      	; 0x39b0 <lcd_4bit_send_num_pos+0x2c>
    39b0:	00 d0       	rcall	.+0      	; 0x39b2 <lcd_4bit_send_num_pos+0x2e>
    39b2:	ed b7       	in	r30, 0x3d	; 61
    39b4:	fe b7       	in	r31, 0x3e	; 62
    39b6:	31 96       	adiw	r30, 0x01	; 1
    39b8:	ce 01       	movw	r24, r28
    39ba:	02 96       	adiw	r24, 0x02	; 2
    39bc:	91 83       	std	Z+1, r25	; 0x01
    39be:	80 83       	st	Z, r24
    39c0:	8a e9       	ldi	r24, 0x9A	; 154
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	93 83       	std	Z+3, r25	; 0x03
    39c6:	82 83       	std	Z+2, r24	; 0x02
    39c8:	35 83       	std	Z+5, r19	; 0x05
    39ca:	24 83       	std	Z+4, r18	; 0x04
    39cc:	0e 94 bc 1d 	call	0x3b78	; 0x3b78 <sprintf>
    39d0:	8d b7       	in	r24, 0x3d	; 61
    39d2:	9e b7       	in	r25, 0x3e	; 62
    39d4:	06 96       	adiw	r24, 0x06	; 6
    39d6:	0f b6       	in	r0, 0x3f	; 63
    39d8:	f8 94       	cli
    39da:	9e bf       	out	0x3e, r25	; 62
    39dc:	0f be       	out	0x3f, r0	; 63
    39de:	8d bf       	out	0x3d, r24	; 61
	lcd_4bit_send_string_pos(lcd, row, column, s);
    39e0:	8e 81       	ldd	r24, Y+6	; 0x06
    39e2:	9f 81       	ldd	r25, Y+7	; 0x07
    39e4:	9e 01       	movw	r18, r28
    39e6:	2e 5f       	subi	r18, 0xFE	; 254
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	68 85       	ldd	r22, Y+8	; 0x08
    39ec:	49 85       	ldd	r20, Y+9	; 0x09
    39ee:	0e 94 8e 16 	call	0x2d1c	; 0x2d1c <lcd_4bit_send_string_pos>
	return ret;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    39f4:	2a 96       	adiw	r28, 0x0a	; 10
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <button_initialize>:
/**
 *
 * @param btn
 * @return
 */
Std_ReturnType button_initialize(const button_t *btn){
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	00 d0       	rcall	.+0      	; 0x3a0c <button_initialize+0x6>
    3a0c:	0f 92       	push	r0
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	9b 83       	std	Y+3, r25	; 0x03
    3a14:	8a 83       	std	Y+2, r24	; 0x02
    Std_ReturnType ret = E_OK;
    3a16:	19 82       	std	Y+1, r1	; 0x01
    if(NULL == btn){
    3a18:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	19 f4       	brne	.+6      	; 0x3a26 <button_initialize+0x20>
        ret = E_NOK;
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	89 83       	std	Y+1, r24	; 0x01
    3a24:	06 c0       	rjmp	.+12     	; 0x3a32 <button_initialize+0x2c>
    }
    else{
        ret = gpio_pin_direction_initialize(&(btn->button_pin), GPIO_PIN_INPOT);
    3a26:	8a 81       	ldd	r24, Y+2	; 0x02
    3a28:	9b 81       	ldd	r25, Y+3	; 0x03
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpio_pin_direction_initialize>
    3a30:	89 83       	std	Y+1, r24	; 0x01
    }
    return ret;
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a34:	0f 90       	pop	r0
    3a36:	0f 90       	pop	r0
    3a38:	0f 90       	pop	r0
    3a3a:	cf 91       	pop	r28
    3a3c:	df 91       	pop	r29
    3a3e:	08 95       	ret

00003a40 <button_read_state>:
 * @param btn_state button state @ref button_state_t
 * @return  Status of the function
 *          (E_OK) : The function done successfully
 *          (E_NOK) : The function has issue while performing this action
 */
Std_ReturnType button_read_state(const button_t *btn, button_state_t *btn_state){
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	28 97       	sbiw	r28, 0x08	; 8
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	78 87       	std	Y+8, r23	; 0x08
    3a5a:	6f 83       	std	Y+7, r22	; 0x07
    Std_ReturnType ret = E_NOK;
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	89 83       	std	Y+1, r24	; 0x01
    logic_t btn_Logic_Status = LOW;
    3a60:	1a 82       	std	Y+2, r1	; 0x02
    Gpio_pin_config_t loc_pin ={.port = btn->button_pin.port, .pin = btn->button_pin.pin};
    3a62:	ed 81       	ldd	r30, Y+5	; 0x05
    3a64:	fe 81       	ldd	r31, Y+6	; 0x06
    3a66:	90 81       	ld	r25, Z
    3a68:	ed 81       	ldd	r30, Y+5	; 0x05
    3a6a:	fe 81       	ldd	r31, Y+6	; 0x06
    3a6c:	81 81       	ldd	r24, Z+1	; 0x01
    3a6e:	87 70       	andi	r24, 0x07	; 7
    3a70:	1c 82       	std	Y+4, r1	; 0x04
    3a72:	1b 82       	std	Y+3, r1	; 0x03
    3a74:	9b 83       	std	Y+3, r25	; 0x03
    3a76:	98 2f       	mov	r25, r24
    3a78:	97 70       	andi	r25, 0x07	; 7
    3a7a:	8c 81       	ldd	r24, Y+4	; 0x04
    3a7c:	88 7f       	andi	r24, 0xF8	; 248
    3a7e:	89 2b       	or	r24, r25
    3a80:	8c 83       	std	Y+4, r24	; 0x04
    if((NULL == btn) || (NULL == btn_state)){
    3a82:	8d 81       	ldd	r24, Y+5	; 0x05
    3a84:	9e 81       	ldd	r25, Y+6	; 0x06
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	21 f0       	breq	.+8      	; 0x3a92 <button_read_state+0x52>
    3a8a:	8f 81       	ldd	r24, Y+7	; 0x07
    3a8c:	98 85       	ldd	r25, Y+8	; 0x08
    3a8e:	00 97       	sbiw	r24, 0x00	; 0
    3a90:	19 f4       	brne	.+6      	; 0x3a98 <button_read_state+0x58>
        ret = E_NOK;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	89 83       	std	Y+1, r24	; 0x01
    3a96:	2a c0       	rjmp	.+84     	; 0x3aec <button_read_state+0xac>
    }
    else{
    	gpio_pin_read(&loc_pin, &btn_Logic_Status);
    3a98:	ce 01       	movw	r24, r28
    3a9a:	03 96       	adiw	r24, 0x03	; 3
    3a9c:	9e 01       	movw	r18, r28
    3a9e:	2e 5f       	subi	r18, 0xFE	; 254
    3aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa2:	b9 01       	movw	r22, r18
    3aa4:	0e 94 ca 0b 	call	0x1794	; 0x1794 <gpio_pin_read>
        if(BUTTON_ACTIVE_HIGH == btn->button_connection){
    3aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    3aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    3aac:	83 81       	ldd	r24, Z+3	; 0x03
    3aae:	88 23       	and	r24, r24
    3ab0:	61 f4       	brne	.+24     	; 0x3aca <button_read_state+0x8a>
            if(HIGH == btn_Logic_Status){
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	81 30       	cpi	r24, 0x01	; 1
    3ab6:	21 f4       	brne	.+8      	; 0x3ac0 <button_read_state+0x80>
                *btn_state = BUTTON_PRESSED;
    3ab8:	ef 81       	ldd	r30, Y+7	; 0x07
    3aba:	f8 85       	ldd	r31, Y+8	; 0x08
    3abc:	10 82       	st	Z, r1
    3abe:	15 c0       	rjmp	.+42     	; 0x3aea <button_read_state+0xaa>
            }
            else{
                *btn_state = BUTTON_RELEASED;
    3ac0:	ef 81       	ldd	r30, Y+7	; 0x07
    3ac2:	f8 85       	ldd	r31, Y+8	; 0x08
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	80 83       	st	Z, r24
    3ac8:	10 c0       	rjmp	.+32     	; 0x3aea <button_read_state+0xaa>
            }
        }
        else if(BUTTON_ACTIVE_LOW == btn->button_connection){
    3aca:	ed 81       	ldd	r30, Y+5	; 0x05
    3acc:	fe 81       	ldd	r31, Y+6	; 0x06
    3ace:	83 81       	ldd	r24, Z+3	; 0x03
    3ad0:	81 30       	cpi	r24, 0x01	; 1
    3ad2:	59 f4       	brne	.+22     	; 0x3aea <button_read_state+0xaa>
            if(HIGH == btn_Logic_Status){
    3ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad6:	81 30       	cpi	r24, 0x01	; 1
    3ad8:	29 f4       	brne	.+10     	; 0x3ae4 <button_read_state+0xa4>
                *btn_state = BUTTON_RELEASED;
    3ada:	ef 81       	ldd	r30, Y+7	; 0x07
    3adc:	f8 85       	ldd	r31, Y+8	; 0x08
    3ade:	81 e0       	ldi	r24, 0x01	; 1
    3ae0:	80 83       	st	Z, r24
    3ae2:	03 c0       	rjmp	.+6      	; 0x3aea <button_read_state+0xaa>
            }
            else{
                *btn_state = BUTTON_PRESSED;
    3ae4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ae6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ae8:	10 82       	st	Z, r1
            }
        }
        else { /* Nothing */ }
        ret = E_OK;
    3aea:	19 82       	std	Y+1, r1	; 0x01
    }
    return ret;
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
}
    3aee:	28 96       	adiw	r28, 0x08	; 8
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <main>:

#include "App_Main.h"


int main(void)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
    3b08:	ff cf       	rjmp	.-2      	; 0x3b08 <main+0x8>

00003b0a <__prologue_saves__>:
    3b0a:	2f 92       	push	r2
    3b0c:	3f 92       	push	r3
    3b0e:	4f 92       	push	r4
    3b10:	5f 92       	push	r5
    3b12:	6f 92       	push	r6
    3b14:	7f 92       	push	r7
    3b16:	8f 92       	push	r8
    3b18:	9f 92       	push	r9
    3b1a:	af 92       	push	r10
    3b1c:	bf 92       	push	r11
    3b1e:	cf 92       	push	r12
    3b20:	df 92       	push	r13
    3b22:	ef 92       	push	r14
    3b24:	ff 92       	push	r15
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    3b32:	ca 1b       	sub	r28, r26
    3b34:	db 0b       	sbc	r29, r27
    3b36:	0f b6       	in	r0, 0x3f	; 63
    3b38:	f8 94       	cli
    3b3a:	de bf       	out	0x3e, r29	; 62
    3b3c:	0f be       	out	0x3f, r0	; 63
    3b3e:	cd bf       	out	0x3d, r28	; 61
    3b40:	09 94       	ijmp

00003b42 <__epilogue_restores__>:
    3b42:	2a 88       	ldd	r2, Y+18	; 0x12
    3b44:	39 88       	ldd	r3, Y+17	; 0x11
    3b46:	48 88       	ldd	r4, Y+16	; 0x10
    3b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b54:	b9 84       	ldd	r11, Y+9	; 0x09
    3b56:	c8 84       	ldd	r12, Y+8	; 0x08
    3b58:	df 80       	ldd	r13, Y+7	; 0x07
    3b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    3b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    3b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    3b60:	1b 81       	ldd	r17, Y+3	; 0x03
    3b62:	aa 81       	ldd	r26, Y+2	; 0x02
    3b64:	b9 81       	ldd	r27, Y+1	; 0x01
    3b66:	ce 0f       	add	r28, r30
    3b68:	d1 1d       	adc	r29, r1
    3b6a:	0f b6       	in	r0, 0x3f	; 63
    3b6c:	f8 94       	cli
    3b6e:	de bf       	out	0x3e, r29	; 62
    3b70:	0f be       	out	0x3f, r0	; 63
    3b72:	cd bf       	out	0x3d, r28	; 61
    3b74:	ed 01       	movw	r28, r26
    3b76:	08 95       	ret

00003b78 <sprintf>:
    3b78:	ae e0       	ldi	r26, 0x0E	; 14
    3b7a:	b0 e0       	ldi	r27, 0x00	; 0
    3b7c:	e2 ec       	ldi	r30, 0xC2	; 194
    3b7e:	fd e1       	ldi	r31, 0x1D	; 29
    3b80:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__prologue_saves__+0x1c>
    3b84:	0d 89       	ldd	r16, Y+21	; 0x15
    3b86:	1e 89       	ldd	r17, Y+22	; 0x16
    3b88:	86 e0       	ldi	r24, 0x06	; 6
    3b8a:	8c 83       	std	Y+4, r24	; 0x04
    3b8c:	1a 83       	std	Y+2, r17	; 0x02
    3b8e:	09 83       	std	Y+1, r16	; 0x01
    3b90:	8f ef       	ldi	r24, 0xFF	; 255
    3b92:	9f e7       	ldi	r25, 0x7F	; 127
    3b94:	9e 83       	std	Y+6, r25	; 0x06
    3b96:	8d 83       	std	Y+5, r24	; 0x05
    3b98:	9e 01       	movw	r18, r28
    3b9a:	27 5e       	subi	r18, 0xE7	; 231
    3b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3b9e:	ce 01       	movw	r24, r28
    3ba0:	01 96       	adiw	r24, 0x01	; 1
    3ba2:	6f 89       	ldd	r22, Y+23	; 0x17
    3ba4:	78 8d       	ldd	r23, Y+24	; 0x18
    3ba6:	a9 01       	movw	r20, r18
    3ba8:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <vfprintf>
    3bac:	2f 81       	ldd	r18, Y+7	; 0x07
    3bae:	38 85       	ldd	r19, Y+8	; 0x08
    3bb0:	02 0f       	add	r16, r18
    3bb2:	13 1f       	adc	r17, r19
    3bb4:	f8 01       	movw	r30, r16
    3bb6:	10 82       	st	Z, r1
    3bb8:	2e 96       	adiw	r28, 0x0e	; 14
    3bba:	e4 e0       	ldi	r30, 0x04	; 4
    3bbc:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <__epilogue_restores__+0x1c>

00003bc0 <vfprintf>:
    3bc0:	ab e0       	ldi	r26, 0x0B	; 11
    3bc2:	b0 e0       	ldi	r27, 0x00	; 0
    3bc4:	e6 ee       	ldi	r30, 0xE6	; 230
    3bc6:	fd e1       	ldi	r31, 0x1D	; 29
    3bc8:	0c 94 85 1d 	jmp	0x3b0a	; 0x3b0a <__prologue_saves__>
    3bcc:	3c 01       	movw	r6, r24
    3bce:	2b 01       	movw	r4, r22
    3bd0:	5a 01       	movw	r10, r20
    3bd2:	fc 01       	movw	r30, r24
    3bd4:	17 82       	std	Z+7, r1	; 0x07
    3bd6:	16 82       	std	Z+6, r1	; 0x06
    3bd8:	83 81       	ldd	r24, Z+3	; 0x03
    3bda:	81 fd       	sbrc	r24, 1
    3bdc:	03 c0       	rjmp	.+6      	; 0x3be4 <vfprintf+0x24>
    3bde:	6f ef       	ldi	r22, 0xFF	; 255
    3be0:	7f ef       	ldi	r23, 0xFF	; 255
    3be2:	c6 c1       	rjmp	.+908    	; 0x3f70 <vfprintf+0x3b0>
    3be4:	9a e0       	ldi	r25, 0x0A	; 10
    3be6:	89 2e       	mov	r8, r25
    3be8:	1e 01       	movw	r2, r28
    3bea:	08 94       	sec
    3bec:	21 1c       	adc	r2, r1
    3bee:	31 1c       	adc	r3, r1
    3bf0:	f3 01       	movw	r30, r6
    3bf2:	23 81       	ldd	r18, Z+3	; 0x03
    3bf4:	f2 01       	movw	r30, r4
    3bf6:	23 fd       	sbrc	r18, 3
    3bf8:	85 91       	lpm	r24, Z+
    3bfa:	23 ff       	sbrs	r18, 3
    3bfc:	81 91       	ld	r24, Z+
    3bfe:	2f 01       	movw	r4, r30
    3c00:	88 23       	and	r24, r24
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <vfprintf+0x46>
    3c04:	b2 c1       	rjmp	.+868    	; 0x3f6a <vfprintf+0x3aa>
    3c06:	85 32       	cpi	r24, 0x25	; 37
    3c08:	39 f4       	brne	.+14     	; 0x3c18 <vfprintf+0x58>
    3c0a:	23 fd       	sbrc	r18, 3
    3c0c:	85 91       	lpm	r24, Z+
    3c0e:	23 ff       	sbrs	r18, 3
    3c10:	81 91       	ld	r24, Z+
    3c12:	2f 01       	movw	r4, r30
    3c14:	85 32       	cpi	r24, 0x25	; 37
    3c16:	29 f4       	brne	.+10     	; 0x3c22 <vfprintf+0x62>
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	b3 01       	movw	r22, r6
    3c1c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3c20:	e7 cf       	rjmp	.-50     	; 0x3bf0 <vfprintf+0x30>
    3c22:	98 2f       	mov	r25, r24
    3c24:	ff 24       	eor	r15, r15
    3c26:	ee 24       	eor	r14, r14
    3c28:	99 24       	eor	r9, r9
    3c2a:	ff e1       	ldi	r31, 0x1F	; 31
    3c2c:	ff 15       	cp	r31, r15
    3c2e:	d0 f0       	brcs	.+52     	; 0x3c64 <vfprintf+0xa4>
    3c30:	9b 32       	cpi	r25, 0x2B	; 43
    3c32:	69 f0       	breq	.+26     	; 0x3c4e <vfprintf+0x8e>
    3c34:	9c 32       	cpi	r25, 0x2C	; 44
    3c36:	28 f4       	brcc	.+10     	; 0x3c42 <vfprintf+0x82>
    3c38:	90 32       	cpi	r25, 0x20	; 32
    3c3a:	59 f0       	breq	.+22     	; 0x3c52 <vfprintf+0x92>
    3c3c:	93 32       	cpi	r25, 0x23	; 35
    3c3e:	91 f4       	brne	.+36     	; 0x3c64 <vfprintf+0xa4>
    3c40:	0e c0       	rjmp	.+28     	; 0x3c5e <vfprintf+0x9e>
    3c42:	9d 32       	cpi	r25, 0x2D	; 45
    3c44:	49 f0       	breq	.+18     	; 0x3c58 <vfprintf+0x98>
    3c46:	90 33       	cpi	r25, 0x30	; 48
    3c48:	69 f4       	brne	.+26     	; 0x3c64 <vfprintf+0xa4>
    3c4a:	41 e0       	ldi	r20, 0x01	; 1
    3c4c:	24 c0       	rjmp	.+72     	; 0x3c96 <vfprintf+0xd6>
    3c4e:	52 e0       	ldi	r21, 0x02	; 2
    3c50:	f5 2a       	or	r15, r21
    3c52:	84 e0       	ldi	r24, 0x04	; 4
    3c54:	f8 2a       	or	r15, r24
    3c56:	28 c0       	rjmp	.+80     	; 0x3ca8 <vfprintf+0xe8>
    3c58:	98 e0       	ldi	r25, 0x08	; 8
    3c5a:	f9 2a       	or	r15, r25
    3c5c:	25 c0       	rjmp	.+74     	; 0x3ca8 <vfprintf+0xe8>
    3c5e:	e0 e1       	ldi	r30, 0x10	; 16
    3c60:	fe 2a       	or	r15, r30
    3c62:	22 c0       	rjmp	.+68     	; 0x3ca8 <vfprintf+0xe8>
    3c64:	f7 fc       	sbrc	r15, 7
    3c66:	29 c0       	rjmp	.+82     	; 0x3cba <vfprintf+0xfa>
    3c68:	89 2f       	mov	r24, r25
    3c6a:	80 53       	subi	r24, 0x30	; 48
    3c6c:	8a 30       	cpi	r24, 0x0A	; 10
    3c6e:	70 f4       	brcc	.+28     	; 0x3c8c <vfprintf+0xcc>
    3c70:	f6 fe       	sbrs	r15, 6
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <vfprintf+0xbe>
    3c74:	98 9c       	mul	r9, r8
    3c76:	90 2c       	mov	r9, r0
    3c78:	11 24       	eor	r1, r1
    3c7a:	98 0e       	add	r9, r24
    3c7c:	15 c0       	rjmp	.+42     	; 0x3ca8 <vfprintf+0xe8>
    3c7e:	e8 9c       	mul	r14, r8
    3c80:	e0 2c       	mov	r14, r0
    3c82:	11 24       	eor	r1, r1
    3c84:	e8 0e       	add	r14, r24
    3c86:	f0 e2       	ldi	r31, 0x20	; 32
    3c88:	ff 2a       	or	r15, r31
    3c8a:	0e c0       	rjmp	.+28     	; 0x3ca8 <vfprintf+0xe8>
    3c8c:	9e 32       	cpi	r25, 0x2E	; 46
    3c8e:	29 f4       	brne	.+10     	; 0x3c9a <vfprintf+0xda>
    3c90:	f6 fc       	sbrc	r15, 6
    3c92:	6b c1       	rjmp	.+726    	; 0x3f6a <vfprintf+0x3aa>
    3c94:	40 e4       	ldi	r20, 0x40	; 64
    3c96:	f4 2a       	or	r15, r20
    3c98:	07 c0       	rjmp	.+14     	; 0x3ca8 <vfprintf+0xe8>
    3c9a:	9c 36       	cpi	r25, 0x6C	; 108
    3c9c:	19 f4       	brne	.+6      	; 0x3ca4 <vfprintf+0xe4>
    3c9e:	50 e8       	ldi	r21, 0x80	; 128
    3ca0:	f5 2a       	or	r15, r21
    3ca2:	02 c0       	rjmp	.+4      	; 0x3ca8 <vfprintf+0xe8>
    3ca4:	98 36       	cpi	r25, 0x68	; 104
    3ca6:	49 f4       	brne	.+18     	; 0x3cba <vfprintf+0xfa>
    3ca8:	f2 01       	movw	r30, r4
    3caa:	23 fd       	sbrc	r18, 3
    3cac:	95 91       	lpm	r25, Z+
    3cae:	23 ff       	sbrs	r18, 3
    3cb0:	91 91       	ld	r25, Z+
    3cb2:	2f 01       	movw	r4, r30
    3cb4:	99 23       	and	r25, r25
    3cb6:	09 f0       	breq	.+2      	; 0x3cba <vfprintf+0xfa>
    3cb8:	b8 cf       	rjmp	.-144    	; 0x3c2a <vfprintf+0x6a>
    3cba:	89 2f       	mov	r24, r25
    3cbc:	85 54       	subi	r24, 0x45	; 69
    3cbe:	83 30       	cpi	r24, 0x03	; 3
    3cc0:	18 f0       	brcs	.+6      	; 0x3cc8 <vfprintf+0x108>
    3cc2:	80 52       	subi	r24, 0x20	; 32
    3cc4:	83 30       	cpi	r24, 0x03	; 3
    3cc6:	38 f4       	brcc	.+14     	; 0x3cd6 <vfprintf+0x116>
    3cc8:	44 e0       	ldi	r20, 0x04	; 4
    3cca:	50 e0       	ldi	r21, 0x00	; 0
    3ccc:	a4 0e       	add	r10, r20
    3cce:	b5 1e       	adc	r11, r21
    3cd0:	5f e3       	ldi	r21, 0x3F	; 63
    3cd2:	59 83       	std	Y+1, r21	; 0x01
    3cd4:	0f c0       	rjmp	.+30     	; 0x3cf4 <vfprintf+0x134>
    3cd6:	93 36       	cpi	r25, 0x63	; 99
    3cd8:	31 f0       	breq	.+12     	; 0x3ce6 <vfprintf+0x126>
    3cda:	93 37       	cpi	r25, 0x73	; 115
    3cdc:	79 f0       	breq	.+30     	; 0x3cfc <vfprintf+0x13c>
    3cde:	93 35       	cpi	r25, 0x53	; 83
    3ce0:	09 f0       	breq	.+2      	; 0x3ce4 <vfprintf+0x124>
    3ce2:	56 c0       	rjmp	.+172    	; 0x3d90 <vfprintf+0x1d0>
    3ce4:	20 c0       	rjmp	.+64     	; 0x3d26 <vfprintf+0x166>
    3ce6:	f5 01       	movw	r30, r10
    3ce8:	80 81       	ld	r24, Z
    3cea:	89 83       	std	Y+1, r24	; 0x01
    3cec:	42 e0       	ldi	r20, 0x02	; 2
    3cee:	50 e0       	ldi	r21, 0x00	; 0
    3cf0:	a4 0e       	add	r10, r20
    3cf2:	b5 1e       	adc	r11, r21
    3cf4:	61 01       	movw	r12, r2
    3cf6:	01 e0       	ldi	r16, 0x01	; 1
    3cf8:	10 e0       	ldi	r17, 0x00	; 0
    3cfa:	12 c0       	rjmp	.+36     	; 0x3d20 <vfprintf+0x160>
    3cfc:	f5 01       	movw	r30, r10
    3cfe:	c0 80       	ld	r12, Z
    3d00:	d1 80       	ldd	r13, Z+1	; 0x01
    3d02:	f6 fc       	sbrc	r15, 6
    3d04:	03 c0       	rjmp	.+6      	; 0x3d0c <vfprintf+0x14c>
    3d06:	6f ef       	ldi	r22, 0xFF	; 255
    3d08:	7f ef       	ldi	r23, 0xFF	; 255
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <vfprintf+0x150>
    3d0c:	69 2d       	mov	r22, r9
    3d0e:	70 e0       	ldi	r23, 0x00	; 0
    3d10:	42 e0       	ldi	r20, 0x02	; 2
    3d12:	50 e0       	ldi	r21, 0x00	; 0
    3d14:	a4 0e       	add	r10, r20
    3d16:	b5 1e       	adc	r11, r21
    3d18:	c6 01       	movw	r24, r12
    3d1a:	0e 94 c8 1f 	call	0x3f90	; 0x3f90 <strnlen>
    3d1e:	8c 01       	movw	r16, r24
    3d20:	5f e7       	ldi	r21, 0x7F	; 127
    3d22:	f5 22       	and	r15, r21
    3d24:	14 c0       	rjmp	.+40     	; 0x3d4e <vfprintf+0x18e>
    3d26:	f5 01       	movw	r30, r10
    3d28:	c0 80       	ld	r12, Z
    3d2a:	d1 80       	ldd	r13, Z+1	; 0x01
    3d2c:	f6 fc       	sbrc	r15, 6
    3d2e:	03 c0       	rjmp	.+6      	; 0x3d36 <vfprintf+0x176>
    3d30:	6f ef       	ldi	r22, 0xFF	; 255
    3d32:	7f ef       	ldi	r23, 0xFF	; 255
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <vfprintf+0x17a>
    3d36:	69 2d       	mov	r22, r9
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	42 e0       	ldi	r20, 0x02	; 2
    3d3c:	50 e0       	ldi	r21, 0x00	; 0
    3d3e:	a4 0e       	add	r10, r20
    3d40:	b5 1e       	adc	r11, r21
    3d42:	c6 01       	movw	r24, r12
    3d44:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <strnlen_P>
    3d48:	8c 01       	movw	r16, r24
    3d4a:	50 e8       	ldi	r21, 0x80	; 128
    3d4c:	f5 2a       	or	r15, r21
    3d4e:	f3 fe       	sbrs	r15, 3
    3d50:	07 c0       	rjmp	.+14     	; 0x3d60 <vfprintf+0x1a0>
    3d52:	1a c0       	rjmp	.+52     	; 0x3d88 <vfprintf+0x1c8>
    3d54:	80 e2       	ldi	r24, 0x20	; 32
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	b3 01       	movw	r22, r6
    3d5a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3d5e:	ea 94       	dec	r14
    3d60:	8e 2d       	mov	r24, r14
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	08 17       	cp	r16, r24
    3d66:	19 07       	cpc	r17, r25
    3d68:	a8 f3       	brcs	.-22     	; 0x3d54 <vfprintf+0x194>
    3d6a:	0e c0       	rjmp	.+28     	; 0x3d88 <vfprintf+0x1c8>
    3d6c:	f6 01       	movw	r30, r12
    3d6e:	f7 fc       	sbrc	r15, 7
    3d70:	85 91       	lpm	r24, Z+
    3d72:	f7 fe       	sbrs	r15, 7
    3d74:	81 91       	ld	r24, Z+
    3d76:	6f 01       	movw	r12, r30
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	b3 01       	movw	r22, r6
    3d7c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3d80:	e1 10       	cpse	r14, r1
    3d82:	ea 94       	dec	r14
    3d84:	01 50       	subi	r16, 0x01	; 1
    3d86:	10 40       	sbci	r17, 0x00	; 0
    3d88:	01 15       	cp	r16, r1
    3d8a:	11 05       	cpc	r17, r1
    3d8c:	79 f7       	brne	.-34     	; 0x3d6c <vfprintf+0x1ac>
    3d8e:	ea c0       	rjmp	.+468    	; 0x3f64 <vfprintf+0x3a4>
    3d90:	94 36       	cpi	r25, 0x64	; 100
    3d92:	11 f0       	breq	.+4      	; 0x3d98 <vfprintf+0x1d8>
    3d94:	99 36       	cpi	r25, 0x69	; 105
    3d96:	69 f5       	brne	.+90     	; 0x3df2 <vfprintf+0x232>
    3d98:	f7 fe       	sbrs	r15, 7
    3d9a:	08 c0       	rjmp	.+16     	; 0x3dac <vfprintf+0x1ec>
    3d9c:	f5 01       	movw	r30, r10
    3d9e:	20 81       	ld	r18, Z
    3da0:	31 81       	ldd	r19, Z+1	; 0x01
    3da2:	42 81       	ldd	r20, Z+2	; 0x02
    3da4:	53 81       	ldd	r21, Z+3	; 0x03
    3da6:	84 e0       	ldi	r24, 0x04	; 4
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0a c0       	rjmp	.+20     	; 0x3dc0 <vfprintf+0x200>
    3dac:	f5 01       	movw	r30, r10
    3dae:	80 81       	ld	r24, Z
    3db0:	91 81       	ldd	r25, Z+1	; 0x01
    3db2:	9c 01       	movw	r18, r24
    3db4:	44 27       	eor	r20, r20
    3db6:	37 fd       	sbrc	r19, 7
    3db8:	40 95       	com	r20
    3dba:	54 2f       	mov	r21, r20
    3dbc:	82 e0       	ldi	r24, 0x02	; 2
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	a8 0e       	add	r10, r24
    3dc2:	b9 1e       	adc	r11, r25
    3dc4:	9f e6       	ldi	r25, 0x6F	; 111
    3dc6:	f9 22       	and	r15, r25
    3dc8:	57 ff       	sbrs	r21, 7
    3dca:	09 c0       	rjmp	.+18     	; 0x3dde <vfprintf+0x21e>
    3dcc:	50 95       	com	r21
    3dce:	40 95       	com	r20
    3dd0:	30 95       	com	r19
    3dd2:	21 95       	neg	r18
    3dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd6:	4f 4f       	sbci	r20, 0xFF	; 255
    3dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dda:	e0 e8       	ldi	r30, 0x80	; 128
    3ddc:	fe 2a       	or	r15, r30
    3dde:	ca 01       	movw	r24, r20
    3de0:	b9 01       	movw	r22, r18
    3de2:	a1 01       	movw	r20, r2
    3de4:	2a e0       	ldi	r18, 0x0A	; 10
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__ultoa_invert>
    3dec:	d8 2e       	mov	r13, r24
    3dee:	d2 18       	sub	r13, r2
    3df0:	40 c0       	rjmp	.+128    	; 0x3e72 <vfprintf+0x2b2>
    3df2:	95 37       	cpi	r25, 0x75	; 117
    3df4:	29 f4       	brne	.+10     	; 0x3e00 <vfprintf+0x240>
    3df6:	1f 2d       	mov	r17, r15
    3df8:	1f 7e       	andi	r17, 0xEF	; 239
    3dfa:	2a e0       	ldi	r18, 0x0A	; 10
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	1d c0       	rjmp	.+58     	; 0x3e3a <vfprintf+0x27a>
    3e00:	1f 2d       	mov	r17, r15
    3e02:	19 7f       	andi	r17, 0xF9	; 249
    3e04:	9f 36       	cpi	r25, 0x6F	; 111
    3e06:	61 f0       	breq	.+24     	; 0x3e20 <vfprintf+0x260>
    3e08:	90 37       	cpi	r25, 0x70	; 112
    3e0a:	20 f4       	brcc	.+8      	; 0x3e14 <vfprintf+0x254>
    3e0c:	98 35       	cpi	r25, 0x58	; 88
    3e0e:	09 f0       	breq	.+2      	; 0x3e12 <vfprintf+0x252>
    3e10:	ac c0       	rjmp	.+344    	; 0x3f6a <vfprintf+0x3aa>
    3e12:	0f c0       	rjmp	.+30     	; 0x3e32 <vfprintf+0x272>
    3e14:	90 37       	cpi	r25, 0x70	; 112
    3e16:	39 f0       	breq	.+14     	; 0x3e26 <vfprintf+0x266>
    3e18:	98 37       	cpi	r25, 0x78	; 120
    3e1a:	09 f0       	breq	.+2      	; 0x3e1e <vfprintf+0x25e>
    3e1c:	a6 c0       	rjmp	.+332    	; 0x3f6a <vfprintf+0x3aa>
    3e1e:	04 c0       	rjmp	.+8      	; 0x3e28 <vfprintf+0x268>
    3e20:	28 e0       	ldi	r18, 0x08	; 8
    3e22:	30 e0       	ldi	r19, 0x00	; 0
    3e24:	0a c0       	rjmp	.+20     	; 0x3e3a <vfprintf+0x27a>
    3e26:	10 61       	ori	r17, 0x10	; 16
    3e28:	14 fd       	sbrc	r17, 4
    3e2a:	14 60       	ori	r17, 0x04	; 4
    3e2c:	20 e1       	ldi	r18, 0x10	; 16
    3e2e:	30 e0       	ldi	r19, 0x00	; 0
    3e30:	04 c0       	rjmp	.+8      	; 0x3e3a <vfprintf+0x27a>
    3e32:	14 fd       	sbrc	r17, 4
    3e34:	16 60       	ori	r17, 0x06	; 6
    3e36:	20 e1       	ldi	r18, 0x10	; 16
    3e38:	32 e0       	ldi	r19, 0x02	; 2
    3e3a:	17 ff       	sbrs	r17, 7
    3e3c:	08 c0       	rjmp	.+16     	; 0x3e4e <vfprintf+0x28e>
    3e3e:	f5 01       	movw	r30, r10
    3e40:	60 81       	ld	r22, Z
    3e42:	71 81       	ldd	r23, Z+1	; 0x01
    3e44:	82 81       	ldd	r24, Z+2	; 0x02
    3e46:	93 81       	ldd	r25, Z+3	; 0x03
    3e48:	44 e0       	ldi	r20, 0x04	; 4
    3e4a:	50 e0       	ldi	r21, 0x00	; 0
    3e4c:	08 c0       	rjmp	.+16     	; 0x3e5e <vfprintf+0x29e>
    3e4e:	f5 01       	movw	r30, r10
    3e50:	80 81       	ld	r24, Z
    3e52:	91 81       	ldd	r25, Z+1	; 0x01
    3e54:	bc 01       	movw	r22, r24
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	42 e0       	ldi	r20, 0x02	; 2
    3e5c:	50 e0       	ldi	r21, 0x00	; 0
    3e5e:	a4 0e       	add	r10, r20
    3e60:	b5 1e       	adc	r11, r21
    3e62:	a1 01       	movw	r20, r2
    3e64:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__ultoa_invert>
    3e68:	d8 2e       	mov	r13, r24
    3e6a:	d2 18       	sub	r13, r2
    3e6c:	8f e7       	ldi	r24, 0x7F	; 127
    3e6e:	f8 2e       	mov	r15, r24
    3e70:	f1 22       	and	r15, r17
    3e72:	f6 fe       	sbrs	r15, 6
    3e74:	0b c0       	rjmp	.+22     	; 0x3e8c <vfprintf+0x2cc>
    3e76:	5e ef       	ldi	r21, 0xFE	; 254
    3e78:	f5 22       	and	r15, r21
    3e7a:	d9 14       	cp	r13, r9
    3e7c:	38 f4       	brcc	.+14     	; 0x3e8c <vfprintf+0x2cc>
    3e7e:	f4 fe       	sbrs	r15, 4
    3e80:	07 c0       	rjmp	.+14     	; 0x3e90 <vfprintf+0x2d0>
    3e82:	f2 fc       	sbrc	r15, 2
    3e84:	05 c0       	rjmp	.+10     	; 0x3e90 <vfprintf+0x2d0>
    3e86:	8f ee       	ldi	r24, 0xEF	; 239
    3e88:	f8 22       	and	r15, r24
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <vfprintf+0x2d0>
    3e8c:	1d 2d       	mov	r17, r13
    3e8e:	01 c0       	rjmp	.+2      	; 0x3e92 <vfprintf+0x2d2>
    3e90:	19 2d       	mov	r17, r9
    3e92:	f4 fe       	sbrs	r15, 4
    3e94:	0d c0       	rjmp	.+26     	; 0x3eb0 <vfprintf+0x2f0>
    3e96:	fe 01       	movw	r30, r28
    3e98:	ed 0d       	add	r30, r13
    3e9a:	f1 1d       	adc	r31, r1
    3e9c:	80 81       	ld	r24, Z
    3e9e:	80 33       	cpi	r24, 0x30	; 48
    3ea0:	19 f4       	brne	.+6      	; 0x3ea8 <vfprintf+0x2e8>
    3ea2:	99 ee       	ldi	r25, 0xE9	; 233
    3ea4:	f9 22       	and	r15, r25
    3ea6:	08 c0       	rjmp	.+16     	; 0x3eb8 <vfprintf+0x2f8>
    3ea8:	1f 5f       	subi	r17, 0xFF	; 255
    3eaa:	f2 fe       	sbrs	r15, 2
    3eac:	05 c0       	rjmp	.+10     	; 0x3eb8 <vfprintf+0x2f8>
    3eae:	03 c0       	rjmp	.+6      	; 0x3eb6 <vfprintf+0x2f6>
    3eb0:	8f 2d       	mov	r24, r15
    3eb2:	86 78       	andi	r24, 0x86	; 134
    3eb4:	09 f0       	breq	.+2      	; 0x3eb8 <vfprintf+0x2f8>
    3eb6:	1f 5f       	subi	r17, 0xFF	; 255
    3eb8:	0f 2d       	mov	r16, r15
    3eba:	f3 fc       	sbrc	r15, 3
    3ebc:	14 c0       	rjmp	.+40     	; 0x3ee6 <vfprintf+0x326>
    3ebe:	f0 fe       	sbrs	r15, 0
    3ec0:	0f c0       	rjmp	.+30     	; 0x3ee0 <vfprintf+0x320>
    3ec2:	1e 15       	cp	r17, r14
    3ec4:	10 f0       	brcs	.+4      	; 0x3eca <vfprintf+0x30a>
    3ec6:	9d 2c       	mov	r9, r13
    3ec8:	0b c0       	rjmp	.+22     	; 0x3ee0 <vfprintf+0x320>
    3eca:	9d 2c       	mov	r9, r13
    3ecc:	9e 0c       	add	r9, r14
    3ece:	91 1a       	sub	r9, r17
    3ed0:	1e 2d       	mov	r17, r14
    3ed2:	06 c0       	rjmp	.+12     	; 0x3ee0 <vfprintf+0x320>
    3ed4:	80 e2       	ldi	r24, 0x20	; 32
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	b3 01       	movw	r22, r6
    3eda:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3ede:	1f 5f       	subi	r17, 0xFF	; 255
    3ee0:	1e 15       	cp	r17, r14
    3ee2:	c0 f3       	brcs	.-16     	; 0x3ed4 <vfprintf+0x314>
    3ee4:	04 c0       	rjmp	.+8      	; 0x3eee <vfprintf+0x32e>
    3ee6:	1e 15       	cp	r17, r14
    3ee8:	10 f4       	brcc	.+4      	; 0x3eee <vfprintf+0x32e>
    3eea:	e1 1a       	sub	r14, r17
    3eec:	01 c0       	rjmp	.+2      	; 0x3ef0 <vfprintf+0x330>
    3eee:	ee 24       	eor	r14, r14
    3ef0:	04 ff       	sbrs	r16, 4
    3ef2:	0f c0       	rjmp	.+30     	; 0x3f12 <vfprintf+0x352>
    3ef4:	80 e3       	ldi	r24, 0x30	; 48
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	b3 01       	movw	r22, r6
    3efa:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3efe:	02 ff       	sbrs	r16, 2
    3f00:	1d c0       	rjmp	.+58     	; 0x3f3c <vfprintf+0x37c>
    3f02:	01 fd       	sbrc	r16, 1
    3f04:	03 c0       	rjmp	.+6      	; 0x3f0c <vfprintf+0x34c>
    3f06:	88 e7       	ldi	r24, 0x78	; 120
    3f08:	90 e0       	ldi	r25, 0x00	; 0
    3f0a:	0e c0       	rjmp	.+28     	; 0x3f28 <vfprintf+0x368>
    3f0c:	88 e5       	ldi	r24, 0x58	; 88
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	0b c0       	rjmp	.+22     	; 0x3f28 <vfprintf+0x368>
    3f12:	80 2f       	mov	r24, r16
    3f14:	86 78       	andi	r24, 0x86	; 134
    3f16:	91 f0       	breq	.+36     	; 0x3f3c <vfprintf+0x37c>
    3f18:	01 ff       	sbrs	r16, 1
    3f1a:	02 c0       	rjmp	.+4      	; 0x3f20 <vfprintf+0x360>
    3f1c:	8b e2       	ldi	r24, 0x2B	; 43
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <vfprintf+0x362>
    3f20:	80 e2       	ldi	r24, 0x20	; 32
    3f22:	f7 fc       	sbrc	r15, 7
    3f24:	8d e2       	ldi	r24, 0x2D	; 45
    3f26:	90 e0       	ldi	r25, 0x00	; 0
    3f28:	b3 01       	movw	r22, r6
    3f2a:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3f2e:	06 c0       	rjmp	.+12     	; 0x3f3c <vfprintf+0x37c>
    3f30:	80 e3       	ldi	r24, 0x30	; 48
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	b3 01       	movw	r22, r6
    3f36:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3f3a:	9a 94       	dec	r9
    3f3c:	d9 14       	cp	r13, r9
    3f3e:	c0 f3       	brcs	.-16     	; 0x3f30 <vfprintf+0x370>
    3f40:	da 94       	dec	r13
    3f42:	f1 01       	movw	r30, r2
    3f44:	ed 0d       	add	r30, r13
    3f46:	f1 1d       	adc	r31, r1
    3f48:	80 81       	ld	r24, Z
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	b3 01       	movw	r22, r6
    3f4e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3f52:	dd 20       	and	r13, r13
    3f54:	a9 f7       	brne	.-22     	; 0x3f40 <vfprintf+0x380>
    3f56:	06 c0       	rjmp	.+12     	; 0x3f64 <vfprintf+0x3a4>
    3f58:	80 e2       	ldi	r24, 0x20	; 32
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	b3 01       	movw	r22, r6
    3f5e:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <fputc>
    3f62:	ea 94       	dec	r14
    3f64:	ee 20       	and	r14, r14
    3f66:	c1 f7       	brne	.-16     	; 0x3f58 <vfprintf+0x398>
    3f68:	43 ce       	rjmp	.-890    	; 0x3bf0 <vfprintf+0x30>
    3f6a:	f3 01       	movw	r30, r6
    3f6c:	66 81       	ldd	r22, Z+6	; 0x06
    3f6e:	77 81       	ldd	r23, Z+7	; 0x07
    3f70:	cb 01       	movw	r24, r22
    3f72:	2b 96       	adiw	r28, 0x0b	; 11
    3f74:	e2 e1       	ldi	r30, 0x12	; 18
    3f76:	0c 94 a1 1d 	jmp	0x3b42	; 0x3b42 <__epilogue_restores__>

00003f7a <strnlen_P>:
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	05 90       	lpm	r0, Z+
    3f7e:	61 50       	subi	r22, 0x01	; 1
    3f80:	70 40       	sbci	r23, 0x00	; 0
    3f82:	01 10       	cpse	r0, r1
    3f84:	d8 f7       	brcc	.-10     	; 0x3f7c <strnlen_P+0x2>
    3f86:	80 95       	com	r24
    3f88:	90 95       	com	r25
    3f8a:	8e 0f       	add	r24, r30
    3f8c:	9f 1f       	adc	r25, r31
    3f8e:	08 95       	ret

00003f90 <strnlen>:
    3f90:	fc 01       	movw	r30, r24
    3f92:	61 50       	subi	r22, 0x01	; 1
    3f94:	70 40       	sbci	r23, 0x00	; 0
    3f96:	01 90       	ld	r0, Z+
    3f98:	01 10       	cpse	r0, r1
    3f9a:	d8 f7       	brcc	.-10     	; 0x3f92 <strnlen+0x2>
    3f9c:	80 95       	com	r24
    3f9e:	90 95       	com	r25
    3fa0:	8e 0f       	add	r24, r30
    3fa2:	9f 1f       	adc	r25, r31
    3fa4:	08 95       	ret

00003fa6 <fputc>:
    3fa6:	0f 93       	push	r16
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	8c 01       	movw	r16, r24
    3fb0:	eb 01       	movw	r28, r22
    3fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb4:	81 ff       	sbrs	r24, 1
    3fb6:	1b c0       	rjmp	.+54     	; 0x3fee <fputc+0x48>
    3fb8:	82 ff       	sbrs	r24, 2
    3fba:	0d c0       	rjmp	.+26     	; 0x3fd6 <fputc+0x30>
    3fbc:	2e 81       	ldd	r18, Y+6	; 0x06
    3fbe:	3f 81       	ldd	r19, Y+7	; 0x07
    3fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3fc4:	28 17       	cp	r18, r24
    3fc6:	39 07       	cpc	r19, r25
    3fc8:	64 f4       	brge	.+24     	; 0x3fe2 <fputc+0x3c>
    3fca:	e8 81       	ld	r30, Y
    3fcc:	f9 81       	ldd	r31, Y+1	; 0x01
    3fce:	01 93       	st	Z+, r16
    3fd0:	f9 83       	std	Y+1, r31	; 0x01
    3fd2:	e8 83       	st	Y, r30
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <fputc+0x3c>
    3fd6:	e8 85       	ldd	r30, Y+8	; 0x08
    3fd8:	f9 85       	ldd	r31, Y+9	; 0x09
    3fda:	80 2f       	mov	r24, r16
    3fdc:	09 95       	icall
    3fde:	89 2b       	or	r24, r25
    3fe0:	31 f4       	brne	.+12     	; 0x3fee <fputc+0x48>
    3fe2:	8e 81       	ldd	r24, Y+6	; 0x06
    3fe4:	9f 81       	ldd	r25, Y+7	; 0x07
    3fe6:	01 96       	adiw	r24, 0x01	; 1
    3fe8:	9f 83       	std	Y+7, r25	; 0x07
    3fea:	8e 83       	std	Y+6, r24	; 0x06
    3fec:	02 c0       	rjmp	.+4      	; 0x3ff2 <fputc+0x4c>
    3fee:	0f ef       	ldi	r16, 0xFF	; 255
    3ff0:	1f ef       	ldi	r17, 0xFF	; 255
    3ff2:	c8 01       	movw	r24, r16
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	08 95       	ret

00003ffe <__ultoa_invert>:
    3ffe:	fa 01       	movw	r30, r20
    4000:	aa 27       	eor	r26, r26
    4002:	28 30       	cpi	r18, 0x08	; 8
    4004:	51 f1       	breq	.+84     	; 0x405a <__ultoa_invert+0x5c>
    4006:	20 31       	cpi	r18, 0x10	; 16
    4008:	81 f1       	breq	.+96     	; 0x406a <__ultoa_invert+0x6c>
    400a:	e8 94       	clt
    400c:	6f 93       	push	r22
    400e:	6e 7f       	andi	r22, 0xFE	; 254
    4010:	6e 5f       	subi	r22, 0xFE	; 254
    4012:	7f 4f       	sbci	r23, 0xFF	; 255
    4014:	8f 4f       	sbci	r24, 0xFF	; 255
    4016:	9f 4f       	sbci	r25, 0xFF	; 255
    4018:	af 4f       	sbci	r26, 0xFF	; 255
    401a:	b1 e0       	ldi	r27, 0x01	; 1
    401c:	3e d0       	rcall	.+124    	; 0x409a <__ultoa_invert+0x9c>
    401e:	b4 e0       	ldi	r27, 0x04	; 4
    4020:	3c d0       	rcall	.+120    	; 0x409a <__ultoa_invert+0x9c>
    4022:	67 0f       	add	r22, r23
    4024:	78 1f       	adc	r23, r24
    4026:	89 1f       	adc	r24, r25
    4028:	9a 1f       	adc	r25, r26
    402a:	a1 1d       	adc	r26, r1
    402c:	68 0f       	add	r22, r24
    402e:	79 1f       	adc	r23, r25
    4030:	8a 1f       	adc	r24, r26
    4032:	91 1d       	adc	r25, r1
    4034:	a1 1d       	adc	r26, r1
    4036:	6a 0f       	add	r22, r26
    4038:	71 1d       	adc	r23, r1
    403a:	81 1d       	adc	r24, r1
    403c:	91 1d       	adc	r25, r1
    403e:	a1 1d       	adc	r26, r1
    4040:	20 d0       	rcall	.+64     	; 0x4082 <__ultoa_invert+0x84>
    4042:	09 f4       	brne	.+2      	; 0x4046 <__ultoa_invert+0x48>
    4044:	68 94       	set
    4046:	3f 91       	pop	r19
    4048:	2a e0       	ldi	r18, 0x0A	; 10
    404a:	26 9f       	mul	r18, r22
    404c:	11 24       	eor	r1, r1
    404e:	30 19       	sub	r19, r0
    4050:	30 5d       	subi	r19, 0xD0	; 208
    4052:	31 93       	st	Z+, r19
    4054:	de f6       	brtc	.-74     	; 0x400c <__ultoa_invert+0xe>
    4056:	cf 01       	movw	r24, r30
    4058:	08 95       	ret
    405a:	46 2f       	mov	r20, r22
    405c:	47 70       	andi	r20, 0x07	; 7
    405e:	40 5d       	subi	r20, 0xD0	; 208
    4060:	41 93       	st	Z+, r20
    4062:	b3 e0       	ldi	r27, 0x03	; 3
    4064:	0f d0       	rcall	.+30     	; 0x4084 <__ultoa_invert+0x86>
    4066:	c9 f7       	brne	.-14     	; 0x405a <__ultoa_invert+0x5c>
    4068:	f6 cf       	rjmp	.-20     	; 0x4056 <__ultoa_invert+0x58>
    406a:	46 2f       	mov	r20, r22
    406c:	4f 70       	andi	r20, 0x0F	; 15
    406e:	40 5d       	subi	r20, 0xD0	; 208
    4070:	4a 33       	cpi	r20, 0x3A	; 58
    4072:	18 f0       	brcs	.+6      	; 0x407a <__ultoa_invert+0x7c>
    4074:	49 5d       	subi	r20, 0xD9	; 217
    4076:	31 fd       	sbrc	r19, 1
    4078:	40 52       	subi	r20, 0x20	; 32
    407a:	41 93       	st	Z+, r20
    407c:	02 d0       	rcall	.+4      	; 0x4082 <__ultoa_invert+0x84>
    407e:	a9 f7       	brne	.-22     	; 0x406a <__ultoa_invert+0x6c>
    4080:	ea cf       	rjmp	.-44     	; 0x4056 <__ultoa_invert+0x58>
    4082:	b4 e0       	ldi	r27, 0x04	; 4
    4084:	a6 95       	lsr	r26
    4086:	97 95       	ror	r25
    4088:	87 95       	ror	r24
    408a:	77 95       	ror	r23
    408c:	67 95       	ror	r22
    408e:	ba 95       	dec	r27
    4090:	c9 f7       	brne	.-14     	; 0x4084 <__ultoa_invert+0x86>
    4092:	00 97       	sbiw	r24, 0x00	; 0
    4094:	61 05       	cpc	r22, r1
    4096:	71 05       	cpc	r23, r1
    4098:	08 95       	ret
    409a:	9b 01       	movw	r18, r22
    409c:	ac 01       	movw	r20, r24
    409e:	0a 2e       	mov	r0, r26
    40a0:	06 94       	lsr	r0
    40a2:	57 95       	ror	r21
    40a4:	47 95       	ror	r20
    40a6:	37 95       	ror	r19
    40a8:	27 95       	ror	r18
    40aa:	ba 95       	dec	r27
    40ac:	c9 f7       	brne	.-14     	; 0x40a0 <__ultoa_invert+0xa2>
    40ae:	62 0f       	add	r22, r18
    40b0:	73 1f       	adc	r23, r19
    40b2:	84 1f       	adc	r24, r20
    40b4:	95 1f       	adc	r25, r21
    40b6:	a0 1d       	adc	r26, r0
    40b8:	08 95       	ret

000040ba <_exit>:
    40ba:	f8 94       	cli

000040bc <__stop_program>:
    40bc:	ff cf       	rjmp	.-2      	; 0x40bc <__stop_program>
